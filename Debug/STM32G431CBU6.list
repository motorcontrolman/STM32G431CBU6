
STM32G431CBU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005938  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08005b10  08005b10  00015b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f30  08005f30  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005f30  08005f30  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f30  08005f30  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f34  08005f34  00015f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000074  08005fac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08005fac  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c23b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003216  00000000  00000000  0003c2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00014137  00000000  00000000  0003f4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  00053630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001438  00000000  00000000  00054810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020cdc  00000000  00000000  00055c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d2c0  00000000  00000000  00076924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7f7f  00000000  00000000  00093be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016bb63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003220  00000000  00000000  0016bbb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000074 	.word	0x20000074
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005af8 	.word	0x08005af8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	08005af8 	.word	0x08005af8

08000218 <cfPhaseLockedLoop>:

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 8000218:	ee20 1a01 	vmul.f32	s2, s0, s2
 800021c:	edd0 7a00 	vldr	s15, [r0]
 8000220:	ee31 1a27 	vadd.f32	s2, s2, s15
 8000224:	ed80 1a00 	vstr	s2, [r0]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 8000228:	ee20 0a20 	vmul.f32	s0, s0, s1

	return ElectAngVeloEstimate;
}
 800022c:	ee31 0a00 	vadd.f32	s0, s2, s0
 8000230:	4770      	bx	lr

08000232 <gfDivideAvoidZero>:
#include "GeneralFunctions.h"
#include "GlobalConstants.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
	float result;
	if ( den >= 0 && den < threshold )
 8000232:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8000236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800023a:	db04      	blt.n	8000246 <gfDivideAvoidZero+0x14>
 800023c:	eef4 0ac1 	vcmpe.f32	s1, s2
 8000240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000244:	d411      	bmi.n	800026a <gfDivideAvoidZero+0x38>
		den = threshold;
	else if( den < 0 && den > -threshold)
 8000246:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800024a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800024e:	d402      	bmi.n	8000256 <gfDivideAvoidZero+0x24>
		den = -threshold;

	result = num / den;
	return result;
}
 8000250:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8000254:	4770      	bx	lr
	else if( den < 0 && den > -threshold)
 8000256:	eeb1 1a41 	vneg.f32	s2, s2
 800025a:	eeb4 1ae0 	vcmpe.f32	s2, s1
 800025e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000262:	d5f5      	bpl.n	8000250 <gfDivideAvoidZero+0x1e>
		den = -threshold;
 8000264:	eef0 0a41 	vmov.f32	s1, s2
 8000268:	e7f2      	b.n	8000250 <gfDivideAvoidZero+0x1e>
		den = threshold;
 800026a:	eef0 0a41 	vmov.f32	s1, s2
 800026e:	e7ef      	b.n	8000250 <gfDivideAvoidZero+0x1e>

08000270 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000270:	b508      	push	{r3, lr}
	theta = fmodf(theta, TWOPI);
 8000272:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80002ac <gfWrapTheta+0x3c>
 8000276:	f004 fcf1 	bl	8004c5c <fmodf>
	if( theta > PI)
 800027a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80002b0 <gfWrapTheta+0x40>
 800027e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000286:	dd04      	ble.n	8000292 <gfWrapTheta+0x22>
		theta -= TWOPI;
 8000288:	eddf 7a08 	vldr	s15, [pc, #32]	; 80002ac <gfWrapTheta+0x3c>
 800028c:	ee30 0a67 	vsub.f32	s0, s0, s15
	else if( theta < -PI)
		theta += TWOPI;

	return theta;
}
 8000290:	bd08      	pop	{r3, pc}
	else if( theta < -PI)
 8000292:	eddf 7a08 	vldr	s15, [pc, #32]	; 80002b4 <gfWrapTheta+0x44>
 8000296:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800029a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800029e:	d5f7      	bpl.n	8000290 <gfWrapTheta+0x20>
		theta += TWOPI;
 80002a0:	eddf 7a02 	vldr	s15, [pc, #8]	; 80002ac <gfWrapTheta+0x3c>
 80002a4:	ee30 0a27 	vadd.f32	s0, s0, s15
	return theta;
 80002a8:	e7f2      	b.n	8000290 <gfWrapTheta+0x20>
 80002aa:	bf00      	nop
 80002ac:	40c90fdb 	.word	0x40c90fdb
 80002b0:	40490fdb 	.word	0x40490fdb
 80002b4:	c0490fdb 	.word	0xc0490fdb

080002b8 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 80002b8:	eef0 7a40 	vmov.f32	s15, s0
 80002bc:	eeb0 0a41 	vmov.f32	s0, s2
	if(input > Upper) input = Upper;
 80002c0:	eef4 7ae0 	vcmpe.f32	s15, s1
 80002c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002c8:	dc01      	bgt.n	80002ce <gUpperLowerLimit+0x16>
 80002ca:	eef0 0a67 	vmov.f32	s1, s15
	if(input < Lower) input = Lower;
 80002ce:	eef4 0ac0 	vcmpe.f32	s1, s0
 80002d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002d6:	d401      	bmi.n	80002dc <gUpperLowerLimit+0x24>
 80002d8:	eeb0 0a60 	vmov.f32	s0, s1
	return input;
}
 80002dc:	4770      	bx	lr

080002de <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
	*outputMode = OUTPUTMODE_RESET;
 80002de:	2300      	movs	r3, #0
 80002e0:	700b      	strb	r3, [r1, #0]
	Duty[0] = 0.0f;
 80002e2:	2300      	movs	r3, #0
 80002e4:	6003      	str	r3, [r0, #0]
	Duty[1] = 0.0f;
 80002e6:	6043      	str	r3, [r0, #4]
	Duty[2] = 0.0f;
 80002e8:	6083      	str	r3, [r0, #8]
}
 80002ea:	4770      	bx	lr

080002ec <gLPF>:
	// Under approximation  1/wc >> Ts
	// gainLPF = Ts/(tau + Ts) = Ts / tau = wc * Ts;
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 80002ec:	ee20 1a81 	vmul.f32	s2, s1, s2
	yn_1 = *y;
 80002f0:	ed90 7a00 	vldr	s14, [r0]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 80002f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80002f8:	ee77 7ac1 	vsub.f32	s15, s15, s2
 80002fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000300:	ee21 1a00 	vmul.f32	s2, s2, s0
 8000304:	ee77 7a81 	vadd.f32	s15, s15, s2
 8000308:	edc0 7a00 	vstr	s15, [r0]
}
 800030c:	4770      	bx	lr
	...

08000310 <Sequence_Low_Freq>:
static inline void slctDrvModeForSensorless(float electAngVelo, uint8_t* drvMode);
static inline void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData);
static inline void slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode);
static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData);

void Sequence_Low_Freq(void){
 8000310:	b530      	push	{r4, r5, lr}
 8000312:	ed2d 8b02 	vpush	{d8}
 8000316:	b08b      	sub	sp, #44	; 0x2c
	float propoDuty;


	//read IO signals
	//gButton1 = readButton1();
	gVolume = 0; //readVolume();
 8000318:	4b71      	ldr	r3, [pc, #452]	; (80004e0 <Sequence_Low_Freq+0x1d0>)
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]

	propoDuty = readPropoDuty();
 800031e:	f000 f9c7 	bl	80006b0 <readPropoDuty>
	gLPF(propoDuty, ANGULARFREQ2Hz, CARRIERCYCLE, &gPropoDuty);
 8000322:	4870      	ldr	r0, [pc, #448]	; (80004e4 <Sequence_Low_Freq+0x1d4>)
 8000324:	ed9f 1a70 	vldr	s2, [pc, #448]	; 80004e8 <Sequence_Low_Freq+0x1d8>
 8000328:	eddf 0a70 	vldr	s1, [pc, #448]	; 80004ec <Sequence_Low_Freq+0x1dc>
 800032c:	f7ff ffde 	bl	80002ec <gLPF>

	sSensData.Vdc = 10.0f;//readVdc();
 8000330:	4c6f      	ldr	r4, [pc, #444]	; (80004f0 <Sequence_Low_Freq+0x1e0>)
 8000332:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000336:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
	gLPF(sSensData.Vdc, ANGULARFREQ20Hz, LOWSEQUENCEPERIOD, &sSensData.Vdc_LPF);
 800033a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800033e:	ed9f 1a6d 	vldr	s2, [pc, #436]	; 80004f4 <Sequence_Low_Freq+0x1e4>
 8000342:	eddf 0a6d 	vldr	s1, [pc, #436]	; 80004f8 <Sequence_Low_Freq+0x1e8>
 8000346:	f7ff ffd1 	bl	80002ec <gLPF>
	sSensData.twoDivVdc = gfDivideAvoidZero(2.0f, sSensData.Vdc_LPF, 1.0f);
 800034a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800034e:	edd4 0a0b 	vldr	s1, [r4, #44]	; 0x2c
 8000352:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000356:	f7ff ff6c 	bl	8000232 <gfDivideAvoidZero>
 800035a:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30

	if(sInitCnt < INITCNTMAX){
 800035e:	4b67      	ldr	r3, [pc, #412]	; (80004fc <Sequence_Low_Freq+0x1ec>)
 8000360:	881b      	ldrh	r3, [r3, #0]
 8000362:	2b28      	cmp	r3, #40	; 0x28
 8000364:	d819      	bhi.n	800039a <Sequence_Low_Freq+0x8a>
		sInitCnt++;
 8000366:	3301      	adds	r3, #1
 8000368:	b29b      	uxth	r3, r3
 800036a:	4a64      	ldr	r2, [pc, #400]	; (80004fc <Sequence_Low_Freq+0x1ec>)
 800036c:	8013      	strh	r3, [r2, #0]
		sPosMode = POSMODE_HALL;
 800036e:	4a64      	ldr	r2, [pc, #400]	; (8000500 <Sequence_Low_Freq+0x1f0>)
 8000370:	2102      	movs	r1, #2
 8000372:	7011      	strb	r1, [r2, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 8000374:	4a63      	ldr	r2, [pc, #396]	; (8000504 <Sequence_Low_Freq+0x1f4>)
 8000376:	2100      	movs	r1, #0
 8000378:	7011      	strb	r1, [r2, #0]
		sElectAngVeloRefRateLimit = 0;
 800037a:	4a63      	ldr	r2, [pc, #396]	; (8000508 <Sequence_Low_Freq+0x1f8>)
 800037c:	2100      	movs	r1, #0
 800037e:	6011      	str	r1, [r2, #0]

		// Get Current Sensor Offset
		if( sInitCnt <= INITCNTST1){
 8000380:	2b01      	cmp	r3, #1
 8000382:	d903      	bls.n	800038c <Sequence_Low_Freq+0x7c>
			InitVectorControl(sSensData, &sVectorControlData);
		}

		calcCurrentRef(sDrvMode, &sVectorControlData);
	}
}
 8000384:	b00b      	add	sp, #44	; 0x2c
 8000386:	ecbd 8b02 	vpop	{d8}
 800038a:	bd30      	pop	{r4, r5, pc}
			sSensData.Iuvw_AD_Offset[0] = 2110.0f;
 800038c:	4a5f      	ldr	r2, [pc, #380]	; (800050c <Sequence_Low_Freq+0x1fc>)
 800038e:	61e2      	str	r2, [r4, #28]
			sSensData.Iuvw_AD_Offset[1] = 2019.0f;
 8000390:	4a5f      	ldr	r2, [pc, #380]	; (8000510 <Sequence_Low_Freq+0x200>)
 8000392:	6222      	str	r2, [r4, #32]
			sSensData.Iuvw_AD_Offset[2] = 2066.0f;
 8000394:	4a5f      	ldr	r2, [pc, #380]	; (8000514 <Sequence_Low_Freq+0x204>)
 8000396:	6262      	str	r2, [r4, #36]	; 0x24
 8000398:	e7f4      	b.n	8000384 <Sequence_Low_Freq+0x74>
		posMode_pre = sPosMode;
 800039a:	4b59      	ldr	r3, [pc, #356]	; (8000500 <Sequence_Low_Freq+0x1f0>)
 800039c:	781a      	ldrb	r2, [r3, #0]
		drvMode_pre = sDrvMode;
 800039e:	4b59      	ldr	r3, [pc, #356]	; (8000504 <Sequence_Low_Freq+0x1f4>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
		slctPosMode(gElectFreq, &sPosMode);
 80003a2:	495d      	ldr	r1, [pc, #372]	; (8000518 <Sequence_Low_Freq+0x208>)
 80003a4:	edd1 7a00 	vldr	s15, [r1]
	//gFreerunCnt = readFreeRunCnt();
	//gProcessingLoad = (float)gFreerunCnt * ONEDIVCARRIERCNT;
}
void inline slctPosMode(float electFreq, uint8_t* posMode){

	if(*posMode != POSMODE_HALL_PLL){
 80003a8:	2a03      	cmp	r2, #3
 80003aa:	d02a      	beq.n	8000402 <Sequence_Low_Freq+0xf2>
		if (electFreq > ELECTFREQ_VALIDPLL)
 80003ac:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800051c <Sequence_Low_Freq+0x20c>
 80003b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003b8:	dd1f      	ble.n	80003fa <Sequence_Low_Freq+0xea>
			*posMode = POSMODE_HALL_PLL;
 80003ba:	4a51      	ldr	r2, [pc, #324]	; (8000500 <Sequence_Low_Freq+0x1f0>)
 80003bc:	2103      	movs	r1, #3
 80003be:	7011      	strb	r1, [r2, #0]

}

void inline slctDrvMode(float electFreq, uint8_t* drvMode){

	if(*drvMode != DRVMODE_VECTORCONTROL){
 80003c0:	2b04      	cmp	r3, #4
 80003c2:	d031      	beq.n	8000428 <Sequence_Low_Freq+0x118>
		if (electFreq > ELECTFREQ_OPENLOOP2VECTORCONTROL)
 80003c4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8000520 <Sequence_Low_Freq+0x210>
 80003c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d0:	dd26      	ble.n	8000420 <Sequence_Low_Freq+0x110>
			*drvMode = DRVMODE_VECTORCONTROL;
 80003d2:	4a4c      	ldr	r2, [pc, #304]	; (8000504 <Sequence_Low_Freq+0x1f4>)
 80003d4:	2104      	movs	r1, #4
 80003d6:	7011      	strb	r1, [r2, #0]
		if( drvMode_pre == DRVMODE_OPENLOOP && sDrvMode == DRVMODE_VECTORCONTROL){  // Init for VectorControl
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d034      	beq.n	8000446 <Sequence_Low_Freq+0x136>
		calcCurrentRef(sDrvMode, &sVectorControlData);
 80003dc:	4b49      	ldr	r3, [pc, #292]	; (8000504 <Sequence_Low_Freq+0x1f4>)
 80003de:	781b      	ldrb	r3, [r3, #0]
			gOffDuty(Duty, outputMode);
	}
}

static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData){
	switch(drvMode){
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	d04f      	beq.n	8000484 <Sequence_Low_Freq+0x174>
 80003e4:	2b04      	cmp	r3, #4
 80003e6:	d055      	beq.n	8000494 <Sequence_Low_Freq+0x184>
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d044      	beq.n	8000476 <Sequence_Low_Freq+0x166>
			vectorControlData->Idq_ref[1] = IQREFMAX * gVolume;
			gLPF(vectorControlData->Idq_ref[0], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[0]);
			gLPF(vectorControlData->Idq_ref[1], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[1]);
			break;
		default :
			vectorControlData->Idq_ref[0] = 0.0f;
 80003ec:	4b4d      	ldr	r3, [pc, #308]	; (8000524 <Sequence_Low_Freq+0x214>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
 80003f2:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
 80003f4:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
 80003f6:	60da      	str	r2, [r3, #12]
}
 80003f8:	e7c4      	b.n	8000384 <Sequence_Low_Freq+0x74>
			*posMode = POSMODE_HALL;
 80003fa:	4a41      	ldr	r2, [pc, #260]	; (8000500 <Sequence_Low_Freq+0x1f0>)
 80003fc:	2102      	movs	r1, #2
 80003fe:	7011      	strb	r1, [r2, #0]
 8000400:	e7de      	b.n	80003c0 <Sequence_Low_Freq+0xb0>
		if (electFreq < ELECTFREQ_INVALIDPLL)
 8000402:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000528 <Sequence_Low_Freq+0x218>
 8000406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800040a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800040e:	d503      	bpl.n	8000418 <Sequence_Low_Freq+0x108>
			*posMode = POSMODE_HALL;
 8000410:	4a3b      	ldr	r2, [pc, #236]	; (8000500 <Sequence_Low_Freq+0x1f0>)
 8000412:	2102      	movs	r1, #2
 8000414:	7011      	strb	r1, [r2, #0]
 8000416:	e7d3      	b.n	80003c0 <Sequence_Low_Freq+0xb0>
			*posMode = POSMODE_HALL_PLL;
 8000418:	4a39      	ldr	r2, [pc, #228]	; (8000500 <Sequence_Low_Freq+0x1f0>)
 800041a:	2103      	movs	r1, #3
 800041c:	7011      	strb	r1, [r2, #0]
 800041e:	e7cf      	b.n	80003c0 <Sequence_Low_Freq+0xb0>
			*drvMode = DRVMODE_OPENLOOP;
 8000420:	4a38      	ldr	r2, [pc, #224]	; (8000504 <Sequence_Low_Freq+0x1f4>)
 8000422:	2102      	movs	r1, #2
 8000424:	7011      	strb	r1, [r2, #0]
 8000426:	e7d7      	b.n	80003d8 <Sequence_Low_Freq+0xc8>
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
 8000428:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800052c <Sequence_Low_Freq+0x21c>
 800042c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000434:	d503      	bpl.n	800043e <Sequence_Low_Freq+0x12e>
			*drvMode = DRVMODE_OPENLOOP;
 8000436:	4a33      	ldr	r2, [pc, #204]	; (8000504 <Sequence_Low_Freq+0x1f4>)
 8000438:	2102      	movs	r1, #2
 800043a:	7011      	strb	r1, [r2, #0]
 800043c:	e7cc      	b.n	80003d8 <Sequence_Low_Freq+0xc8>
			*drvMode = DRVMODE_VECTORCONTROL;
 800043e:	4a31      	ldr	r2, [pc, #196]	; (8000504 <Sequence_Low_Freq+0x1f4>)
 8000440:	2104      	movs	r1, #4
 8000442:	7011      	strb	r1, [r2, #0]
 8000444:	e7c8      	b.n	80003d8 <Sequence_Low_Freq+0xc8>
		if( drvMode_pre == DRVMODE_OPENLOOP && sDrvMode == DRVMODE_VECTORCONTROL){  // Init for VectorControl
 8000446:	4b2f      	ldr	r3, [pc, #188]	; (8000504 <Sequence_Low_Freq+0x1f4>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b04      	cmp	r3, #4
 800044c:	d1c6      	bne.n	80003dc <Sequence_Low_Freq+0xcc>
			InitVectorControl(sSensData, &sVectorControlData);
 800044e:	4d28      	ldr	r5, [pc, #160]	; (80004f0 <Sequence_Low_Freq+0x1e0>)
 8000450:	4b34      	ldr	r3, [pc, #208]	; (8000524 <Sequence_Low_Freq+0x214>)
 8000452:	9309      	str	r3, [sp, #36]	; 0x24
 8000454:	466c      	mov	r4, sp
 8000456:	f105 0c10 	add.w	ip, r5, #16
 800045a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800045e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000460:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000466:	f8dc 3000 	ldr.w	r3, [ip]
 800046a:	6023      	str	r3, [r4, #0]
 800046c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000470:	f000 fec8 	bl	8001204 <InitVectorControl>
 8000474:	e7b2      	b.n	80003dc <Sequence_Low_Freq+0xcc>
			vectorControlData->Idq_ref[0] = 0.0f;
 8000476:	4b2b      	ldr	r3, [pc, #172]	; (8000524 <Sequence_Low_Freq+0x214>)
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
 800047c:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
 800047e:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
 8000480:	60da      	str	r2, [r3, #12]
			break;
 8000482:	e77f      	b.n	8000384 <Sequence_Low_Freq+0x74>
			vectorControlData->Idq_ref[0] = vectorControlData->Idq_LPF[0];
 8000484:	4b27      	ldr	r3, [pc, #156]	; (8000524 <Sequence_Low_Freq+0x214>)
 8000486:	6999      	ldr	r1, [r3, #24]
 8000488:	6019      	str	r1, [r3, #0]
			vectorControlData->Idq_ref[1] = vectorControlData->Idq_LPF[1];
 800048a:	69da      	ldr	r2, [r3, #28]
 800048c:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = vectorControlData->Idq_LPF[0];
 800048e:	6099      	str	r1, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = vectorControlData->Idq_LPF[1];
 8000490:	60da      	str	r2, [r3, #12]
			break;
 8000492:	e777      	b.n	8000384 <Sequence_Low_Freq+0x74>
			vectorControlData->Idq_ref[0] = 0.0f;
 8000494:	4c23      	ldr	r4, [pc, #140]	; (8000524 <Sequence_Low_Freq+0x214>)
 8000496:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8000530 <Sequence_Low_Freq+0x220>
 800049a:	ed84 0a00 	vstr	s0, [r4]
			vectorControlData->Idq_ref[1] = IQREFMAX * gVolume;
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <Sequence_Low_Freq+0x1d0>)
 80004a0:	edd3 7a00 	vldr	s15, [r3]
 80004a4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80004a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80004ac:	edc4 7a01 	vstr	s15, [r4, #4]
			gLPF(vectorControlData->Idq_ref[0], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[0]);
 80004b0:	eddf 8a10 	vldr	s17, [pc, #64]	; 80004f4 <Sequence_Low_Freq+0x1e4>
 80004b4:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8000534 <Sequence_Low_Freq+0x224>
 80004b8:	f104 0008 	add.w	r0, r4, #8
 80004bc:	eeb0 1a68 	vmov.f32	s2, s17
 80004c0:	eef0 0a48 	vmov.f32	s1, s16
 80004c4:	f7ff ff12 	bl	80002ec <gLPF>
			gLPF(vectorControlData->Idq_ref[1], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[1]);
 80004c8:	f104 000c 	add.w	r0, r4, #12
 80004cc:	eeb0 1a68 	vmov.f32	s2, s17
 80004d0:	eef0 0a48 	vmov.f32	s1, s16
 80004d4:	ed94 0a01 	vldr	s0, [r4, #4]
 80004d8:	f7ff ff08 	bl	80002ec <gLPF>
			break;
 80004dc:	e752      	b.n	8000384 <Sequence_Low_Freq+0x74>
 80004de:	bf00      	nop
 80004e0:	200000a0 	.word	0x200000a0
 80004e4:	20000098 	.word	0x20000098
 80004e8:	38aec33e 	.word	0x38aec33e
 80004ec:	4148f5c3 	.word	0x4148f5c3
 80004f0:	200000c0 	.word	0x200000c0
 80004f4:	3a83126f 	.word	0x3a83126f
 80004f8:	42fb3333 	.word	0x42fb3333
 80004fc:	200000bc 	.word	0x200000bc
 8000500:	200000bf 	.word	0x200000bf
 8000504:	200000a4 	.word	0x200000a4
 8000508:	200000b4 	.word	0x200000b4
 800050c:	4503e000 	.word	0x4503e000
 8000510:	44fc6000 	.word	0x44fc6000
 8000514:	45012000 	.word	0x45012000
 8000518:	20000090 	.word	0x20000090
 800051c:	43480000 	.word	0x43480000
 8000520:	43960000 	.word	0x43960000
 8000524:	200000f4 	.word	0x200000f4
 8000528:	43160000 	.word	0x43160000
 800052c:	437a0000 	.word	0x437a0000
 8000530:	00000000 	.word	0x00000000
 8000534:	41fb53d1 	.word	0x41fb53d1

08000538 <Sequence_High_Freq>:
void Sequence_High_Freq(void){
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	b09a      	sub	sp, #104	; 0x68
	SPI_TransmitReceive_lap();
 800053c:	f000 ff1e 	bl	800137c <SPI_TransmitReceive_lap>
	readCurrent(sSensData.Iuvw_AD, sSensData.Iuvw_AD_Offset, sSensData.Iuvw);
 8000540:	4c42      	ldr	r4, [pc, #264]	; (800064c <Sequence_High_Freq+0x114>)
 8000542:	f104 0208 	add.w	r2, r4, #8
 8000546:	f104 011c 	add.w	r1, r4, #28
 800054a:	f104 0014 	add.w	r0, r4, #20
 800054e:	f000 f921 	bl	8000794 <readCurrent>
	sPosMode = POSMODE_FREERUN;
 8000552:	2101      	movs	r1, #1
 8000554:	4b3e      	ldr	r3, [pc, #248]	; (8000650 <Sequence_High_Freq+0x118>)
 8000556:	7019      	strb	r1, [r3, #0]
	sDrvMode = DRVMODE_OPENLOOP;
 8000558:	4d3e      	ldr	r5, [pc, #248]	; (8000654 <Sequence_High_Freq+0x11c>)
 800055a:	2302      	movs	r3, #2
 800055c:	702b      	strb	r3, [r5, #0]
	sElectAngVeloRefRateLimit = TWOPI * 10.0f;
 800055e:	4b3e      	ldr	r3, [pc, #248]	; (8000658 <Sequence_High_Freq+0x120>)
 8000560:	4a3e      	ldr	r2, [pc, #248]	; (800065c <Sequence_High_Freq+0x124>)
 8000562:	6013      	str	r3, [r2, #0]
		sensData->electAngVelo = sElectAngVeloRefRateLimit;
 8000564:	6063      	str	r3, [r4, #4]
		sElectAngleFreerun = 0;//+= sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 8000566:	2600      	movs	r6, #0
 8000568:	4b3d      	ldr	r3, [pc, #244]	; (8000660 <Sequence_High_Freq+0x128>)
 800056a:	601e      	str	r6, [r3, #0]
		sensData->electAngle = gTheta;
 800056c:	4b3d      	ldr	r3, [pc, #244]	; (8000664 <Sequence_High_Freq+0x12c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	6023      	str	r3, [r4, #0]
		calcElectAngle(gHall, gElectFreq, flgPLL, &electAngle, &electAngVelo);
 8000572:	ab0d      	add	r3, sp, #52	; 0x34
 8000574:	aa0c      	add	r2, sp, #48	; 0x30
 8000576:	483c      	ldr	r0, [pc, #240]	; (8000668 <Sequence_High_Freq+0x130>)
 8000578:	ed90 0a00 	vldr	s0, [r0]
 800057c:	483b      	ldr	r0, [pc, #236]	; (800066c <Sequence_High_Freq+0x134>)
 800057e:	f000 f9a7 	bl	80008d0 <calcElectAngle>
	slctCntlFromDrvMode(sDrvMode, sSensData, &sVectorControlData, sDuty, &sOutputMode);
 8000582:	782d      	ldrb	r5, [r5, #0]
 8000584:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 8000588:	46a4      	mov	ip, r4
 800058a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800058e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000592:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000596:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800059a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800059e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80005a2:	f8dc 3000 	ldr.w	r3, [ip]
 80005a6:	f8ce 3000 	str.w	r3, [lr]
	vectorControlData->Idq_ref[0] = 0.0f;
 80005aa:	4b31      	ldr	r3, [pc, #196]	; (8000670 <Sequence_High_Freq+0x138>)
 80005ac:	601e      	str	r6, [r3, #0]
	vectorControlData->Idq_ref[1] = 3.0f;//IQREFMAX * gVolume;
 80005ae:	4a31      	ldr	r2, [pc, #196]	; (8000674 <Sequence_High_Freq+0x13c>)
 80005b0:	605a      	str	r2, [r3, #4]
	vectorControlData->Idq_ref_LPF[0] = vectorControlData->Idq_ref[0];
 80005b2:	609e      	str	r6, [r3, #8]
	vectorControlData->Idq_ref_LPF[1] = vectorControlData->Idq_ref[1];//IQREFMAX * gVolume;
 80005b4:	60da      	str	r2, [r3, #12]
	switch(drvMode){
 80005b6:	2d02      	cmp	r5, #2
 80005b8:	d015      	beq.n	80005e6 <Sequence_High_Freq+0xae>
 80005ba:	2d04      	cmp	r5, #4
 80005bc:	d032      	beq.n	8000624 <Sequence_High_Freq+0xec>
 80005be:	b125      	cbz	r5, 80005ca <Sequence_High_Freq+0x92>
			gOffDuty(Duty, outputMode);
 80005c0:	492d      	ldr	r1, [pc, #180]	; (8000678 <Sequence_High_Freq+0x140>)
 80005c2:	482e      	ldr	r0, [pc, #184]	; (800067c <Sequence_High_Freq+0x144>)
 80005c4:	f7ff fe8b 	bl	80002de <gOffDuty>
 80005c8:	e003      	b.n	80005d2 <Sequence_High_Freq+0x9a>
			gOffDuty(Duty, outputMode);
 80005ca:	492b      	ldr	r1, [pc, #172]	; (8000678 <Sequence_High_Freq+0x140>)
 80005cc:	482b      	ldr	r0, [pc, #172]	; (800067c <Sequence_High_Freq+0x144>)
 80005ce:	f7ff fe86 	bl	80002de <gOffDuty>
	writeOutputMode(sOutputMode);
 80005d2:	4b29      	ldr	r3, [pc, #164]	; (8000678 <Sequence_High_Freq+0x140>)
 80005d4:	f993 0000 	ldrsb.w	r0, [r3]
 80005d8:	f000 f916 	bl	8000808 <writeOutputMode>
	writeDuty(sDuty);
 80005dc:	4827      	ldr	r0, [pc, #156]	; (800067c <Sequence_High_Freq+0x144>)
 80005de:	f000 f92f 	bl	8000840 <writeDuty>
}
 80005e2:	b01a      	add	sp, #104	; 0x68
 80005e4:	bd70      	pop	{r4, r5, r6, pc}
			VamRef = sSensData.Vdc * SQRT3DIV2_DIV2 * gPropoDuty;// * gButton1;//gVolume;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <Sequence_High_Freq+0x114>)
 80005e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80005ec:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8000680 <Sequence_High_Freq+0x148>
 80005f0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80005f4:	4b23      	ldr	r3, [pc, #140]	; (8000684 <Sequence_High_Freq+0x14c>)
 80005f6:	ed93 0a00 	vldr	s0, [r3]
			OpenLoopTasks(VamRef, sensData, vectorControlData, Duty, outputMode);
 80005fa:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <Sequence_High_Freq+0x140>)
 80005fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <Sequence_High_Freq+0x144>)
 8000600:	930a      	str	r3, [sp, #40]	; 0x28
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <Sequence_High_Freq+0x138>)
 8000604:	9309      	str	r3, [sp, #36]	; 0x24
 8000606:	466c      	mov	r4, sp
 8000608:	ad11      	add	r5, sp, #68	; 0x44
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	682b      	ldr	r3, [r5, #0]
 8000614:	6023      	str	r3, [r4, #0]
 8000616:	ab0d      	add	r3, sp, #52	; 0x34
 8000618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800061a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800061e:	f000 fc57 	bl	8000ed0 <OpenLoopTasks>
			break;
 8000622:	e7d6      	b.n	80005d2 <Sequence_High_Freq+0x9a>
			VectorControlTasks(sensData, vectorControlData, Duty, outputMode);
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <Sequence_High_Freq+0x140>)
 8000626:	930b      	str	r3, [sp, #44]	; 0x2c
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <Sequence_High_Freq+0x144>)
 800062a:	930a      	str	r3, [sp, #40]	; 0x28
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <Sequence_High_Freq+0x138>)
 800062e:	9309      	str	r3, [sp, #36]	; 0x24
 8000630:	466c      	mov	r4, sp
 8000632:	ad11      	add	r5, sp, #68	; 0x44
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	682b      	ldr	r3, [r5, #0]
 800063e:	6023      	str	r3, [r4, #0]
 8000640:	ab0d      	add	r3, sp, #52	; 0x34
 8000642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000644:	f000 fa32 	bl	8000aac <VectorControlTasks>
			break;
 8000648:	e7c3      	b.n	80005d2 <Sequence_High_Freq+0x9a>
 800064a:	bf00      	nop
 800064c:	200000c0 	.word	0x200000c0
 8000650:	200000bf 	.word	0x200000bf
 8000654:	200000a4 	.word	0x200000a4
 8000658:	427b53d2 	.word	0x427b53d2
 800065c:	200000b4 	.word	0x200000b4
 8000660:	200000b8 	.word	0x200000b8
 8000664:	2000009c 	.word	0x2000009c
 8000668:	20000090 	.word	0x20000090
 800066c:	20000094 	.word	0x20000094
 8000670:	200000f4 	.word	0x200000f4
 8000674:	40400000 	.word	0x40400000
 8000678:	200000be 	.word	0x200000be
 800067c:	200000a8 	.word	0x200000a8
 8000680:	3f1cc471 	.word	0x3f1cc471
 8000684:	20000098 	.word	0x20000098

08000688 <readPropoInputCaptureCnt>:
	inputCaptureCnt = TIM2 -> CCR1;

	return inputCaptureCnt;
}

uint16_t readPropoInputCaptureCnt(void){
 8000688:	b082      	sub	sp, #8
	// Read Input Capture Count of GPIO
	// CCR2:TIM3 Channel2 = Propo
	volatile uint16_t inputCaptureCnt;

	inputCaptureCnt = TIM8 -> CCR1;
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <readPropoInputCaptureCnt+0x20>)
 800068c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800068e:	b29b      	uxth	r3, r3
 8000690:	f8ad 3006 	strh.w	r3, [sp, #6]
	inputCaptureCnt8 = inputCaptureCnt;
 8000694:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <readPropoInputCaptureCnt+0x24>)
 800069a:	801a      	strh	r2, [r3, #0]
	return inputCaptureCnt;
 800069c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 80006a0:	b280      	uxth	r0, r0
 80006a2:	b002      	add	sp, #8
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40013400 	.word	0x40013400
 80006ac:	20000140 	.word	0x20000140

080006b0 <readPropoDuty>:

float readPropoDuty(void){
 80006b0:	b510      	push	{r4, lr}

	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;
	float preScaler;

	sPropoState_pre = sPropoState;
 80006b2:	4c2f      	ldr	r4, [pc, #188]	; (8000770 <readPropoDuty+0xc0>)
 80006b4:	7822      	ldrb	r2, [r4, #0]
 80006b6:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <readPropoDuty+0xc4>)
 80006b8:	701a      	strb	r2, [r3, #0]
	sPropoState = HAL_GPIO_ReadPin(GPIOA, Propo_Pin) & 0b00000001;
 80006ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c2:	f002 fd63 	bl	800318c <HAL_GPIO_ReadPin>
 80006c6:	f000 0001 	and.w	r0, r0, #1
 80006ca:	7020      	strb	r0, [r4, #0]

	if(sPropoState) // sPropoState = ON
 80006cc:	b138      	cbz	r0, 80006de <readPropoDuty+0x2e>
		sPropoInputCaptureCntRise = readPropoInputCaptureCnt();
 80006ce:	f7ff ffdb 	bl	8000688 <readPropoInputCaptureCnt>
 80006d2:	4b29      	ldr	r3, [pc, #164]	; (8000778 <readPropoDuty+0xc8>)
 80006d4:	8018      	strh	r0, [r3, #0]
	}

	propoDuty = sPropoDuty;
	return propoDuty;

}
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <readPropoDuty+0xcc>)
 80006d8:	ed93 0a00 	vldr	s0, [r3]
 80006dc:	bd10      	pop	{r4, pc}
		sPropoInputCaptureCntFall = readPropoInputCaptureCnt();
 80006de:	f7ff ffd3 	bl	8000688 <readPropoInputCaptureCnt>
 80006e2:	4b27      	ldr	r3, [pc, #156]	; (8000780 <readPropoDuty+0xd0>)
 80006e4:	8018      	strh	r0, [r3, #0]
		if(sPropoState == 0 && sPropoState_pre == 1)
 80006e6:	4b22      	ldr	r3, [pc, #136]	; (8000770 <readPropoDuty+0xc0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1f3      	bne.n	80006d6 <readPropoDuty+0x26>
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <readPropoDuty+0xc4>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d1ef      	bne.n	80006d6 <readPropoDuty+0x26>
			inputCaptureCntMax = TIM8 -> ARR;
 80006f6:	4923      	ldr	r1, [pc, #140]	; (8000784 <readPropoDuty+0xd4>)
 80006f8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
			inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 80006fa:	1c53      	adds	r3, r2, #1
 80006fc:	085b      	lsrs	r3, r3, #1
			preScaler = (float)(TIM8 -> PSC);
 80006fe:	6a89      	ldr	r1, [r1, #40]	; 0x28
			propoInputCaptureCntDiff = (float)sPropoInputCaptureCntFall - (float)sPropoInputCaptureCntRise;
 8000700:	ee07 0a90 	vmov	s15, r0
 8000704:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000708:	491b      	ldr	r1, [pc, #108]	; (8000778 <readPropoDuty+0xc8>)
 800070a:	8809      	ldrh	r1, [r1, #0]
 800070c:	ee07 1a90 	vmov	s15, r1
 8000710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000718:	491b      	ldr	r1, [pc, #108]	; (8000788 <readPropoDuty+0xd8>)
 800071a:	edc1 7a00 	vstr	s15, [r1]
			if( propoInputCaptureCntDiff < - (float)inputCaptureCntHalf)
 800071e:	ee07 3a10 	vmov	s14, r3
 8000722:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000726:	eeb1 7a47 	vneg.f32	s14, s14
 800072a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800072e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000732:	d507      	bpl.n	8000744 <readPropoDuty+0x94>
				propoInputCaptureCntDiff += (float)inputCaptureCntMax;
 8000734:	ee07 2a10 	vmov	s14, r2
 8000738:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800073c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000740:	edc1 7a00 	vstr	s15, [r1]
			sPropoDuty = (propoInputCaptureCntDiff - 1489.0f) * 0.0027f;
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <readPropoDuty+0xd8>)
 8000746:	edd3 7a00 	vldr	s15, [r3]
 800074a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800078c <readPropoDuty+0xdc>
 800074e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000752:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000790 <readPropoDuty+0xe0>
 8000756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <readPropoDuty+0xcc>)
 800075c:	edc3 7a00 	vstr	s15, [r3]
			if(sPropoDuty < 0.0f) sPropoDuty = 0.0f;
 8000760:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000768:	d5b5      	bpl.n	80006d6 <readPropoDuty+0x26>
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	e7b2      	b.n	80006d6 <readPropoDuty+0x26>
 8000770:	20000150 	.word	0x20000150
 8000774:	20000151 	.word	0x20000151
 8000778:	2000014e 	.word	0x2000014e
 800077c:	20000148 	.word	0x20000148
 8000780:	2000014c 	.word	0x2000014c
 8000784:	40013400 	.word	0x40013400
 8000788:	20000144 	.word	0x20000144
 800078c:	44ba2000 	.word	0x44ba2000
 8000790:	3b30f27c 	.word	0x3b30f27c

08000794 <readCurrent>:
	uint16_t Vdc_ad = gAdcValue[0];
	Vdc = Vdc_ad * AD2VOLTAGE;
	return Vdc;
}

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw_AD_Offset, float* Iuvw){
 8000794:	b410      	push	{r4}
	Iuvw_AD[0] = ADC1 -> JDR2; // Iu
 8000796:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
 800079a:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 800079e:	b29b      	uxth	r3, r3
 80007a0:	8003      	strh	r3, [r0, #0]
	Iuvw_AD[1] = ADC1 -> JDR3; // Iv
 80007a2:	f8dc 4088 	ldr.w	r4, [ip, #136]	; 0x88
 80007a6:	8044      	strh	r4, [r0, #2]
	Iuvw_AD[2] = ADC1 -> JDR4; // Iw
 80007a8:	f8dc 408c 	ldr.w	r4, [ip, #140]	; 0x8c
 80007ac:	8084      	strh	r4, [r0, #4]

	Iuvw[0] = ((float)Iuvw_AD[0] - Iuvw_AD_Offset[0]) * AD2CURRENT;
 80007ae:	ee07 3a90 	vmov	s15, r3
 80007b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007b6:	ed91 7a00 	vldr	s14, [r1]
 80007ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80007be:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000804 <readCurrent+0x70>
 80007c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80007c6:	edc2 7a00 	vstr	s15, [r2]
	Iuvw[1] = ((float)Iuvw_AD[1] - Iuvw_AD_Offset[1]) * AD2CURRENT;
 80007ca:	8843      	ldrh	r3, [r0, #2]
 80007cc:	ee07 3a10 	vmov	s14, r3
 80007d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80007d4:	edd1 7a01 	vldr	s15, [r1, #4]
 80007d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80007e0:	ed82 7a01 	vstr	s14, [r2, #4]
	Iuvw[2] = ((float)Iuvw_AD[2] - Iuvw_AD_Offset[2]) * AD2CURRENT;
 80007e4:	8883      	ldrh	r3, [r0, #4]
 80007e6:	ee07 3a90 	vmov	s15, r3
 80007ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007ee:	ed91 7a02 	vldr	s14, [r1, #8]
 80007f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80007f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80007fa:	edc2 7a02 	vstr	s15, [r2, #8]
}
 80007fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	3daf5c29 	.word	0x3daf5c29

08000808 <writeOutputMode>:
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
}
*/

void writeOutputMode(int8_t outputMode){
 8000808:	b510      	push	{r4, lr}

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode == OUTPUTMODE_RESET )
 800080a:	b958      	cbnz	r0, 8000824 <writeOutputMode+0x1c>
	{
		HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 800080c:	4c0b      	ldr	r4, [pc, #44]	; (800083c <writeOutputMode+0x34>)
 800080e:	2200      	movs	r2, #0
 8000810:	2102      	movs	r1, #2
 8000812:	4620      	mov	r0, r4
 8000814:	f002 fcc1 	bl	800319a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PWM_EN_GPIO_Port, PWM_EN_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2104      	movs	r1, #4
 800081c:	4620      	mov	r0, r4
 800081e:	f002 fcbc 	bl	800319a <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(PWM_EN_GPIO_Port, PWM_EN_Pin, GPIO_PIN_SET);
	}

}
 8000822:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 8000824:	4c05      	ldr	r4, [pc, #20]	; (800083c <writeOutputMode+0x34>)
 8000826:	2201      	movs	r2, #1
 8000828:	2102      	movs	r1, #2
 800082a:	4620      	mov	r0, r4
 800082c:	f002 fcb5 	bl	800319a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PWM_EN_GPIO_Port, PWM_EN_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2104      	movs	r1, #4
 8000834:	4620      	mov	r0, r4
 8000836:	f002 fcb0 	bl	800319a <HAL_GPIO_WritePin>
}
 800083a:	e7f2      	b.n	8000822 <writeOutputMode+0x1a>
 800083c:	48000400 	.word	0x48000400

08000840 <writeDuty>:


void writeDuty(float* Duty){
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[2] * (TIM1 -> ARR);
 8000840:	ed90 7a02 	vldr	s14, [r0, #8]
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <writeDuty+0x4c>)
 8000846:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800084a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800084e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000856:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 800085a:	ed90 7a01 	vldr	s14, [r0, #4]
 800085e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800086a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800086e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[0] * (TIM1 -> ARR);
 8000872:	ed90 7a00 	vldr	s14, [r0]
 8000876:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800087a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800087e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000886:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

}
 800088a:	4770      	bx	lr
 800088c:	40012c00 	.word	0x40012c00

08000890 <calcVoltageMode>:

	uint8_t hallInput;
	uint8_t voltageMode = 0;

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 8000890:	7883      	ldrb	r3, [r0, #2]
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	b2db      	uxtb	r3, r3
 8000896:	7842      	ldrb	r2, [r0, #1]
 8000898:	0052      	lsls	r2, r2, #1
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	4413      	add	r3, r2
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	7800      	ldrb	r0, [r0, #0]
 80008a2:	4418      	add	r0, r3
 80008a4:	b2c0      	uxtb	r0, r0

	// Decode digital signal to voltage mode
	switch(hallInput){
 80008a6:	1e43      	subs	r3, r0, #1
 80008a8:	2b05      	cmp	r3, #5
 80008aa:	d80c      	bhi.n	80008c6 <calcVoltageMode+0x36>
 80008ac:	e8df f003 	tbb	[pc, r3]
 80008b0:	050e0d09 	.word	0x050e0d09
 80008b4:	0307      	.short	0x0307
		break;
	  case 2:
		voltageMode = 4;
		break;
	  case 6:
		voltageMode = 5;
 80008b6:	2005      	movs	r0, #5
		break;
 80008b8:	4770      	bx	lr
	  case 4:
		voltageMode = 6;
 80008ba:	2006      	movs	r0, #6
		break;
 80008bc:	4770      	bx	lr
	  case 5:
		voltageMode = 1;
 80008be:	2001      	movs	r0, #1
		break;
 80008c0:	4770      	bx	lr
	  case 1:
		voltageMode = 2;
 80008c2:	2002      	movs	r0, #2
		break;
 80008c4:	4770      	bx	lr
	  default :
		voltageMode = 0;
 80008c6:	2000      	movs	r0, #0
	  break;
 80008c8:	4770      	bx	lr
		voltageMode = 4;
 80008ca:	2004      	movs	r0, #4
	}

	return voltageMode;
}
 80008cc:	4770      	bx	lr
	...

080008d0 <calcElectAngle>:
void calcElectAngle(uint8_t* hall, float electFreq, uint8_t flgPLL, float* electAngle, float* electAngVelo){
 80008d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008d4:	ed2d 8b04 	vpush	{d8-d9}
 80008d8:	4680      	mov	r8, r0
 80008da:	eef0 8a40 	vmov.f32	s17, s0
 80008de:	460d      	mov	r5, r1
 80008e0:	4617      	mov	r7, r2
 80008e2:	461e      	mov	r6, r3
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 80008e4:	4c5e      	ldr	r4, [pc, #376]	; (8000a60 <calcElectAngle+0x190>)
 80008e6:	ed94 0a00 	vldr	s0, [r4]
	wc_PLL = gUpperLowerLimit(wc_PLL, 500.0f, 0.0f);
 80008ea:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8000a64 <calcElectAngle+0x194>
 80008ee:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8000a68 <calcElectAngle+0x198>
 80008f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80008f6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80008fa:	f7ff fcdd 	bl	80002b8 <gUpperLowerLimit>
 80008fe:	eeb0 9a40 	vmov.f32	s18, s0
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 8000902:	ed94 7a00 	vldr	s14, [r4]
 8000906:	eddf 7a59 	vldr	s15, [pc, #356]	; 8000a6c <calcElectAngle+0x19c>
 800090a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800090e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8000912:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000916:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800091a:	ee87 8a87 	vdiv.f32	s16, s15, s14
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 800091e:	eddf 7a54 	vldr	s15, [pc, #336]	; 8000a70 <calcElectAngle+0x1a0>
 8000922:	ee60 7a27 	vmul.f32	s15, s0, s15
 8000926:	ee67 7a80 	vmul.f32	s15, s15, s0
 800092a:	ee27 8a88 	vmul.f32	s16, s15, s16
	sVoltageMode_pre = sVoltageMode;
 800092e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8000aa8 <calcElectAngle+0x1d8>
 8000932:	f899 4000 	ldrb.w	r4, [r9]
 8000936:	4b4f      	ldr	r3, [pc, #316]	; (8000a74 <calcElectAngle+0x1a4>)
 8000938:	701c      	strb	r4, [r3, #0]
	sVoltageMode = calcVoltageMode(hall);
 800093a:	4640      	mov	r0, r8
 800093c:	f7ff ffa8 	bl	8000890 <calcVoltageMode>
 8000940:	f889 0000 	strb.w	r0, [r9]
	sElectAngleActual_pre = sElectAngleActual;
 8000944:	4b4c      	ldr	r3, [pc, #304]	; (8000a78 <calcElectAngle+0x1a8>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <calcElectAngle+0x1ac>)
 800094a:	601a      	str	r2, [r3, #0]

static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 800094c:	1b04      	subs	r4, r0, r4
 800094e:	b2e3      	uxtb	r3, r4
 8000950:	b264      	sxtb	r4, r4

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 8000952:	2c01      	cmp	r4, #1
 8000954:	dd3f      	ble.n	80009d6 <calcElectAngle+0x106>
		voltageMode_Diff -= 6;
 8000956:	3b06      	subs	r3, #6
 8000958:	b25c      	sxtb	r4, r3
	else if(voltageMode_Diff < -1)
		voltageMode_Diff += 6;

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 800095a:	b10c      	cbz	r4, 8000960 <calcElectAngle+0x90>
		*rotDir = voltageMode_Diff;
 800095c:	4b48      	ldr	r3, [pc, #288]	; (8000a80 <calcElectAngle+0x1b0>)
 800095e:	701c      	strb	r4, [r3, #0]
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8000960:	4b47      	ldr	r3, [pc, #284]	; (8000a80 <calcElectAngle+0x1b0>)
 8000962:	f993 3000 	ldrsb.w	r3, [r3]
 8000966:	ee07 3a10 	vmov	s14, r3
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		electAngle_Center = ( (float)voltageMode - 3.0f ) * PIDIV3;
 800096a:	ee07 0a90 	vmov	s15, r0
 800096e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000972:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8000976:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800097a:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8000a84 <calcElectAngle+0x1b4>
 800097e:	ee67 7a80 	vmul.f32	s15, s15, s0

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 8000982:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000986:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8000a88 <calcElectAngle+0x1b8>
 800098a:	ee27 7a00 	vmul.f32	s14, s14, s0
 800098e:	ee37 0ac7 	vsub.f32	s0, s15, s14
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 8000992:	4c39      	ldr	r4, [pc, #228]	; (8000a78 <calcElectAngle+0x1a8>)
 8000994:	ed84 0a00 	vstr	s0, [r4]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 8000998:	f7ff fc6a 	bl	8000270 <gfWrapTheta>
 800099c:	ed84 0a00 	vstr	s0, [r4]
	sFlgPLL_pre = sFlgPLL;
 80009a0:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <calcElectAngle+0x1bc>)
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	493a      	ldr	r1, [pc, #232]	; (8000a90 <calcElectAngle+0x1c0>)
 80009a6:	700a      	strb	r2, [r1, #0]
	sFlgPLL = flgPLL;
 80009a8:	701d      	strb	r5, [r3, #0]
	if(flgPLL == 1){
 80009aa:	2d01      	cmp	r5, #1
 80009ac:	d019      	beq.n	80009e2 <calcElectAngle+0x112>
		sElectAngleEstimate = sElectAngleActual;
 80009ae:	4b39      	ldr	r3, [pc, #228]	; (8000a94 <calcElectAngle+0x1c4>)
 80009b0:	ed83 0a00 	vstr	s0, [r3]
		sElectAngVeloEstimate = electFreq * TWOPI;
 80009b4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8000a98 <calcElectAngle+0x1c8>
 80009b8:	ee68 8a80 	vmul.f32	s17, s17, s0
 80009bc:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <calcElectAngle+0x190>)
 80009be:	edc3 8a00 	vstr	s17, [r3]
	*electAngle = sElectAngleEstimate;
 80009c2:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <calcElectAngle+0x1c4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	603b      	str	r3, [r7, #0]
	*electAngVelo = sElectAngVeloEstimate;
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <calcElectAngle+0x190>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6033      	str	r3, [r6, #0]
}
 80009ce:	ecbd 8b04 	vpop	{d8-d9}
 80009d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if(voltageMode_Diff < -1)
 80009d6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80009da:	dabe      	bge.n	800095a <calcElectAngle+0x8a>
		voltageMode_Diff += 6;
 80009dc:	3306      	adds	r3, #6
 80009de:	b25c      	sxtb	r4, r3
 80009e0:	e7bb      	b.n	800095a <calcElectAngle+0x8a>
		if ( sFlgPLL_pre == 0 ){
 80009e2:	b962      	cbnz	r2, 80009fe <calcElectAngle+0x12e>
			sElectAngVeloEstimate = electFreq * TWOPI;
 80009e4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8000a98 <calcElectAngle+0x1c8>
 80009e8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <calcElectAngle+0x190>)
 80009ee:	edc3 8a00 	vstr	s17, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <calcElectAngle+0x1cc>)
 80009f4:	edc3 8a00 	vstr	s17, [r3]
			sElectAngleEstimate = sElectAngleActual;
 80009f8:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <calcElectAngle+0x1c4>)
 80009fa:	ed83 0a00 	vstr	s0, [r3]
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <calcElectAngle+0x190>)
 8000a00:	ed93 7a00 	vldr	s14, [r3]
 8000a04:	eddf 7a26 	vldr	s15, [pc, #152]	; 8000aa0 <calcElectAngle+0x1d0>
 8000a08:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8000a0c:	4c21      	ldr	r4, [pc, #132]	; (8000a94 <calcElectAngle+0x1c4>)
 8000a0e:	edd4 7a00 	vldr	s15, [r4]
 8000a12:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000a16:	ed84 0a00 	vstr	s0, [r4]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 8000a1a:	f7ff fc29 	bl	8000270 <gfWrapTheta>
 8000a1e:	ed84 0a00 	vstr	s0, [r4]
		if( sElectAngleActual != sElectAngleActual_pre){
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <calcElectAngle+0x1a8>)
 8000a24:	edd3 7a00 	vldr	s15, [r3]
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <calcElectAngle+0x1ac>)
 8000a2a:	ed93 7a00 	vldr	s14, [r3]
 8000a2e:	eef4 7a47 	vcmp.f32	s15, s14
 8000a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a36:	d0c4      	beq.n	80009c2 <calcElectAngle+0xf2>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 8000a38:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8000a3c:	4c19      	ldr	r4, [pc, #100]	; (8000aa4 <calcElectAngle+0x1d4>)
 8000a3e:	ed84 0a00 	vstr	s0, [r4]
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8000a42:	f7ff fc15 	bl	8000270 <gfWrapTheta>
 8000a46:	ed84 0a00 	vstr	s0, [r4]
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 8000a4a:	4814      	ldr	r0, [pc, #80]	; (8000a9c <calcElectAngle+0x1cc>)
 8000a4c:	eeb0 1a48 	vmov.f32	s2, s16
 8000a50:	eef0 0a49 	vmov.f32	s1, s18
 8000a54:	f7ff fbe0 	bl	8000218 <cfPhaseLockedLoop>
 8000a58:	4b01      	ldr	r3, [pc, #4]	; (8000a60 <calcElectAngle+0x190>)
 8000a5a:	ed83 0a00 	vstr	s0, [r3]
 8000a5e:	e7b0      	b.n	80009c2 <calcElectAngle+0xf2>
 8000a60:	20000154 	.word	0x20000154
 8000a64:	00000000 	.word	0x00000000
 8000a68:	43fa0000 	.word	0x43fa0000
 8000a6c:	3e22f983 	.word	0x3e22f983
 8000a70:	3e4ccccd 	.word	0x3e4ccccd
 8000a74:	20000172 	.word	0x20000172
 8000a78:	20000158 	.word	0x20000158
 8000a7c:	2000015c 	.word	0x2000015c
 8000a80:	20000170 	.word	0x20000170
 8000a84:	3f860a92 	.word	0x3f860a92
 8000a88:	3f060a92 	.word	0x3f060a92
 8000a8c:	20000168 	.word	0x20000168
 8000a90:	20000169 	.word	0x20000169
 8000a94:	20000164 	.word	0x20000164
 8000a98:	40c90fdb 	.word	0x40c90fdb
 8000a9c:	2000016c 	.word	0x2000016c
 8000aa0:	463b8000 	.word	0x463b8000
 8000aa4:	20000160 	.word	0x20000160
 8000aa8:	20000171 	.word	0x20000171

08000aac <VectorControlTasks>:
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo);

void VectorControlTasks(struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8000aac:	b084      	sub	sp, #16
 8000aae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab0:	ed2d 8b06 	vpush	{d8-d10}
 8000ab4:	b09d      	sub	sp, #116	; 0x74
 8000ab6:	ac28      	add	r4, sp, #160	; 0xa0
 8000ab8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000abc:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 8000abe:	9d36      	ldr	r5, [sp, #216]	; 0xd8

	*outputMode = OUTPUTMODE_SET;
 8000ac0:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
}

static inline void uvw2ab(float* uvw, float* ab){
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 8000ac6:	eddd 7a2a 	vldr	s15, [sp, #168]	; 0xa8
 8000aca:	ed9d 6a2b 	vldr	s12, [sp, #172]	; 0xac
 8000ace:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ad2:	ee26 8a07 	vmul.f32	s16, s12, s14
 8000ad6:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8000ada:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 8000ade:	ee26 7a87 	vmul.f32	s14, s13, s14
 8000ae2:	ee38 8a47 	vsub.f32	s16, s16, s14
 8000ae6:	eddf 8aea 	vldr	s17, [pc, #936]	; 8000e90 <VectorControlTasks+0x3e4>
 8000aea:	ee28 8a28 	vmul.f32	s16, s16, s17
 8000aee:	4ee9      	ldr	r6, [pc, #932]	; (8000e94 <VectorControlTasks+0x3e8>)
 8000af0:	ed86 8a00 	vstr	s16, [r6]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV2 * uvw[1] - SQRT3_DIV2 * uvw[2] );
 8000af4:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 8000e98 <VectorControlTasks+0x3ec>
 8000af8:	ee26 9a07 	vmul.f32	s18, s12, s14
 8000afc:	ee26 7a87 	vmul.f32	s14, s13, s14
 8000b00:	ee39 9a47 	vsub.f32	s18, s18, s14
 8000b04:	ee29 9a28 	vmul.f32	s18, s18, s17
 8000b08:	ed86 9a01 	vstr	s18, [r6, #4]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 8000b0c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000b14:	ed9f 7ae1 	vldr	s14, [pc, #900]	; 8000e9c <VectorControlTasks+0x3f0>
 8000b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b1c:	edc6 7a02 	vstr	s15, [r6, #8]
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8000b20:	ed9d aa28 	vldr	s20, [sp, #160]	; 0xa0
}

static inline void ab2dq(float theta, float* ab, float* dq){
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8000b24:	eeb0 0a4a 	vmov.f32	s0, s20
 8000b28:	f004 f850 	bl	8004bcc <sinf>
 8000b2c:	eef0 9a40 	vmov.f32	s19, s0
	cosTheta = cosf(theta);
 8000b30:	eeb0 0a4a 	vmov.f32	s0, s20
 8000b34:	f004 f806 	bl	8004b44 <cosf>
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8000b38:	ee20 8a08 	vmul.f32	s16, s0, s16
 8000b3c:	ee29 9a89 	vmul.f32	s18, s19, s18
 8000b40:	ee38 9a09 	vadd.f32	s18, s16, s18
 8000b44:	ed84 9a04 	vstr	s18, [r4, #16]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8000b48:	edd6 7a00 	vldr	s15, [r6]
 8000b4c:	ee67 7ae9 	vnmul.f32	s15, s15, s19
 8000b50:	ed96 7a01 	vldr	s14, [r6, #4]
 8000b54:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000b58:	ee37 0a80 	vadd.f32	s0, s15, s0
 8000b5c:	ed84 0a05 	vstr	s0, [r4, #20]
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 8000b60:	ed9f 9acf 	vldr	s18, [pc, #828]	; 8000ea0 <VectorControlTasks+0x3f4>
 8000b64:	ed9f 8acf 	vldr	s16, [pc, #828]	; 8000ea4 <VectorControlTasks+0x3f8>
 8000b68:	f104 0018 	add.w	r0, r4, #24
 8000b6c:	eeb0 1a49 	vmov.f32	s2, s18
 8000b70:	eef0 0a48 	vmov.f32	s1, s16
 8000b74:	ed94 0a04 	vldr	s0, [r4, #16]
 8000b78:	f7ff fbb8 	bl	80002ec <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 8000b7c:	f104 001c 	add.w	r0, r4, #28
 8000b80:	eeb0 1a49 	vmov.f32	s2, s18
 8000b84:	eef0 0a48 	vmov.f32	s1, s16
 8000b88:	ed94 0a05 	vldr	s0, [r4, #20]
 8000b8c:	f7ff fbae 	bl	80002ec <gLPF>
	CurrentFbControl(sensData, vectorControlData);
 8000b90:	f10d 0c08 	add.w	ip, sp, #8
 8000b94:	f10d 0ea0 	add.w	lr, sp, #160	; 0xa0
 8000b98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000b9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000ba0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000ba4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000ba8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000bac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000bb0:	f8de 3000 	ldr.w	r3, [lr]
 8000bb4:	f8cc 3000 	str.w	r3, [ip]

	Kp = La * wc;//La * wc;//2 * wc - Ra/La;
	Kig = Ra * wc * CARRIERCYCLE;//La * wc * wc * CARRIERCYCLE;
	Kid = Kig;

	Ierr[0] = vectorControlData->Idq_ref_LPF[0] - vectorControlData->Idq[0];
 8000bb8:	ed94 7a02 	vldr	s14, [r4, #8]
 8000bbc:	ed94 6a04 	vldr	s12, [r4, #16]
 8000bc0:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000bc4:	ed8d 7a00 	vstr	s14, [sp]
	Ierr[1] = vectorControlData->Idq_ref_LPF[1] - vectorControlData->Idq[1];
 8000bc8:	edd4 7a03 	vldr	s15, [r4, #12]
 8000bcc:	edd4 0a05 	vldr	s1, [r4, #20]
 8000bd0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8000bd4:	edcd 7a01 	vstr	s15, [sp, #4]

	vectorControlData->Vdq_p[0] = Kp * Ierr[0];
 8000bd8:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8000ea8 <VectorControlTasks+0x3fc>
 8000bdc:	ee27 5a26 	vmul.f32	s10, s14, s13
 8000be0:	ed84 5a0a 	vstr	s10, [r4, #40]	; 0x28
	vectorControlData->Vdq_p[1] = Kp * Ierr[1];
 8000be4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000be8:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c

	vectorControlData->Vdq_i[0] += Kig * Ierr[0];
 8000bec:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8000eac <VectorControlTasks+0x400>
 8000bf0:	ee27 7a00 	vmul.f32	s14, s14, s0
 8000bf4:	edd4 5a0c 	vldr	s11, [r4, #48]	; 0x30
 8000bf8:	ee37 7a25 	vadd.f32	s14, s14, s11
 8000bfc:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
	vectorControlData->Vdq_i[1] += Kid * Ierr[1];
 8000c00:	ee67 7a80 	vmul.f32	s15, s15, s0
 8000c04:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8000c08:	ee77 7a80 	vadd.f32	s15, s15, s0
 8000c0c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34

	calcVdqFeedForword(sensData, vectorControlData);
 8000c10:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8000c14:	f10d 0e08 	add.w	lr, sp, #8
 8000c18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000c1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000c20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000c24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000c28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000c2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000c30:	f8de 3000 	ldr.w	r3, [lr]
 8000c34:	f8cc 3000 	str.w	r3, [ip]
	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0] + vectorControlData->Vdq_FF[0];
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1] + vectorControlData->Vdq_FF[1];
}

static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData){
	vectorControlData->Vdq_FF[0] = -1.0f *sensData.electAngVelo * La * vectorControlData->Idq[1];
 8000c38:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
 8000c3c:	eddf 5a9c 	vldr	s11, [pc, #624]	; 8000eb0 <VectorControlTasks+0x404>
 8000c40:	ee60 5a65 	vnmul.f32	s11, s0, s11
 8000c44:	eddf 4a9b 	vldr	s9, [pc, #620]	; 8000eb4 <VectorControlTasks+0x408>
 8000c48:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8000c4c:	ee60 0aa5 	vmul.f32	s1, s1, s11
 8000c50:	edc4 0a0e 	vstr	s1, [r4, #56]	; 0x38
	vectorControlData->Vdq_FF[1] = sensData.electAngVelo * ( Ke + La * vectorControlData->Idq[0]);
 8000c54:	eddf 5a98 	vldr	s11, [pc, #608]	; 8000eb8 <VectorControlTasks+0x40c>
 8000c58:	ee26 6a25 	vmul.f32	s12, s12, s11
 8000c5c:	eddf 5a97 	vldr	s11, [pc, #604]	; 8000ebc <VectorControlTasks+0x410>
 8000c60:	ee36 6a25 	vadd.f32	s12, s12, s11
 8000c64:	ee20 0a06 	vmul.f32	s0, s0, s12
 8000c68:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0] + vectorControlData->Vdq_FF[0];
 8000c6c:	ee35 7a07 	vadd.f32	s14, s10, s14
 8000c70:	ee70 0a87 	vadd.f32	s1, s1, s14
 8000c74:	edc4 0a08 	vstr	s1, [r4, #32]
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1] + vectorControlData->Vdq_FF[1];
 8000c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000c7c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000c80:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 8000c84:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8000c88:	f10d 0ea0 	add.w	lr, sp, #160	; 0xa0
 8000c8c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000c90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000c94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000c98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000c9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000ca0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000ca4:	f8de 3000 	ldr.w	r3, [lr]
 8000ca8:	f8cc 3000 	str.w	r3, [ip]
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 8000cac:	f003 ffd4 	bl	8004c58 <atan2f>
 8000cb0:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8000cb4:	ed94 0a08 	vldr	s0, [r4, #32]
 8000cb8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000cbc:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8000cc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
	amp = sqrtf(sumOfSquares);
 8000cc4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000cc8:	f003 ffe8 	bl	8004c9c <sqrtf>
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 8000ccc:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8000cd0:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8000cd4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000cd8:	ee60 8a28 	vmul.f32	s17, s0, s17
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8000cdc:	edc4 8a12 	vstr	s17, [r4, #72]	; 0x48
	limitVoltVectAmp(sensData, vectorControlData);
 8000ce0:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8000ce4:	f10d 0ea0 	add.w	lr, sp, #160	; 0xa0
 8000ce8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000cec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000cf0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000cf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000cf8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000cfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d00:	f8de 3000 	ldr.w	r3, [lr]
 8000d04:	f8cc 3000 	str.w	r3, [ip]
	if( vectorControlData->Mod > MODLIMIT ){
 8000d08:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8000ec0 <VectorControlTasks+0x414>
 8000d0c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8000d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d14:	dd31      	ble.n	8000d7a <VectorControlTasks+0x2ce>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 8000d16:	ed9d 8a19 	vldr	s16, [sp, #100]	; 0x64
 8000d1a:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8000ec4 <VectorControlTasks+0x418>
 8000d1e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000d22:	eddf 8a67 	vldr	s17, [pc, #412]	; 8000ec0 <VectorControlTasks+0x414>
 8000d26:	ee28 8a28 	vmul.f32	s16, s16, s17
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 8000d2a:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 8000d2e:	eeb0 0a49 	vmov.f32	s0, s18
 8000d32:	f003 ff07 	bl	8004b44 <cosf>
 8000d36:	ee28 0a00 	vmul.f32	s0, s16, s0
 8000d3a:	ed84 0a08 	vstr	s0, [r4, #32]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_p[0] - vectorControlData->Vdq_FF[0];
 8000d3e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8000d42:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000d46:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8000d4a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000d4e:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 8000d52:	eeb0 0a49 	vmov.f32	s0, s18
 8000d56:	f003 ff39 	bl	8004bcc <sinf>
 8000d5a:	ee28 8a00 	vmul.f32	s16, s16, s0
 8000d5e:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
 8000d62:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8000d66:	ee38 8a40 	vsub.f32	s16, s16, s0
 8000d6a:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8000d6e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8000d72:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
		vectorControlData->Mod = MODLIMIT;
 8000d76:	edc4 8a12 	vstr	s17, [r4, #72]	; 0x48
	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8000d7a:	eddd 8a28 	vldr	s17, [sp, #160]	; 0xa0
	sinTheta = sinf(theta);
 8000d7e:	eeb0 0a68 	vmov.f32	s0, s17
 8000d82:	f003 ff23 	bl	8004bcc <sinf>
 8000d86:	eeb0 8a40 	vmov.f32	s16, s0
	cosTheta = cosf(theta);
 8000d8a:	eeb0 0a68 	vmov.f32	s0, s17
 8000d8e:	f003 fed9 	bl	8004b44 <cosf>
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8000d92:	edd4 7a08 	vldr	s15, [r4, #32]
 8000d96:	ee60 7a27 	vmul.f32	s15, s0, s15
 8000d9a:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8000d9e:	ee68 6a07 	vmul.f32	s13, s16, s14
 8000da2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000da6:	4b48      	ldr	r3, [pc, #288]	; (8000ec8 <VectorControlTasks+0x41c>)
 8000da8:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8000dac:	edd4 6a08 	vldr	s13, [r4, #32]
 8000db0:	ee28 8a26 	vmul.f32	s16, s16, s13
 8000db4:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000db8:	ee38 8a00 	vadd.f32	s16, s16, s0
 8000dbc:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8000dc0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000e90 <VectorControlTasks+0x3e4>
 8000dc4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8000dc8:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <VectorControlTasks+0x420>)
 8000dca:	ed83 0a00 	vstr	s0, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV2 * ab[1] );
 8000dce:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8000dd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000dd6:	eddf 6a30 	vldr	s13, [pc, #192]	; 8000e98 <VectorControlTasks+0x3ec>
 8000dda:	ee28 8a26 	vmul.f32	s16, s16, s13
 8000dde:	ee77 7a88 	vadd.f32	s15, s15, s16
 8000de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de6:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 8000dea:	eeb1 7a40 	vneg.f32	s14, s0
 8000dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000df2:	edc3 7a02 	vstr	s15, [r3, #8]
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 8000df6:	eddd 7a34 	vldr	s15, [sp, #208]	; 0xd0
	Duty[0] = (Vuvw[0] * twoDivVdc);
 8000dfa:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000dfe:	ed85 0a00 	vstr	s0, [r5]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8000e02:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e0a:	ed85 7a01 	vstr	s14, [r5, #4]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8000e0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e16:	edc5 7a02 	vstr	s15, [r5, #8]
	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8000e1a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000e1e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000e22:	f7ff fa49 	bl	80002b8 <gUpperLowerLimit>
 8000e26:	ed85 0a00 	vstr	s0, [r5]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8000e2a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000e2e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000e32:	ed95 0a01 	vldr	s0, [r5, #4]
 8000e36:	f7ff fa3f 	bl	80002b8 <gUpperLowerLimit>
 8000e3a:	ed85 0a01 	vstr	s0, [r5, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8000e3e:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000e42:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000e46:	ed95 0a02 	vldr	s0, [r5, #8]
 8000e4a:	f7ff fa35 	bl	80002b8 <gUpperLowerLimit>
 8000e4e:	ed85 0a02 	vstr	s0, [r5, #8]
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8000e52:	ed95 7a00 	vldr	s14, [r5]
 8000e56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8000e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e62:	ed85 7a00 	vstr	s14, [r5]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8000e66:	ed95 7a01 	vldr	s14, [r5, #4]
 8000e6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e72:	ed85 7a01 	vstr	s14, [r5, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8000e76:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000e7a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000e7e:	ed85 0a02 	vstr	s0, [r5, #8]
}
 8000e82:	b01d      	add	sp, #116	; 0x74
 8000e84:	ecbd 8b06 	vpop	{d8-d10}
 8000e88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000e8c:	b004      	add	sp, #16
 8000e8e:	4770      	bx	lr
 8000e90:	3f5105ec 	.word	0x3f5105ec
 8000e94:	20000174 	.word	0x20000174
 8000e98:	3f5db3d7 	.word	0x3f5db3d7
 8000e9c:	3f13cd3a 	.word	0x3f13cd3a
 8000ea0:	38aec33e 	.word	0x38aec33e
 8000ea4:	42fb3333 	.word	0x42fb3333
 8000ea8:	3c45a6e4 	.word	0x3c45a6e4
 8000eac:	3ba4b5be 	.word	0x3ba4b5be
 8000eb0:	39fba882 	.word	0x39fba882
 8000eb4:	3ecccccd 	.word	0x3ecccccd
 8000eb8:	3949539b 	.word	0x3949539b
 8000ebc:	3a870111 	.word	0x3a870111
 8000ec0:	3f933333 	.word	0x3f933333
 8000ec4:	3f1cc471 	.word	0x3f1cc471
 8000ec8:	20000180 	.word	0x20000180
 8000ecc:	20000188 	.word	0x20000188

08000ed0 <OpenLoopTasks>:
void OpenLoopTasks(float VamRef, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed4:	ed2d 8b06 	vpush	{d8-d10}
 8000ed8:	b08f      	sub	sp, #60	; 0x3c
 8000eda:	eef0 9a40 	vmov.f32	s19, s0
 8000ede:	ac1a      	add	r4, sp, #104	; 0x68
 8000ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ee4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8000ee6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
	*outputMode = OUTPUTMODE_SET;
 8000ee8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 8000eee:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8000ef2:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 8000ef6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000efa:	ee26 8a07 	vmul.f32	s16, s12, s14
 8000efe:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8000f02:	eddd 6a1e 	vldr	s13, [sp, #120]	; 0x78
 8000f06:	ee26 7a87 	vmul.f32	s14, s13, s14
 8000f0a:	ee38 8a47 	vsub.f32	s16, s16, s14
 8000f0e:	ed9f 9ab2 	vldr	s18, [pc, #712]	; 80011d8 <OpenLoopTasks+0x308>
 8000f12:	ee28 8a09 	vmul.f32	s16, s16, s18
 8000f16:	4eb1      	ldr	r6, [pc, #708]	; (80011dc <OpenLoopTasks+0x30c>)
 8000f18:	ed86 8a00 	vstr	s16, [r6]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV2 * uvw[1] - SQRT3_DIV2 * uvw[2] );
 8000f1c:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80011e0 <OpenLoopTasks+0x310>
 8000f20:	ee66 8a07 	vmul.f32	s17, s12, s14
 8000f24:	ee26 7a87 	vmul.f32	s14, s13, s14
 8000f28:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8000f2c:	ee67 8a09 	vmul.f32	s17, s14, s18
 8000f30:	edc6 8a01 	vstr	s17, [r6, #4]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 8000f34:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000f3c:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80011e4 <OpenLoopTasks+0x314>
 8000f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f44:	edc6 7a02 	vstr	s15, [r6, #8]
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8000f48:	eddd aa1a 	vldr	s21, [sp, #104]	; 0x68
	sinTheta = sinf(theta);
 8000f4c:	eeb0 0a6a 	vmov.f32	s0, s21
 8000f50:	f003 fe3c 	bl	8004bcc <sinf>
 8000f54:	eeb0 aa40 	vmov.f32	s20, s0
	cosTheta = cosf(theta);
 8000f58:	eeb0 0a6a 	vmov.f32	s0, s21
 8000f5c:	f003 fdf2 	bl	8004b44 <cosf>
 8000f60:	eef0 7a40 	vmov.f32	s15, s0
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8000f64:	ee20 8a08 	vmul.f32	s16, s0, s16
 8000f68:	ee6a 8a28 	vmul.f32	s17, s20, s17
 8000f6c:	ee38 8a28 	vadd.f32	s16, s16, s17
 8000f70:	ed84 8a04 	vstr	s16, [r4, #16]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8000f74:	ed96 7a00 	vldr	s14, [r6]
 8000f78:	ee27 7a4a 	vnmul.f32	s14, s14, s20
 8000f7c:	ed96 0a01 	vldr	s0, [r6, #4]
 8000f80:	ee67 7a80 	vmul.f32	s15, s15, s0
 8000f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f88:	edc4 7a05 	vstr	s15, [r4, #20]
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 8000f8c:	eddf 8a96 	vldr	s17, [pc, #600]	; 80011e8 <OpenLoopTasks+0x318>
 8000f90:	ed9f 8a96 	vldr	s16, [pc, #600]	; 80011ec <OpenLoopTasks+0x31c>
 8000f94:	f104 0018 	add.w	r0, r4, #24
 8000f98:	eeb0 1a68 	vmov.f32	s2, s17
 8000f9c:	eef0 0a48 	vmov.f32	s1, s16
 8000fa0:	ed94 0a04 	vldr	s0, [r4, #16]
 8000fa4:	f7ff f9a2 	bl	80002ec <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 8000fa8:	f104 001c 	add.w	r0, r4, #28
 8000fac:	eeb0 1a68 	vmov.f32	s2, s17
 8000fb0:	eef0 0a48 	vmov.f32	s1, s16
 8000fb4:	ed94 0a05 	vldr	s0, [r4, #20]
 8000fb8:	f7ff f998 	bl	80002ec <gLPF>
	vectorControlData->Vdq[0] = 0.0f;
 8000fbc:	eddf 0a8c 	vldr	s1, [pc, #560]	; 80011f0 <OpenLoopTasks+0x320>
 8000fc0:	edc4 0a08 	vstr	s1, [r4, #32]
	vectorControlData->Vdq[1] = VamRef;
 8000fc4:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 8000fc8:	f10d 0c04 	add.w	ip, sp, #4
 8000fcc:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8000fd0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000fd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000fd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000fdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000fe0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000fe4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000fe8:	f8de 3000 	ldr.w	r3, [lr]
 8000fec:	f8cc 3000 	str.w	r3, [ip]
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 8000ff0:	eeb0 0a69 	vmov.f32	s0, s19
 8000ff4:	f003 fe30 	bl	8004c58 <atan2f>
 8000ff8:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8000ffc:	ed94 0a08 	vldr	s0, [r4, #32]
 8001000:	ee20 0a00 	vmul.f32	s0, s0, s0
 8001004:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8001008:	ee67 7aa7 	vmul.f32	s15, s15, s15
	amp = sqrtf(sumOfSquares);
 800100c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001010:	f003 fe44 	bl	8004c9c <sqrtf>
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 8001014:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001018:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 800101c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001020:	ee20 0a09 	vmul.f32	s0, s0, s18
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8001024:	ed84 0a12 	vstr	s0, [r4, #72]	; 0x48
	limitVoltVectAmp(sensData, vectorControlData);
 8001028:	f10d 0c04 	add.w	ip, sp, #4
 800102c:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8001030:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001034:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001038:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800103c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001040:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001044:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001048:	f8de 3000 	ldr.w	r3, [lr]
 800104c:	f8cc 3000 	str.w	r3, [ip]
	if( vectorControlData->Mod > MODLIMIT ){
 8001050:	eddf 7a68 	vldr	s15, [pc, #416]	; 80011f4 <OpenLoopTasks+0x324>
 8001054:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105c:	dd31      	ble.n	80010c2 <OpenLoopTasks+0x1f2>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 800105e:	ed9d 8a0b 	vldr	s16, [sp, #44]	; 0x2c
 8001062:	eddf 7a65 	vldr	s15, [pc, #404]	; 80011f8 <OpenLoopTasks+0x328>
 8001066:	ee28 8a27 	vmul.f32	s16, s16, s15
 800106a:	eddf 8a62 	vldr	s17, [pc, #392]	; 80011f4 <OpenLoopTasks+0x324>
 800106e:	ee28 8a28 	vmul.f32	s16, s16, s17
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 8001072:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 8001076:	eeb0 0a49 	vmov.f32	s0, s18
 800107a:	f003 fd63 	bl	8004b44 <cosf>
 800107e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8001082:	ed84 0a08 	vstr	s0, [r4, #32]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_p[0] - vectorControlData->Vdq_FF[0];
 8001086:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800108a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800108e:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8001092:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001096:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 800109a:	eeb0 0a49 	vmov.f32	s0, s18
 800109e:	f003 fd95 	bl	8004bcc <sinf>
 80010a2:	ee28 8a00 	vmul.f32	s16, s16, s0
 80010a6:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
 80010aa:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 80010ae:	ee38 8a40 	vsub.f32	s16, s16, s0
 80010b2:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 80010b6:	ee38 8a40 	vsub.f32	s16, s16, s0
 80010ba:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
		vectorControlData->Mod = MODLIMIT;
 80010be:	edc4 8a12 	vstr	s17, [r4, #72]	; 0x48
	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 80010c2:	eddd 8a1a 	vldr	s17, [sp, #104]	; 0x68
	sinTheta = sinf(theta);
 80010c6:	eeb0 0a68 	vmov.f32	s0, s17
 80010ca:	f003 fd7f 	bl	8004bcc <sinf>
 80010ce:	eeb0 8a40 	vmov.f32	s16, s0
	cosTheta = cosf(theta);
 80010d2:	eeb0 0a68 	vmov.f32	s0, s17
 80010d6:	f003 fd35 	bl	8004b44 <cosf>
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 80010da:	edd4 7a08 	vldr	s15, [r4, #32]
 80010de:	ee60 7a27 	vmul.f32	s15, s0, s15
 80010e2:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 80010e6:	ee68 6a07 	vmul.f32	s13, s16, s14
 80010ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80010ee:	4b43      	ldr	r3, [pc, #268]	; (80011fc <OpenLoopTasks+0x32c>)
 80010f0:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 80010f4:	edd4 6a08 	vldr	s13, [r4, #32]
 80010f8:	ee28 8a26 	vmul.f32	s16, s16, s13
 80010fc:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001100:	ee38 8a00 	vadd.f32	s16, s16, s0
 8001104:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8001108:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80011d8 <OpenLoopTasks+0x308>
 800110c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8001110:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <OpenLoopTasks+0x330>)
 8001112:	ed83 0a00 	vstr	s0, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV2 * ab[1] );
 8001116:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800111a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800111e:	eddf 6a30 	vldr	s13, [pc, #192]	; 80011e0 <OpenLoopTasks+0x310>
 8001122:	ee28 8a26 	vmul.f32	s16, s16, s13
 8001126:	ee77 7a88 	vadd.f32	s15, s15, s16
 800112a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112e:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 8001132:	eeb1 7a40 	vneg.f32	s14, s0
 8001136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113a:	edc3 7a02 	vstr	s15, [r3, #8]
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 800113e:	eddd 7a26 	vldr	s15, [sp, #152]	; 0x98
	Duty[0] = (Vuvw[0] * twoDivVdc);
 8001142:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001146:	ed85 0a00 	vstr	s0, [r5]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 800114a:	ed93 7a01 	vldr	s14, [r3, #4]
 800114e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001152:	ed85 7a01 	vstr	s14, [r5, #4]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8001156:	ed93 7a02 	vldr	s14, [r3, #8]
 800115a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115e:	edc5 7a02 	vstr	s15, [r5, #8]
	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001162:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001166:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800116a:	f7ff f8a5 	bl	80002b8 <gUpperLowerLimit>
 800116e:	ed85 0a00 	vstr	s0, [r5]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001172:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001176:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800117a:	ed95 0a01 	vldr	s0, [r5, #4]
 800117e:	f7ff f89b 	bl	80002b8 <gUpperLowerLimit>
 8001182:	ed85 0a01 	vstr	s0, [r5, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001186:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800118a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800118e:	ed95 0a02 	vldr	s0, [r5, #8]
 8001192:	f7ff f891 	bl	80002b8 <gUpperLowerLimit>
 8001196:	ed85 0a02 	vstr	s0, [r5, #8]
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 800119a:	ed95 7a00 	vldr	s14, [r5]
 800119e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80011a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011aa:	ed85 7a00 	vstr	s14, [r5]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 80011ae:	ed95 7a01 	vldr	s14, [r5, #4]
 80011b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ba:	ed85 7a01 	vstr	s14, [r5, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 80011be:	ee20 0a27 	vmul.f32	s0, s0, s15
 80011c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80011c6:	ed85 0a02 	vstr	s0, [r5, #8]
}
 80011ca:	b00f      	add	sp, #60	; 0x3c
 80011cc:	ecbd 8b06 	vpop	{d8-d10}
 80011d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80011d4:	b004      	add	sp, #16
 80011d6:	4770      	bx	lr
 80011d8:	3f5105ec 	.word	0x3f5105ec
 80011dc:	20000174 	.word	0x20000174
 80011e0:	3f5db3d7 	.word	0x3f5db3d7
 80011e4:	3f13cd3a 	.word	0x3f13cd3a
 80011e8:	38aec33e 	.word	0x38aec33e
 80011ec:	42fb3333 	.word	0x42fb3333
 80011f0:	00000000 	.word	0x00000000
 80011f4:	3f933333 	.word	0x3f933333
 80011f8:	3f1cc471 	.word	0x3f1cc471
 80011fc:	20000180 	.word	0x20000180
 8001200:	20000188 	.word	0x20000188

08001204 <InitVectorControl>:
void InitVectorControl(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8001204:	b084      	sub	sp, #16
 8001206:	b510      	push	{r4, lr}
 8001208:	b08e      	sub	sp, #56	; 0x38
 800120a:	ac10      	add	r4, sp, #64	; 0x40
 800120c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001210:	9c1d      	ldr	r4, [sp, #116]	; 0x74
	calcVdqFeedForword(sensData, vectorControlData);
 8001212:	f10d 0c04 	add.w	ip, sp, #4
 8001216:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
 800121a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800121e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001222:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001226:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800122a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800122e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001232:	f8de 3000 	ldr.w	r3, [lr]
 8001236:	f8cc 3000 	str.w	r3, [ip]
	vectorControlData->Vdq_FF[0] = -1.0f *sensData.electAngVelo * La * vectorControlData->Idq[1];
 800123a:	ed9d 7a02 	vldr	s14, [sp, #8]
 800123e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8001298 <InitVectorControl+0x94>
 8001242:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8001246:	eddf 6a15 	vldr	s13, [pc, #84]	; 800129c <InitVectorControl+0x98>
 800124a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800124e:	edd4 6a05 	vldr	s13, [r4, #20]
 8001252:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001256:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
	vectorControlData->Vdq_FF[1] = sensData.electAngVelo * ( Ke + La * vectorControlData->Idq[0]);
 800125a:	edd4 6a04 	vldr	s13, [r4, #16]
 800125e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80012a0 <InitVectorControl+0x9c>
 8001262:	ee66 6a86 	vmul.f32	s13, s13, s12
 8001266:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 80012a4 <InitVectorControl+0xa0>
 800126a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800126e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001272:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
 8001276:	edd4 6a08 	vldr	s13, [r4, #32]
 800127a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800127e:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
 8001282:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8001286:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800128a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
}
 800128e:	b00e      	add	sp, #56	; 0x38
 8001290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001294:	b004      	add	sp, #16
 8001296:	4770      	bx	lr
 8001298:	39fba882 	.word	0x39fba882
 800129c:	3ecccccd 	.word	0x3ecccccd
 80012a0:	3949539b 	.word	0x3949539b
 80012a4:	3a870111 	.word	0x3a870111

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b570      	push	{r4, r5, r6, lr}
 80012aa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	2400      	movs	r4, #0
 80012ae:	9403      	str	r4, [sp, #12]
 80012b0:	9404      	str	r4, [sp, #16]
 80012b2:	9405      	str	r4, [sp, #20]
 80012b4:	9406      	str	r4, [sp, #24]
 80012b6:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MX_GPIO_Init+0x8c>)
 80012ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012bc:	f042 0201 	orr.w	r2, r2, #1
 80012c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80012c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012c4:	f002 0201 	and.w	r2, r2, #1
 80012c8:	9201      	str	r2, [sp, #4]
 80012ca:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012ce:	f042 0202 	orr.w	r2, r2, #2
 80012d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|SYS_SW_Pin, GPIO_PIN_RESET);
 80012de:	4622      	mov	r2, r4
 80012e0:	f241 0110 	movw	r1, #4112	; 0x1010
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e8:	f001 ff57 	bl	800319a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRV_EN_Pin|PWM_EN_Pin|SYS_SW2_Pin, GPIO_PIN_RESET);
 80012ec:	4d12      	ldr	r5, [pc, #72]	; (8001338 <MX_GPIO_Init+0x90>)
 80012ee:	4622      	mov	r2, r4
 80012f0:	2186      	movs	r1, #134	; 0x86
 80012f2:	4628      	mov	r0, r5
 80012f4:	f001 ff51 	bl	800319a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CS_Pin SYS_SW_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|SYS_SW_Pin;
 80012f8:	f241 0310 	movw	r3, #4112	; 0x1010
 80012fc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2601      	movs	r6, #1
 8001300:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	a903      	add	r1, sp, #12
 8001308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130c:	f001 fe54 	bl	8002fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001310:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001312:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	a903      	add	r1, sp, #12
 8001318:	4628      	mov	r0, r5
 800131a:	f001 fe4d 	bl	8002fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV_EN_Pin PWM_EN_Pin SYS_SW2_Pin */
  GPIO_InitStruct.Pin = DRV_EN_Pin|PWM_EN_Pin|SYS_SW2_Pin;
 800131e:	2386      	movs	r3, #134	; 0x86
 8001320:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	a903      	add	r1, sp, #12
 800132a:	4628      	mov	r0, r5
 800132c:	f001 fe44 	bl	8002fb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001330:	b008      	add	sp, #32
 8001332:	bd70      	pop	{r4, r5, r6, pc}
 8001334:	40021000 	.word	0x40021000
 8001338:	48000400 	.word	0x48000400

0800133c <SPI_TransmitReceive>:


}

uint8_t SPI_TransmitReceive(SPI_HandleTypeDef * hspi, uint16_t TxData, uint16_t *RxData)
{
 800133c:	b410      	push	{r4}
 800133e:	b083      	sub	sp, #12
  volatile uint32_t cnt = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	9301      	str	r3, [sp, #4]

   while ((hspi->Instance->SR & SPI_SR_TXE) == 0)
 8001344:	6803      	ldr	r3, [r0, #0]
 8001346:	689c      	ldr	r4, [r3, #8]
 8001348:	f014 0f02 	tst.w	r4, #2
 800134c:	d0fa      	beq.n	8001344 <SPI_TransmitReceive+0x8>
   {
	;
   }
    hspi->Instance->DR = TxData;
 800134e:	60d9      	str	r1, [r3, #12]

    while ((hspi->Instance->SR & SPI_SR_RXNE)==0)
 8001350:	6803      	ldr	r3, [r0, #0]
 8001352:	6899      	ldr	r1, [r3, #8]
 8001354:	f011 0f01 	tst.w	r1, #1
 8001358:	d0fa      	beq.n	8001350 <SPI_TransmitReceive+0x14>
     {
	;
   	}
        if((hspi->Instance->SR & SPI_SR_RXNE))
 800135a:	6899      	ldr	r1, [r3, #8]
 800135c:	f011 0f01 	tst.w	r1, #1
 8001360:	d107      	bne.n	8001372 <SPI_TransmitReceive+0x36>
        {
            *RxData = hspi->Instance->DR;
            return 0;
        }
        cnt++;
 8001362:	9b01      	ldr	r3, [sp, #4]
 8001364:	3301      	adds	r3, #1
 8001366:	9301      	str	r3, [sp, #4]


    return 1;
 8001368:	2001      	movs	r0, #1
	while ((hspi->Instance->SR & SPI_SR_TXE) == 0);
}
 800136a:	b003      	add	sp, #12
 800136c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001370:	4770      	bx	lr
            *RxData = hspi->Instance->DR;
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	8013      	strh	r3, [r2, #0]
            return 0;
 8001376:	2000      	movs	r0, #0
 8001378:	e7f7      	b.n	800136a <SPI_TransmitReceive+0x2e>
	...

0800137c <SPI_TransmitReceive_lap>:
void SPI_TransmitReceive_lap(void){
 800137c:	b570      	push	{r4, r5, r6, lr}
	data_t[0] = 0x8021;
 800137e:	4c34      	ldr	r4, [pc, #208]	; (8001450 <SPI_TransmitReceive_lap+0xd4>)
 8001380:	f248 0321 	movw	r3, #32801	; 0x8021
 8001384:	8023      	strh	r3, [r4, #0]
	data_t[1] = 0xffff;
 8001386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800138a:	8063      	strh	r3, [r4, #2]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2110      	movs	r1, #16
 8001390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001394:	f001 ff01 	bl	800319a <HAL_GPIO_WritePin>
	__HAL_SPI_ENABLE(&hspi1);
 8001398:	4e2e      	ldr	r6, [pc, #184]	; (8001454 <SPI_TransmitReceive_lap+0xd8>)
 800139a:	6832      	ldr	r2, [r6, #0]
 800139c:	6813      	ldr	r3, [r2, #0]
 800139e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a2:	6013      	str	r3, [r2, #0]
	SPI_TransmitReceive(&hspi1, data_t[0],&data_r[0]);
 80013a4:	4d2c      	ldr	r5, [pc, #176]	; (8001458 <SPI_TransmitReceive_lap+0xdc>)
 80013a6:	462a      	mov	r2, r5
 80013a8:	8821      	ldrh	r1, [r4, #0]
 80013aa:	4630      	mov	r0, r6
 80013ac:	f7ff ffc6 	bl	800133c <SPI_TransmitReceive>
	SPI_TransmitReceive(&hspi1, data_t[1],&data_r[1]);
 80013b0:	1caa      	adds	r2, r5, #2
 80013b2:	8861      	ldrh	r1, [r4, #2]
 80013b4:	4630      	mov	r0, r6
 80013b6:	f7ff ffc1 	bl	800133c <SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2110      	movs	r1, #16
 80013be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c2:	f001 feea 	bl	800319a <HAL_GPIO_WritePin>
	angle = (((data_r[1] & 0x7fff) << 1) >> 2);
 80013c6:	886b      	ldrh	r3, [r5, #2]
 80013c8:	f3c3 034d 	ubfx	r3, r3, #1, #14
 80013cc:	ee07 3a90 	vmov	s15, r3
	angle_get = 16383.0f - angle;//(float)(~(16383 - angle));
 80013d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d4:	eddf 7a21 	vldr	s15, [pc, #132]	; 800145c <SPI_TransmitReceive_lap+0xe0>
 80013d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <SPI_TransmitReceive_lap+0xe4>)
 80013de:	edc3 7a00 	vstr	s15, [r3]
    if( angle_get > angle_offset )
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <SPI_TransmitReceive_lap+0xe8>)
 80013e4:	ed93 7a00 	vldr	s14, [r3]
 80013e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f0:	dd23      	ble.n	800143a <SPI_TransmitReceive_lap+0xbe>
        angle_corrected = angle_get - angle_offset;
 80013f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <SPI_TransmitReceive_lap+0xec>)
 80013f8:	edc3 7a00 	vstr	s15, [r3]
    angle_corrected_16bit = (((uint16_t)angle_corrected) << 2 ) * 7;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <SPI_TransmitReceive_lap+0xec>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001406:	ee17 3a90 	vmov	r3, s15
 800140a:	b29a      	uxth	r2, r3
 800140c:	0153      	lsls	r3, r2, #5
 800140e:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8001412:	b29b      	uxth	r3, r3
 8001414:	ee07 3a90 	vmov	s15, r3
    eangle_get = angle_corrected_16bit * TWOPIDIVBITMAX16;
 8001418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800146c <SPI_TransmitReceive_lap+0xf0>
 8001420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001424:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001470 <SPI_TransmitReceive_lap+0xf4>
 8001428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <SPI_TransmitReceive_lap+0xf8>)
 800142e:	edc3 7a00 	vstr	s15, [r3]
    gTheta = eangle_get;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <SPI_TransmitReceive_lap+0xfc>)
 8001434:	edc3 7a00 	vstr	s15, [r3]
}
 8001438:	bd70      	pop	{r4, r5, r6, pc}
        angle_corrected = 16383.0f - (angle_offset - angle_get);
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800145c <SPI_TransmitReceive_lap+0xe0>
 8001442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001446:	4b08      	ldr	r3, [pc, #32]	; (8001468 <SPI_TransmitReceive_lap+0xec>)
 8001448:	edc3 7a00 	vstr	s15, [r3]
 800144c:	e7d6      	b.n	80013fc <SPI_TransmitReceive_lap+0x80>
 800144e:	bf00      	nop
 8001450:	200001a0 	.word	0x200001a0
 8001454:	20000214 	.word	0x20000214
 8001458:	2000019c 	.word	0x2000019c
 800145c:	467ffc00 	.word	0x467ffc00
 8001460:	20000198 	.word	0x20000198
 8001464:	20000000 	.word	0x20000000
 8001468:	20000194 	.word	0x20000194
 800146c:	40c90fdb 	.word	0x40c90fdb
 8001470:	37800000 	.word	0x37800000
 8001474:	200001a4 	.word	0x200001a4
 8001478:	2000009c 	.word	0x2000009c

0800147c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147e:	e7fe      	b.n	800147e <Error_Handler+0x2>

08001480 <MX_TIM1_Init>:
{
 8001480:	b510      	push	{r4, lr}
 8001482:	b098      	sub	sp, #96	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001484:	2400      	movs	r4, #0
 8001486:	9415      	str	r4, [sp, #84]	; 0x54
 8001488:	9416      	str	r4, [sp, #88]	; 0x58
 800148a:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148c:	940e      	str	r4, [sp, #56]	; 0x38
 800148e:	940f      	str	r4, [sp, #60]	; 0x3c
 8001490:	9410      	str	r4, [sp, #64]	; 0x40
 8001492:	9411      	str	r4, [sp, #68]	; 0x44
 8001494:	9412      	str	r4, [sp, #72]	; 0x48
 8001496:	9413      	str	r4, [sp, #76]	; 0x4c
 8001498:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800149a:	2234      	movs	r2, #52	; 0x34
 800149c:	4621      	mov	r1, r4
 800149e:	a801      	add	r0, sp, #4
 80014a0:	f003 fb48 	bl	8004b34 <memset>
  htim1.Instance = TIM1;
 80014a4:	4834      	ldr	r0, [pc, #208]	; (8001578 <MX_TIM1_Init+0xf8>)
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <MX_TIM1_Init+0xfc>)
 80014a8:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80014aa:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80014ac:	2320      	movs	r3, #32
 80014ae:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 4000;
 80014b0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80014b4:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b8:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014bc:	f002 ff0c 	bl	80042d8 <HAL_TIM_PWM_Init>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	d14a      	bne.n	800155a <MX_TIM1_Init+0xda>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80014c4:	2370      	movs	r3, #112	; 0x70
 80014c6:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014cc:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ce:	a915      	add	r1, sp, #84	; 0x54
 80014d0:	4829      	ldr	r0, [pc, #164]	; (8001578 <MX_TIM1_Init+0xf8>)
 80014d2:	f003 fa6b 	bl	80049ac <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d141      	bne.n	800155e <MX_TIM1_Init+0xde>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014da:	2360      	movs	r3, #96	; 0x60
 80014dc:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80014de:	2200      	movs	r2, #0
 80014e0:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e2:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014e4:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e6:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014e8:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ea:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ec:	a90e      	add	r1, sp, #56	; 0x38
 80014ee:	4822      	ldr	r0, [pc, #136]	; (8001578 <MX_TIM1_Init+0xf8>)
 80014f0:	f002 ff98 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>
 80014f4:	2800      	cmp	r0, #0
 80014f6:	d134      	bne.n	8001562 <MX_TIM1_Init+0xe2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014f8:	2204      	movs	r2, #4
 80014fa:	a90e      	add	r1, sp, #56	; 0x38
 80014fc:	481e      	ldr	r0, [pc, #120]	; (8001578 <MX_TIM1_Init+0xf8>)
 80014fe:	f002 ff91 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>
 8001502:	2800      	cmp	r0, #0
 8001504:	d12f      	bne.n	8001566 <MX_TIM1_Init+0xe6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001506:	2208      	movs	r2, #8
 8001508:	a90e      	add	r1, sp, #56	; 0x38
 800150a:	481b      	ldr	r0, [pc, #108]	; (8001578 <MX_TIM1_Init+0xf8>)
 800150c:	f002 ff8a 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>
 8001510:	bb58      	cbnz	r0, 800156a <MX_TIM1_Init+0xea>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001512:	2370      	movs	r3, #112	; 0x70
 8001514:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001516:	220c      	movs	r2, #12
 8001518:	a90e      	add	r1, sp, #56	; 0x38
 800151a:	4817      	ldr	r0, [pc, #92]	; (8001578 <MX_TIM1_Init+0xf8>)
 800151c:	f002 ff82 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>
 8001520:	bb28      	cbnz	r0, 800156e <MX_TIM1_Init+0xee>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001526:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001528:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800152a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800152c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800152e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001532:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001534:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001536:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001538:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800153a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800153e:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001540:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001542:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001544:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001546:	a901      	add	r1, sp, #4
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <MX_TIM1_Init+0xf8>)
 800154a:	f003 fa79 	bl	8004a40 <HAL_TIMEx_ConfigBreakDeadTime>
 800154e:	b980      	cbnz	r0, 8001572 <MX_TIM1_Init+0xf2>
  HAL_TIM_MspPostInit(&htim1);
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <MX_TIM1_Init+0xf8>)
 8001552:	f000 fa79 	bl	8001a48 <HAL_TIM_MspPostInit>
}
 8001556:	b018      	add	sp, #96	; 0x60
 8001558:	bd10      	pop	{r4, pc}
    Error_Handler();
 800155a:	f7ff ff8f 	bl	800147c <Error_Handler>
    Error_Handler();
 800155e:	f7ff ff8d 	bl	800147c <Error_Handler>
    Error_Handler();
 8001562:	f7ff ff8b 	bl	800147c <Error_Handler>
    Error_Handler();
 8001566:	f7ff ff89 	bl	800147c <Error_Handler>
    Error_Handler();
 800156a:	f7ff ff87 	bl	800147c <Error_Handler>
    Error_Handler();
 800156e:	f7ff ff85 	bl	800147c <Error_Handler>
    Error_Handler();
 8001572:	f7ff ff83 	bl	800147c <Error_Handler>
 8001576:	bf00      	nop
 8001578:	20000278 	.word	0x20000278
 800157c:	40012c00 	.word	0x40012c00

08001580 <MX_ADC1_Init>:
{
 8001580:	b510      	push	{r4, lr}
 8001582:	b09a      	sub	sp, #104	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 8001584:	2400      	movs	r4, #0
 8001586:	9417      	str	r4, [sp, #92]	; 0x5c
 8001588:	9418      	str	r4, [sp, #96]	; 0x60
 800158a:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_ChannelConfTypeDef sConfig = {0};
 800158c:	2220      	movs	r2, #32
 800158e:	4621      	mov	r1, r4
 8001590:	a80f      	add	r0, sp, #60	; 0x3c
 8001592:	f003 facf 	bl	8004b34 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001596:	223c      	movs	r2, #60	; 0x3c
 8001598:	4621      	mov	r1, r4
 800159a:	4668      	mov	r0, sp
 800159c:	f003 faca 	bl	8004b34 <memset>
  hadc1.Instance = ADC1;
 80015a0:	4840      	ldr	r0, [pc, #256]	; (80016a4 <MX_ADC1_Init+0x124>)
 80015a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015a6:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015a8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80015ac:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ae:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015b0:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 80015b2:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015b4:	2301      	movs	r3, #1
 80015b6:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015b8:	2204      	movs	r2, #4
 80015ba:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015bc:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015be:	7744      	strb	r4, [r0, #29]
  hadc1.Init.NbrOfConversion = 1;
 80015c0:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015c2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c6:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015c8:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015ca:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015ce:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80015d0:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015d4:	f000 fb02 	bl	8001bdc <HAL_ADC_Init>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d154      	bne.n	8001686 <MX_ADC1_Init+0x106>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015dc:	2300      	movs	r3, #0
 80015de:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015e0:	a917      	add	r1, sp, #92	; 0x5c
 80015e2:	4830      	ldr	r0, [pc, #192]	; (80016a4 <MX_ADC1_Init+0x124>)
 80015e4:	f001 fbf2 	bl	8002dcc <HAL_ADCEx_MultiModeConfigChannel>
 80015e8:	2800      	cmp	r0, #0
 80015ea:	d14e      	bne.n	800168a <MX_ADC1_Init+0x10a>
  sConfig.Channel = ADC_CHANNEL_1;
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <MX_ADC1_Init+0x128>)
 80015ee:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015f0:	2306      	movs	r3, #6
 80015f2:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015f4:	2300      	movs	r3, #0
 80015f6:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015f8:	227f      	movs	r2, #127	; 0x7f
 80015fa:	9212      	str	r2, [sp, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015fc:	2204      	movs	r2, #4
 80015fe:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfig.Offset = 0;
 8001600:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001602:	a90f      	add	r1, sp, #60	; 0x3c
 8001604:	4827      	ldr	r0, [pc, #156]	; (80016a4 <MX_ADC1_Init+0x124>)
 8001606:	f000 fd51 	bl	80020ac <HAL_ADC_ConfigChannel>
 800160a:	2800      	cmp	r0, #0
 800160c:	d13f      	bne.n	800168e <MX_ADC1_Init+0x10e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800160e:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <MX_ADC1_Init+0x128>)
 8001610:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001612:	2309      	movs	r3, #9
 8001614:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001616:	2300      	movs	r3, #0
 8001618:	9302      	str	r3, [sp, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800161a:	227f      	movs	r2, #127	; 0x7f
 800161c:	9203      	str	r2, [sp, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800161e:	2204      	movs	r2, #4
 8001620:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedOffset = 0;
 8001622:	9305      	str	r3, [sp, #20]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8001624:	9208      	str	r2, [sp, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001626:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 800162a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 800162e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001636:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001638:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800163c:	4669      	mov	r1, sp
 800163e:	4819      	ldr	r0, [pc, #100]	; (80016a4 <MX_ADC1_Init+0x124>)
 8001640:	f001 f8b4 	bl	80027ac <HAL_ADCEx_InjectedConfigChannel>
 8001644:	bb28      	cbnz	r0, 8001692 <MX_ADC1_Init+0x112>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_ADC1_Init+0x12c>)
 8001648:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800164a:	f240 130f 	movw	r3, #271	; 0x10f
 800164e:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001650:	4669      	mov	r1, sp
 8001652:	4814      	ldr	r0, [pc, #80]	; (80016a4 <MX_ADC1_Init+0x124>)
 8001654:	f001 f8aa 	bl	80027ac <HAL_ADCEx_InjectedConfigChannel>
 8001658:	b9e8      	cbnz	r0, 8001696 <MX_ADC1_Init+0x116>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <MX_ADC1_Init+0x130>)
 800165c:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800165e:	f240 2315 	movw	r3, #533	; 0x215
 8001662:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001664:	4669      	mov	r1, sp
 8001666:	480f      	ldr	r0, [pc, #60]	; (80016a4 <MX_ADC1_Init+0x124>)
 8001668:	f001 f8a0 	bl	80027ac <HAL_ADCEx_InjectedConfigChannel>
 800166c:	b9a8      	cbnz	r0, 800169a <MX_ADC1_Init+0x11a>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_ADC1_Init+0x134>)
 8001670:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8001672:	f240 331b 	movw	r3, #795	; 0x31b
 8001676:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001678:	4669      	mov	r1, sp
 800167a:	480a      	ldr	r0, [pc, #40]	; (80016a4 <MX_ADC1_Init+0x124>)
 800167c:	f001 f896 	bl	80027ac <HAL_ADCEx_InjectedConfigChannel>
 8001680:	b968      	cbnz	r0, 800169e <MX_ADC1_Init+0x11e>
}
 8001682:	b01a      	add	sp, #104	; 0x68
 8001684:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001686:	f7ff fef9 	bl	800147c <Error_Handler>
    Error_Handler();
 800168a:	f7ff fef7 	bl	800147c <Error_Handler>
    Error_Handler();
 800168e:	f7ff fef5 	bl	800147c <Error_Handler>
    Error_Handler();
 8001692:	f7ff fef3 	bl	800147c <Error_Handler>
    Error_Handler();
 8001696:	f7ff fef1 	bl	800147c <Error_Handler>
    Error_Handler();
 800169a:	f7ff feef 	bl	800147c <Error_Handler>
    Error_Handler();
 800169e:	f7ff feed 	bl	800147c <Error_Handler>
 80016a2:	bf00      	nop
 80016a4:	200001a8 	.word	0x200001a8
 80016a8:	04300002 	.word	0x04300002
 80016ac:	08600004 	.word	0x08600004
 80016b0:	0c900008 	.word	0x0c900008
 80016b4:	10c00010 	.word	0x10c00010

080016b8 <MX_SPI1_Init>:
{
 80016b8:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80016ba:	4810      	ldr	r0, [pc, #64]	; (80016fc <MX_SPI1_Init+0x44>)
 80016bc:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_SPI1_Init+0x48>)
 80016be:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016c0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80016c4:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016c6:	2300      	movs	r3, #0
 80016c8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016ca:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80016ce:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016d2:	2201      	movs	r2, #1
 80016d4:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016da:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016dc:	2220      	movs	r2, #32
 80016de:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e0:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016e6:	2207      	movs	r2, #7
 80016e8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ea:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016ec:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ee:	f002 fb41 	bl	8003d74 <HAL_SPI_Init>
 80016f2:	b900      	cbnz	r0, 80016f6 <MX_SPI1_Init+0x3e>
}
 80016f4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80016f6:	f7ff fec1 	bl	800147c <Error_Handler>
 80016fa:	bf00      	nop
 80016fc:	20000214 	.word	0x20000214
 8001700:	40013000 	.word	0x40013000

08001704 <MX_TIM8_Init>:
{
 8001704:	b500      	push	{lr}
 8001706:	b089      	sub	sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	2300      	movs	r3, #0
 800170a:	9305      	str	r3, [sp, #20]
 800170c:	9306      	str	r3, [sp, #24]
 800170e:	9307      	str	r3, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	9303      	str	r3, [sp, #12]
 8001716:	9304      	str	r3, [sp, #16]
  htim8.Instance = TIM8;
 8001718:	4816      	ldr	r0, [pc, #88]	; (8001774 <MX_TIM8_Init+0x70>)
 800171a:	4a17      	ldr	r2, [pc, #92]	; (8001778 <MX_TIM8_Init+0x74>)
 800171c:	6002      	str	r2, [r0, #0]
  htim8.Init.Prescaler = 170;
 800171e:	22aa      	movs	r2, #170	; 0xaa
 8001720:	6042      	str	r2, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001722:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 60000;
 8001724:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001728:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172a:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 800172c:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001730:	f002 fe02 	bl	8004338 <HAL_TIM_IC_Init>
 8001734:	b9b8      	cbnz	r0, 8001766 <MX_TIM8_Init+0x62>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800173a:	9306      	str	r3, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173c:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800173e:	a905      	add	r1, sp, #20
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <MX_TIM8_Init+0x70>)
 8001742:	f003 f933 	bl	80049ac <HAL_TIMEx_MasterConfigSynchronization>
 8001746:	b980      	cbnz	r0, 800176a <MX_TIM8_Init+0x66>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001748:	230a      	movs	r3, #10
 800174a:	9301      	str	r3, [sp, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800174c:	2301      	movs	r3, #1
 800174e:	9302      	str	r3, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001750:	2200      	movs	r2, #0
 8001752:	9203      	str	r2, [sp, #12]
  sConfigIC.ICFilter = 0;
 8001754:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001756:	a901      	add	r1, sp, #4
 8001758:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_TIM8_Init+0x70>)
 800175a:	f002 ff35 	bl	80045c8 <HAL_TIM_IC_ConfigChannel>
 800175e:	b930      	cbnz	r0, 800176e <MX_TIM8_Init+0x6a>
}
 8001760:	b009      	add	sp, #36	; 0x24
 8001762:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001766:	f7ff fe89 	bl	800147c <Error_Handler>
    Error_Handler();
 800176a:	f7ff fe87 	bl	800147c <Error_Handler>
    Error_Handler();
 800176e:	f7ff fe85 	bl	800147c <Error_Handler>
 8001772:	bf00      	nop
 8001774:	200002c4 	.word	0x200002c4
 8001778:	40013400 	.word	0x40013400

0800177c <SystemClock_Config>:
{
 800177c:	b500      	push	{lr}
 800177e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001780:	2238      	movs	r2, #56	; 0x38
 8001782:	2100      	movs	r1, #0
 8001784:	a806      	add	r0, sp, #24
 8001786:	f003 f9d5 	bl	8004b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800178a:	2000      	movs	r0, #0
 800178c:	9001      	str	r0, [sp, #4]
 800178e:	9002      	str	r0, [sp, #8]
 8001790:	9003      	str	r0, [sp, #12]
 8001792:	9004      	str	r0, [sp, #16]
 8001794:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001796:	f001 fd0f 	bl	80031b8 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800179a:	2302      	movs	r3, #2
 800179c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800179e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a2:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a4:	2240      	movs	r2, #64	; 0x40
 80017a6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017aa:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80017ac:	2201      	movs	r2, #1
 80017ae:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 80017b0:	2215      	movs	r2, #21
 80017b2:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017b6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017b8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ba:	a806      	add	r0, sp, #24
 80017bc:	f001 fdb6 	bl	800332c <HAL_RCC_OscConfig>
 80017c0:	b980      	cbnz	r0, 80017e4 <SystemClock_Config+0x68>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c2:	230f      	movs	r3, #15
 80017c4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c6:	2303      	movs	r3, #3
 80017c8:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ce:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d0:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017d2:	2104      	movs	r1, #4
 80017d4:	eb0d 0001 	add.w	r0, sp, r1
 80017d8:	f002 f85e 	bl	8003898 <HAL_RCC_ClockConfig>
 80017dc:	b920      	cbnz	r0, 80017e8 <SystemClock_Config+0x6c>
}
 80017de:	b015      	add	sp, #84	; 0x54
 80017e0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80017e4:	f7ff fe4a 	bl	800147c <Error_Handler>
    Error_Handler();
 80017e8:	f7ff fe48 	bl	800147c <Error_Handler>

080017ec <main>:
{
 80017ec:	b508      	push	{r3, lr}
  HAL_Init();
 80017ee:	f000 f9d3 	bl	8001b98 <HAL_Init>
  SystemClock_Config();
 80017f2:	f7ff ffc3 	bl	800177c <SystemClock_Config>
  MX_GPIO_Init();
 80017f6:	f7ff fd57 	bl	80012a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80017fa:	f7ff fe41 	bl	8001480 <MX_TIM1_Init>
  MX_ADC1_Init();
 80017fe:	f7ff febf 	bl	8001580 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001802:	f7ff ff59 	bl	80016b8 <MX_SPI1_Init>
  MX_TIM8_Init();
 8001806:	f7ff ff7d 	bl	8001704 <MX_TIM8_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 800180a:	4c1b      	ldr	r4, [pc, #108]	; (8001878 <main+0x8c>)
 800180c:	4620      	mov	r0, r4
 800180e:	f002 fcbd 	bl	800418c <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001812:	481a      	ldr	r0, [pc, #104]	; (800187c <main+0x90>)
 8001814:	f000 ff2a 	bl	800266c <HAL_ADCEx_InjectedStart_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001818:	2100      	movs	r1, #0
 800181a:	4620      	mov	r0, r4
 800181c:	f002 ff46 	bl	80046ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001820:	2104      	movs	r1, #4
 8001822:	4620      	mov	r0, r4
 8001824:	f002 ff42 	bl	80046ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001828:	2108      	movs	r1, #8
 800182a:	4620      	mov	r0, r4
 800182c:	f002 ff3e 	bl	80046ac <HAL_TIM_PWM_Start>
  TIM1 -> RCR = 1;
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <main+0x94>)
 8001832:	2201      	movs	r2, #1
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	615a      	str	r2, [r3, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 800183e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001848:	601a      	str	r2, [r3, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	f042 0210 	orr.w	r2, r2, #16
 8001850:	601a      	str	r2, [r3, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001858:	601a      	str	r2, [r3, #0]
  TIM1 -> ARR = COUNTERPERIOD;
 800185a:	f641 3257 	movw	r2, #6999	; 0x1b57
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top
 8001860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001862:	3a28      	subs	r2, #40	; 0x28
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_Base_Start_IT(&htim8);
 8001866:	4c07      	ldr	r4, [pc, #28]	; (8001884 <main+0x98>)
 8001868:	4620      	mov	r0, r4
 800186a:	f002 fc8f 	bl	800418c <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim8,TIM_CHANNEL_1);
 800186e:	2100      	movs	r1, #0
 8001870:	4620      	mov	r0, r4
 8001872:	f002 ffc7 	bl	8004804 <HAL_TIM_IC_Start_IT>
  while (1)
 8001876:	e7fe      	b.n	8001876 <main+0x8a>
 8001878:	20000278 	.word	0x20000278
 800187c:	200001a8 	.word	0x200001a8
 8001880:	40012c00 	.word	0x40012c00
 8001884:	200002c4 	.word	0x200002c4

08001888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b500      	push	{lr}
 800188a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_MspInit+0x34>)
 800188e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001890:	f042 0201 	orr.w	r2, r2, #1
 8001894:	661a      	str	r2, [r3, #96]	; 0x60
 8001896:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001898:	f002 0201 	and.w	r2, r2, #1
 800189c:	9200      	str	r2, [sp, #0]
 800189e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018a6:	659a      	str	r2, [r3, #88]	; 0x58
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018b2:	f001 fd07 	bl	80032c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b6:	b003      	add	sp, #12
 80018b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018c0:	b510      	push	{r4, lr}
 80018c2:	b098      	sub	sp, #96	; 0x60
 80018c4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	2100      	movs	r1, #0
 80018c8:	9113      	str	r1, [sp, #76]	; 0x4c
 80018ca:	9114      	str	r1, [sp, #80]	; 0x50
 80018cc:	9115      	str	r1, [sp, #84]	; 0x54
 80018ce:	9116      	str	r1, [sp, #88]	; 0x58
 80018d0:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d2:	2244      	movs	r2, #68	; 0x44
 80018d4:	a802      	add	r0, sp, #8
 80018d6:	f003 f92d 	bl	8004b34 <memset>
  if(hadc->Instance==ADC1)
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018e0:	d001      	beq.n	80018e6 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018e2:	b018      	add	sp, #96	; 0x60
 80018e4:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80018e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018ea:	9302      	str	r3, [sp, #8]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80018ec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80018f0:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f2:	a802      	add	r0, sp, #8
 80018f4:	f002 f8cc 	bl	8003a90 <HAL_RCCEx_PeriphCLKConfig>
 80018f8:	bb30      	cbnz	r0, 8001948 <HAL_ADC_MspInit+0x88>
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_ADC_MspInit+0x90>)
 80018fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001902:	64da      	str	r2, [r3, #76]	; 0x4c
 8001904:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001906:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800190a:	9200      	str	r2, [sp, #0]
 800190c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001910:	f042 0201 	orr.w	r2, r2, #1
 8001914:	64da      	str	r2, [r3, #76]	; 0x4c
 8001916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	9301      	str	r3, [sp, #4]
 800191e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001920:	230f      	movs	r3, #15
 8001922:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001924:	2303      	movs	r3, #3
 8001926:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2400      	movs	r4, #0
 800192a:	9415      	str	r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	a913      	add	r1, sp, #76	; 0x4c
 800192e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001932:	f001 fb41 	bl	8002fb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001936:	4622      	mov	r2, r4
 8001938:	4621      	mov	r1, r4
 800193a:	2012      	movs	r0, #18
 800193c:	f001 fae2 	bl	8002f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001940:	2012      	movs	r0, #18
 8001942:	f001 fb17 	bl	8002f74 <HAL_NVIC_EnableIRQ>
}
 8001946:	e7cc      	b.n	80018e2 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8001948:	f7ff fd98 	bl	800147c <Error_Handler>
 800194c:	e7d5      	b.n	80018fa <HAL_ADC_MspInit+0x3a>
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000

08001954 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001954:	b500      	push	{lr}
 8001956:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	2300      	movs	r3, #0
 800195a:	9303      	str	r3, [sp, #12]
 800195c:	9304      	str	r3, [sp, #16]
 800195e:	9305      	str	r3, [sp, #20]
 8001960:	9306      	str	r3, [sp, #24]
 8001962:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8001964:	6802      	ldr	r2, [r0, #0]
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_SPI_MspInit+0x60>)
 8001968:	429a      	cmp	r2, r3
 800196a:	d002      	beq.n	8001972 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800196c:	b009      	add	sp, #36	; 0x24
 800196e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001972:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001976:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001978:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800197c:	661a      	str	r2, [r3, #96]	; 0x60
 800197e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001980:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001984:	9201      	str	r2, [sp, #4]
 8001986:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	9302      	str	r3, [sp, #8]
 8001998:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800199a:	23e0      	movs	r3, #224	; 0xe0
 800199c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019a2:	2305      	movs	r3, #5
 80019a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a6:	a903      	add	r1, sp, #12
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ac:	f001 fb04 	bl	8002fb8 <HAL_GPIO_Init>
}
 80019b0:	e7dc      	b.n	800196c <HAL_SPI_MspInit+0x18>
 80019b2:	bf00      	nop
 80019b4:	40013000 	.word	0x40013000

080019b8 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 80019b8:	6802      	ldr	r2, [r0, #0]
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_TIM_PWM_MspInit+0x28>)
 80019bc:	429a      	cmp	r2, r3
 80019be:	d000      	beq.n	80019c2 <HAL_TIM_PWM_MspInit+0xa>
 80019c0:	4770      	bx	lr
{
 80019c2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019c4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80019c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ce:	661a      	str	r2, [r3, #96]	; 0x60
 80019d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019da:	b002      	add	sp, #8
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40012c00 	.word	0x40012c00

080019e4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80019e4:	b500      	push	{lr}
 80019e6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	2300      	movs	r3, #0
 80019ea:	9303      	str	r3, [sp, #12]
 80019ec:	9304      	str	r3, [sp, #16]
 80019ee:	9305      	str	r3, [sp, #20]
 80019f0:	9306      	str	r3, [sp, #24]
 80019f2:	9307      	str	r3, [sp, #28]
  if(htim_ic->Instance==TIM8)
 80019f4:	6802      	ldr	r2, [r0, #0]
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_TIM_IC_MspInit+0x60>)
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d002      	beq.n	8001a02 <HAL_TIM_IC_MspInit+0x1e>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80019fc:	b009      	add	sp, #36	; 0x24
 80019fe:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a02:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8001a06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a0c:	661a      	str	r2, [r3, #96]	; 0x60
 8001a0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a10:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a14:	9201      	str	r2, [sp, #4]
 8001a16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	9302      	str	r3, [sp, #8]
 8001a28:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = Propo_Pin;
 8001a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001a34:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(Propo_GPIO_Port, &GPIO_InitStruct);
 8001a36:	a903      	add	r1, sp, #12
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f001 fabc 	bl	8002fb8 <HAL_GPIO_Init>
}
 8001a40:	e7dc      	b.n	80019fc <HAL_TIM_IC_MspInit+0x18>
 8001a42:	bf00      	nop
 8001a44:	40013400 	.word	0x40013400

08001a48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a48:	b500      	push	{lr}
 8001a4a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	9302      	str	r3, [sp, #8]
 8001a52:	9303      	str	r3, [sp, #12]
 8001a54:	9304      	str	r3, [sp, #16]
 8001a56:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8001a58:	6802      	ldr	r2, [r0, #0]
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_TIM_MspPostInit+0x50>)
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d002      	beq.n	8001a66 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a60:	b007      	add	sp, #28
 8001a62:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a6c:	f042 0201 	orr.w	r2, r2, #1
 8001a70:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001a7c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a80:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a86:	2306      	movs	r3, #6
 8001a88:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	a901      	add	r1, sp, #4
 8001a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a90:	f001 fa92 	bl	8002fb8 <HAL_GPIO_Init>
}
 8001a94:	e7e4      	b.n	8001a60 <HAL_TIM_MspPostInit+0x18>
 8001a96:	bf00      	nop
 8001a98:	40012c00 	.word	0x40012c00

08001a9c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <NMI_Handler>

08001a9e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler>

08001aa0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <MemManage_Handler>

08001aa2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <BusFault_Handler>

08001aa4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <UsageFault_Handler>

08001aa6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa6:	4770      	bx	lr

08001aa8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa8:	4770      	bx	lr

08001aaa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aaa:	4770      	bx	lr

08001aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aae:	f000 f883 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab2:	bd08      	pop	{r3, pc}

08001ab4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001ab4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ab6:	4808      	ldr	r0, [pc, #32]	; (8001ad8 <ADC1_2_IRQHandler+0x24>)
 8001ab8:	f000 f9ae 	bl	8001e18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  HAL_GPIO_TogglePin(SYS_SW2_GPIO_Port, SYS_SW2_Pin);
 8001abc:	4c07      	ldr	r4, [pc, #28]	; (8001adc <ADC1_2_IRQHandler+0x28>)
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f001 fb6f 	bl	80031a4 <HAL_GPIO_TogglePin>

	// Sequence Control
	Sequence_Low_Freq();
 8001ac6:	f7fe fc23 	bl	8000310 <Sequence_Low_Freq>
	Sequence_High_Freq();
 8001aca:	f7fe fd35 	bl	8000538 <Sequence_High_Freq>

	HAL_GPIO_TogglePin(SYS_SW2_GPIO_Port, SYS_SW2_Pin);
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f001 fb67 	bl	80031a4 <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001ad6:	bd10      	pop	{r4, pc}
 8001ad8:	200001a8 	.word	0x200001a8
 8001adc:	48000400 	.word	0x48000400

08001ae0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ae0:	4a03      	ldr	r2, [pc, #12]	; (8001af0 <SystemInit+0x10>)
 8001ae2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ae6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001af4:	480d      	ldr	r0, [pc, #52]	; (8001b2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001af6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001af8:	f7ff fff2 	bl	8001ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001afc:	480c      	ldr	r0, [pc, #48]	; (8001b30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001afe:	490d      	ldr	r1, [pc, #52]	; (8001b34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <LoopForever+0xe>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b04:	e002      	b.n	8001b0c <LoopCopyDataInit>

08001b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0a:	3304      	adds	r3, #4

08001b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b10:	d3f9      	bcc.n	8001b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b14:	4c0a      	ldr	r4, [pc, #40]	; (8001b40 <LoopForever+0x16>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b18:	e001      	b.n	8001b1e <LoopFillZerobss>

08001b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b1c:	3204      	adds	r2, #4

08001b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b20:	d3fb      	bcc.n	8001b1a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001b22:	f002 ffe3 	bl	8004aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b26:	f7ff fe61 	bl	80017ec <main>

08001b2a <LoopForever>:

LoopForever:
    b LoopForever
 8001b2a:	e7fe      	b.n	8001b2a <LoopForever>
  ldr   r0, =_estack
 8001b2c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b34:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b38:	08005f38 	.word	0x08005f38
  ldr r2, =_sbss
 8001b3c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b40:	20000314 	.word	0x20000314

08001b44 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <COMP1_2_3_IRQHandler>
	...

08001b48 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_InitTick+0x44>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	b90b      	cbnz	r3, 8001b52 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001b50:	4770      	bx	lr
{
 8001b52:	b510      	push	{r4, lr}
 8001b54:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5e:	4a0c      	ldr	r2, [pc, #48]	; (8001b90 <HAL_InitTick+0x48>)
 8001b60:	6810      	ldr	r0, [r2, #0]
 8001b62:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b66:	f001 fa13 	bl	8002f90 <HAL_SYSTICK_Config>
 8001b6a:	b968      	cbnz	r0, 8001b88 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6c:	2c0f      	cmp	r4, #15
 8001b6e:	d901      	bls.n	8001b74 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8001b70:	2001      	movs	r0, #1
 8001b72:	e00a      	b.n	8001b8a <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b74:	2200      	movs	r2, #0
 8001b76:	4621      	mov	r1, r4
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f001 f9c2 	bl	8002f04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <HAL_InitTick+0x4c>)
 8001b82:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b84:	2000      	movs	r0, #0
 8001b86:	e000      	b.n	8001b8a <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8001b88:	2001      	movs	r0, #1
}
 8001b8a:	bd10      	pop	{r4, pc}
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	20000004 	.word	0x20000004
 8001b94:	2000000c 	.word	0x2000000c

08001b98 <HAL_Init>:
{
 8001b98:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	f001 f9a0 	bl	8002ee0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ba0:	200f      	movs	r0, #15
 8001ba2:	f7ff ffd1 	bl	8001b48 <HAL_InitTick>
 8001ba6:	b110      	cbz	r0, 8001bae <HAL_Init+0x16>
    status = HAL_ERROR;
 8001ba8:	2401      	movs	r4, #1
}
 8001baa:	4620      	mov	r0, r4
 8001bac:	bd10      	pop	{r4, pc}
 8001bae:	4604      	mov	r4, r0
    HAL_MspInit();
 8001bb0:	f7ff fe6a 	bl	8001888 <HAL_MspInit>
 8001bb4:	e7f9      	b.n	8001baa <HAL_Init+0x12>
	...

08001bb8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001bb8:	4a03      	ldr	r2, [pc, #12]	; (8001bc8 <HAL_IncTick+0x10>)
 8001bba:	6813      	ldr	r3, [r2, #0]
 8001bbc:	4903      	ldr	r1, [pc, #12]	; (8001bcc <HAL_IncTick+0x14>)
 8001bbe:	6809      	ldr	r1, [r1, #0]
 8001bc0:	440b      	add	r3, r1
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000310 	.word	0x20000310
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001bd0:	4b01      	ldr	r3, [pc, #4]	; (8001bd8 <HAL_GetTick+0x8>)
 8001bd2:	6818      	ldr	r0, [r3, #0]
}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000310 	.word	0x20000310

08001bdc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bdc:	b530      	push	{r4, r5, lr}
 8001bde:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001be4:	2800      	cmp	r0, #0
 8001be6:	f000 8107 	beq.w	8001df8 <HAL_ADC_Init+0x21c>
 8001bea:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bec:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001bee:	b313      	cbz	r3, 8001c36 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bf0:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8001bf8:	d005      	beq.n	8001c06 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8001c00:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001c04:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c06:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c08:	6893      	ldr	r3, [r2, #8]
 8001c0a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001c0e:	d11f      	bne.n	8001c50 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8001c10:	6893      	ldr	r3, [r2, #8]
 8001c12:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c20:	4b76      	ldr	r3, [pc, #472]	; (8001dfc <HAL_ADC_Init+0x220>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	099b      	lsrs	r3, r3, #6
 8001c26:	4a76      	ldr	r2, [pc, #472]	; (8001e00 <HAL_ADC_Init+0x224>)
 8001c28:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2c:	099b      	lsrs	r3, r3, #6
 8001c2e:	3301      	adds	r3, #1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001c34:	e009      	b.n	8001c4a <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 8001c36:	f7ff fe43 	bl	80018c0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8001c3e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8001c42:	e7d5      	b.n	8001bf0 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8001c44:	9b01      	ldr	r3, [sp, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001c4a:	9b01      	ldr	r3, [sp, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f9      	bne.n	8001c44 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c50:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c52:	6893      	ldr	r3, [r2, #8]
 8001c54:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001c58:	f040 8096 	bne.w	8001d88 <HAL_ADC_Init+0x1ac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c5e:	f043 0310 	orr.w	r3, r3, #16
 8001c62:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c64:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001c6c:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c6e:	6893      	ldr	r3, [r2, #8]
 8001c70:	f013 0304 	ands.w	r3, r3, #4
 8001c74:	d000      	beq.n	8001c78 <HAL_ADC_Init+0x9c>
 8001c76:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001c7a:	f011 0f10 	tst.w	r1, #16
 8001c7e:	f040 80b4 	bne.w	8001dea <HAL_ADC_Init+0x20e>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 80b1 	bne.w	8001dea <HAL_ADC_Init+0x20e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c88:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c8a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c8e:	f043 0302 	orr.w	r3, r3, #2
 8001c92:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c94:	6893      	ldr	r3, [r2, #8]
 8001c96:	f013 0f01 	tst.w	r3, #1
 8001c9a:	d115      	bne.n	8001cc8 <HAL_ADC_Init+0xec>
 8001c9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f013 0301 	ands.w	r3, r3, #1
 8001ca6:	d000      	beq.n	8001caa <HAL_ADC_Init+0xce>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	4a56      	ldr	r2, [pc, #344]	; (8001e04 <HAL_ADC_Init+0x228>)
 8001cac:	6892      	ldr	r2, [r2, #8]
 8001cae:	f012 0201 	ands.w	r2, r2, #1
 8001cb2:	d000      	beq.n	8001cb6 <HAL_ADC_Init+0xda>
 8001cb4:	2201      	movs	r2, #1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	d106      	bne.n	8001cc8 <HAL_ADC_Init+0xec>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cba:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cbc:	4952      	ldr	r1, [pc, #328]	; (8001e08 <HAL_ADC_Init+0x22c>)
 8001cbe:	688a      	ldr	r2, [r1, #8]
 8001cc0:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cc8:	7f62      	ldrb	r2, [r4, #29]
                 hadc->Init.Overrun                                                     |
 8001cca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ccc:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 8001cd0:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 8001cd2:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 8001cd4:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 8001cd6:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cd8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ce0:	2a01      	cmp	r2, #1
 8001ce2:	d053      	beq.n	8001d8c <HAL_ADC_Init+0x1b0>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ce6:	b122      	cbz	r2, 8001cf2 <HAL_ADC_Init+0x116>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ce8:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001cec:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001cee:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cf0:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001cf2:	6821      	ldr	r1, [r4, #0]
 8001cf4:	68cd      	ldr	r5, [r1, #12]
 8001cf6:	4a45      	ldr	r2, [pc, #276]	; (8001e0c <HAL_ADC_Init+0x230>)
 8001cf8:	402a      	ands	r2, r5
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001cfe:	6822      	ldr	r2, [r4, #0]
 8001d00:	6913      	ldr	r3, [r2, #16]
 8001d02:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001d06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d0c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d0e:	6893      	ldr	r3, [r2, #8]
 8001d10:	f013 0308 	ands.w	r3, r3, #8
 8001d14:	d000      	beq.n	8001d18 <HAL_ADC_Init+0x13c>
 8001d16:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d18:	bb3b      	cbnz	r3, 8001d6a <HAL_ADC_Init+0x18e>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d1a:	7f21      	ldrb	r1, [r4, #28]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d1c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001d20:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d22:	ea43 3181 	orr.w	r1, r3, r1, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d26:	68d3      	ldr	r3, [r2, #12]
 8001d28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d2c:	f023 0302 	bic.w	r3, r3, #2
 8001d30:	430b      	orrs	r3, r1
 8001d32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001d34:	6923      	ldr	r3, [r4, #16]
 8001d36:	b373      	cbz	r3, 8001d96 <HAL_ADC_Init+0x1ba>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d38:	6822      	ldr	r2, [r4, #0]
 8001d3a:	6913      	ldr	r3, [r2, #16]
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d40:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001d42:	6822      	ldr	r2, [r4, #0]
 8001d44:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001d48:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d50:	6921      	ldr	r1, [r4, #16]
 8001d52:	430b      	orrs	r3, r1
 8001d54:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d58:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d029      	beq.n	8001db4 <HAL_ADC_Init+0x1d8>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d60:	6822      	ldr	r2, [r4, #0]
 8001d62:	6913      	ldr	r3, [r2, #16]
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d6a:	6963      	ldr	r3, [r4, #20]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d033      	beq.n	8001dd8 <HAL_ADC_Init+0x1fc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d70:	6822      	ldr	r2, [r4, #0]
 8001d72:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d74:	f023 030f 	bic.w	r3, r3, #15
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001d7c:	f023 0303 	bic.w	r3, r3, #3
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001d86:	e035      	b.n	8001df4 <HAL_ADC_Init+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d88:	2000      	movs	r0, #0
 8001d8a:	e770      	b.n	8001c6e <HAL_ADC_Init+0x92>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d8e:	3a01      	subs	r2, #1
 8001d90:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001d94:	e7a6      	b.n	8001ce4 <HAL_ADC_Init+0x108>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d96:	6822      	ldr	r2, [r4, #0]
 8001d98:	6913      	ldr	r3, [r2, #16]
 8001d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001da0:	6822      	ldr	r2, [r4, #0]
 8001da2:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001da6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001daa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dae:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001db2:	e7d1      	b.n	8001d58 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001db4:	6821      	ldr	r1, [r4, #0]
 8001db6:	690b      	ldr	r3, [r1, #16]
 8001db8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001dbc:	f023 0304 	bic.w	r3, r3, #4
 8001dc0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001dc2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001dc4:	432a      	orrs	r2, r5
 8001dc6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001dc8:	432a      	orrs	r2, r5
 8001dca:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8001dcc:	432a      	orrs	r2, r5
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	610b      	str	r3, [r1, #16]
 8001dd6:	e7c8      	b.n	8001d6a <HAL_ADC_Init+0x18e>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dd8:	6821      	ldr	r1, [r4, #0]
 8001dda:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001ddc:	f023 030f 	bic.w	r3, r3, #15
 8001de0:	6a22      	ldr	r2, [r4, #32]
 8001de2:	3a01      	subs	r2, #1
 8001de4:	4313      	orrs	r3, r2
 8001de6:	630b      	str	r3, [r1, #48]	; 0x30
 8001de8:	e7c7      	b.n	8001d7a <HAL_ADC_Init+0x19e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001dec:	f043 0310 	orr.w	r3, r3, #16
 8001df0:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001df2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001df4:	b003      	add	sp, #12
 8001df6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001df8:	2001      	movs	r0, #1
 8001dfa:	e7fb      	b.n	8001df4 <HAL_ADC_Init+0x218>
 8001dfc:	20000004 	.word	0x20000004
 8001e00:	053e2d63 	.word	0x053e2d63
 8001e04:	50000100 	.word	0x50000100
 8001e08:	50000300 	.word	0x50000300
 8001e0c:	fff04007 	.word	0xfff04007

08001e10 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e10:	4770      	bx	lr

08001e12 <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e12:	4770      	bx	lr

08001e14 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_ADC_IRQHandler>:
{
 8001e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1a:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001e1c:	6803      	ldr	r3, [r0, #0]
 8001e1e:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001e20:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e22:	4b98      	ldr	r3, [pc, #608]	; (8002084 <HAL_ADC_IRQHandler+0x26c>)
 8001e24:	689e      	ldr	r6, [r3, #8]
 8001e26:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001e2a:	f017 0f02 	tst.w	r7, #2
 8001e2e:	d010      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x3a>
 8001e30:	f015 0f02 	tst.w	r5, #2
 8001e34:	d00d      	beq.n	8001e52 <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e36:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001e38:	f013 0f10 	tst.w	r3, #16
 8001e3c:	d103      	bne.n	8001e46 <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001e3e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001e40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e44:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001e46:	4620      	mov	r0, r4
 8001e48:	f000 fcae 	bl	80027a8 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e52:	f017 0f04 	tst.w	r7, #4
 8001e56:	d002      	beq.n	8001e5e <HAL_ADC_IRQHandler+0x46>
 8001e58:	f015 0f04 	tst.w	r5, #4
 8001e5c:	d105      	bne.n	8001e6a <HAL_ADC_IRQHandler+0x52>
 8001e5e:	f017 0f08 	tst.w	r7, #8
 8001e62:	d04a      	beq.n	8001efa <HAL_ADC_IRQHandler+0xe2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001e64:	f015 0f08 	tst.w	r5, #8
 8001e68:	d047      	beq.n	8001efa <HAL_ADC_IRQHandler+0xe2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e6a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001e6c:	f013 0f10 	tst.w	r3, #16
 8001e70:	d103      	bne.n	8001e7a <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e72:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001e74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e78:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001e7a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001e82:	d134      	bne.n	8001eee <HAL_ADC_IRQHandler+0xd6>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e84:	4a80      	ldr	r2, [pc, #512]	; (8002088 <HAL_ADC_IRQHandler+0x270>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d009      	beq.n	8001e9e <HAL_ADC_IRQHandler+0x86>
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d009      	beq.n	8001ea4 <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e90:	b146      	cbz	r6, 8001ea4 <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e92:	2e05      	cmp	r6, #5
 8001e94:	d006      	beq.n	8001ea4 <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e96:	2e09      	cmp	r6, #9
 8001e98:	d004      	beq.n	8001ea4 <HAL_ADC_IRQHandler+0x8c>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e9a:	68d2      	ldr	r2, [r2, #12]
 8001e9c:	e003      	b.n	8001ea6 <HAL_ADC_IRQHandler+0x8e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001ea2:	e7f3      	b.n	8001e8c <HAL_ADC_IRQHandler+0x74>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ea4:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ea6:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001eaa:	d120      	bne.n	8001eee <HAL_ADC_IRQHandler+0xd6>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	f012 0f08 	tst.w	r2, #8
 8001eb2:	d01c      	beq.n	8001eee <HAL_ADC_IRQHandler+0xd6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	f012 0f04 	tst.w	r2, #4
 8001eba:	d110      	bne.n	8001ede <HAL_ADC_IRQHandler+0xc6>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	f022 020c 	bic.w	r2, r2, #12
 8001ec2:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ec4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001ec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eca:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ecc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001ece:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001ed2:	d10c      	bne.n	8001eee <HAL_ADC_IRQHandler+0xd6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ed4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001edc:	e007      	b.n	8001eee <HAL_ADC_IRQHandler+0xd6>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ede:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001ee0:	f043 0310 	orr.w	r3, r3, #16
 8001ee4:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f7ff ff8e 	bl	8001e10 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001efa:	f017 0f20 	tst.w	r7, #32
 8001efe:	d002      	beq.n	8001f06 <HAL_ADC_IRQHandler+0xee>
 8001f00:	f015 0f20 	tst.w	r5, #32
 8001f04:	d105      	bne.n	8001f12 <HAL_ADC_IRQHandler+0xfa>
 8001f06:	f017 0f40 	tst.w	r7, #64	; 0x40
 8001f0a:	d05c      	beq.n	8001fc6 <HAL_ADC_IRQHandler+0x1ae>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001f0c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001f10:	d059      	beq.n	8001fc6 <HAL_ADC_IRQHandler+0x1ae>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001f14:	f013 0f10 	tst.w	r3, #16
 8001f18:	d103      	bne.n	8001f22 <HAL_ADC_IRQHandler+0x10a>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f1a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f20:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001f22:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001f24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f26:	f412 7fc0 	tst.w	r2, #384	; 0x180
 8001f2a:	d112      	bne.n	8001f52 <HAL_ADC_IRQHandler+0x13a>
 8001f2c:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001f34:	d10f      	bne.n	8001f56 <HAL_ADC_IRQHandler+0x13e>
 8001f36:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f38:	4a53      	ldr	r2, [pc, #332]	; (8002088 <HAL_ADC_IRQHandler+0x270>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00d      	beq.n	8001f5a <HAL_ADC_IRQHandler+0x142>
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00d      	beq.n	8001f60 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f44:	b166      	cbz	r6, 8001f60 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001f46:	2e06      	cmp	r6, #6
 8001f48:	d00a      	beq.n	8001f60 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001f4a:	2e07      	cmp	r6, #7
 8001f4c:	d008      	beq.n	8001f60 <HAL_ADC_IRQHandler+0x148>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f4e:	68d2      	ldr	r2, [r2, #12]
 8001f50:	e007      	b.n	8001f62 <HAL_ADC_IRQHandler+0x14a>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001f52:	2100      	movs	r1, #0
 8001f54:	e7eb      	b.n	8001f2e <HAL_ADC_IRQHandler+0x116>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f56:	2000      	movs	r0, #0
 8001f58:	e7ee      	b.n	8001f38 <HAL_ADC_IRQHandler+0x120>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f5e:	e7ef      	b.n	8001f40 <HAL_ADC_IRQHandler+0x128>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f60:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001f62:	b351      	cbz	r1, 8001fba <HAL_ADC_IRQHandler+0x1a2>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001f64:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001f68:	d003      	beq.n	8001f72 <HAL_ADC_IRQHandler+0x15a>
 8001f6a:	b330      	cbz	r0, 8001fba <HAL_ADC_IRQHandler+0x1a2>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001f6c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001f70:	d123      	bne.n	8001fba <HAL_ADC_IRQHandler+0x1a2>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001f72:	6819      	ldr	r1, [r3, #0]
 8001f74:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001f78:	d01f      	beq.n	8001fba <HAL_ADC_IRQHandler+0x1a2>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001f7a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8001f7e:	d11c      	bne.n	8001fba <HAL_ADC_IRQHandler+0x1a2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	f012 0f08 	tst.w	r2, #8
 8001f86:	d110      	bne.n	8001faa <HAL_ADC_IRQHandler+0x192>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f8e:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f90:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001f92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f96:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f98:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001f9a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f9e:	d10c      	bne.n	8001fba <HAL_ADC_IRQHandler+0x1a2>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001fa8:	e007      	b.n	8001fba <HAL_ADC_IRQHandler+0x1a2>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001faa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001fac:	f043 0310 	orr.w	r3, r3, #16
 8001fb0:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f000 fbf0 	bl	80027a0 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	2260      	movs	r2, #96	; 0x60
 8001fc4:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001fc6:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001fca:	d002      	beq.n	8001fd2 <HAL_ADC_IRQHandler+0x1ba>
 8001fcc:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001fd0:	d12f      	bne.n	8002032 <HAL_ADC_IRQHandler+0x21a>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001fd2:	f417 7f80 	tst.w	r7, #256	; 0x100
 8001fd6:	d002      	beq.n	8001fde <HAL_ADC_IRQHandler+0x1c6>
 8001fd8:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001fdc:	d134      	bne.n	8002048 <HAL_ADC_IRQHandler+0x230>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001fde:	f417 7f00 	tst.w	r7, #512	; 0x200
 8001fe2:	d002      	beq.n	8001fea <HAL_ADC_IRQHandler+0x1d2>
 8001fe4:	f415 7f00 	tst.w	r5, #512	; 0x200
 8001fe8:	d13a      	bne.n	8002060 <HAL_ADC_IRQHandler+0x248>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001fea:	f017 0f10 	tst.w	r7, #16
 8001fee:	d019      	beq.n	8002024 <HAL_ADC_IRQHandler+0x20c>
 8001ff0:	f015 0f10 	tst.w	r5, #16
 8001ff4:	d016      	beq.n	8002024 <HAL_ADC_IRQHandler+0x20c>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ff6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ff8:	b133      	cbz	r3, 8002008 <HAL_ADC_IRQHandler+0x1f0>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001ffa:	2e00      	cmp	r6, #0
 8001ffc:	d03c      	beq.n	8002078 <HAL_ADC_IRQHandler+0x260>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <HAL_ADC_IRQHandler+0x26c>)
 8002000:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002002:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8002006:	d00a      	beq.n	800201e <HAL_ADC_IRQHandler+0x206>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002008:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800200a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200e:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002010:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff fefb 	bl	8001e14 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	2210      	movs	r2, #16
 8002022:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002024:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8002028:	d002      	beq.n	8002030 <HAL_ADC_IRQHandler+0x218>
 800202a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800202e:	d12d      	bne.n	800208c <HAL_ADC_IRQHandler+0x274>
}
 8002030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002032:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002038:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800203a:	4620      	mov	r0, r4
 800203c:	f7ff fee9 	bl	8001e12 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	2280      	movs	r2, #128	; 0x80
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e7c4      	b.n	8001fd2 <HAL_ADC_IRQHandler+0x1ba>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002048:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800204a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204e:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002050:	4620      	mov	r0, r4
 8002052:	f000 fba7 	bl	80027a4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002056:	6823      	ldr	r3, [r4, #0]
 8002058:	f44f 7280 	mov.w	r2, #256	; 0x100
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e7be      	b.n	8001fde <HAL_ADC_IRQHandler+0x1c6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002060:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002066:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002068:	4620      	mov	r0, r4
 800206a:	f000 fb9c 	bl	80027a6 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e7b8      	b.n	8001fea <HAL_ADC_IRQHandler+0x1d2>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f013 0f01 	tst.w	r3, #1
 8002080:	d0cd      	beq.n	800201e <HAL_ADC_IRQHandler+0x206>
 8002082:	e7c1      	b.n	8002008 <HAL_ADC_IRQHandler+0x1f0>
 8002084:	50000300 	.word	0x50000300
 8002088:	50000100 	.word	0x50000100
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800208c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800208e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002092:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002094:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002096:	f043 0308 	orr.w	r3, r3, #8
 800209a:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800209c:	6823      	ldr	r3, [r4, #0]
 800209e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a2:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80020a4:	4620      	mov	r0, r4
 80020a6:	f000 fb7c 	bl	80027a2 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 80020aa:	e7c1      	b.n	8002030 <HAL_ADC_IRQHandler+0x218>

080020ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80020ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ae:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020b0:	2200      	movs	r2, #0
 80020b2:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b4:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80020b8:	2a01      	cmp	r2, #1
 80020ba:	f000 825e 	beq.w	800257a <HAL_ADC_ConfigChannel+0x4ce>
 80020be:	4603      	mov	r3, r0
 80020c0:	2201      	movs	r2, #1
 80020c2:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020c6:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020c8:	68a8      	ldr	r0, [r5, #8]
 80020ca:	f010 0f04 	tst.w	r0, #4
 80020ce:	d009      	beq.n	80020e4 <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020d2:	f042 0220 	orr.w	r2, r2, #32
 80020d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80020d8:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80020e0:	b003      	add	sp, #12
 80020e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80020e4:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80020e6:	3530      	adds	r5, #48	; 0x30
 80020e8:	0a22      	lsrs	r2, r4, #8
 80020ea:	0092      	lsls	r2, r2, #2
 80020ec:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 80020f0:	58a8      	ldr	r0, [r5, r2]
 80020f2:	f004 0e1f 	and.w	lr, r4, #31
 80020f6:	241f      	movs	r4, #31
 80020f8:	fa04 f40e 	lsl.w	r4, r4, lr
 80020fc:	ea20 0004 	bic.w	r0, r0, r4
 8002100:	680c      	ldr	r4, [r1, #0]
 8002102:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8002106:	fa0c fc0e 	lsl.w	ip, ip, lr
 800210a:	ea40 000c 	orr.w	r0, r0, ip
 800210e:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002110:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002112:	6882      	ldr	r2, [r0, #8]
 8002114:	f012 0204 	ands.w	r2, r2, #4
 8002118:	d000      	beq.n	800211c <HAL_ADC_ConfigChannel+0x70>
 800211a:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800211c:	6884      	ldr	r4, [r0, #8]
 800211e:	f014 0408 	ands.w	r4, r4, #8
 8002122:	d000      	beq.n	8002126 <HAL_ADC_ConfigChannel+0x7a>
 8002124:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002126:	2a00      	cmp	r2, #0
 8002128:	d150      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800212a:	2c00      	cmp	r4, #0
 800212c:	d14e      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x120>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800212e:	688d      	ldr	r5, [r1, #8]
 8002130:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8002134:	f000 8082 	beq.w	800223c <HAL_ADC_ConfigChannel+0x190>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002138:	680f      	ldr	r7, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800213a:	3014      	adds	r0, #20
 800213c:	0e7a      	lsrs	r2, r7, #25
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8002144:	5886      	ldr	r6, [r0, r2]
 8002146:	f3c7 5e04 	ubfx	lr, r7, #20, #5
 800214a:	f04f 0c07 	mov.w	ip, #7
 800214e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002152:	ea26 0c0c 	bic.w	ip, r6, ip
 8002156:	fa05 f50e 	lsl.w	r5, r5, lr
 800215a:	ea4c 0505 	orr.w	r5, ip, r5
 800215e:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002160:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002162:	6942      	ldr	r2, [r0, #20]
 8002164:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002168:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800216a:	694d      	ldr	r5, [r1, #20]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	68c2      	ldr	r2, [r0, #12]
 8002170:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002174:	0052      	lsls	r2, r2, #1
 8002176:	fa05 f202 	lsl.w	r2, r5, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800217a:	690e      	ldr	r6, [r1, #16]
 800217c:	2e04      	cmp	r6, #4
 800217e:	d075      	beq.n	800226c <HAL_ADC_ConfigChannel+0x1c0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002180:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8002182:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8002186:	4da8      	ldr	r5, [pc, #672]	; (8002428 <HAL_ADC_ConfigChannel+0x37c>)
 8002188:	403d      	ands	r5, r7
 800218a:	680f      	ldr	r7, [r1, #0]
 800218c:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8002190:	433a      	orrs	r2, r7
 8002192:	4315      	orrs	r5, r2
 8002194:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8002198:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	690e      	ldr	r6, [r1, #16]
 80021a0:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021a2:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80021a4:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 80021a8:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 80021ac:	4328      	orrs	r0, r5
 80021ae:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	690d      	ldr	r5, [r1, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80021b6:	7f08      	ldrb	r0, [r1, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80021b8:	2801      	cmp	r0, #1
 80021ba:	d054      	beq.n	8002266 <HAL_ADC_ConfigChannel+0x1ba>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021bc:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80021be:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80021c2:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80021c6:	4304      	orrs	r4, r0
 80021c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021cc:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021ce:	6882      	ldr	r2, [r0, #8]
 80021d0:	f012 0f01 	tst.w	r2, #1
 80021d4:	d117      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x15a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80021d6:	680a      	ldr	r2, [r1, #0]
 80021d8:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80021da:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 80021de:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 80021e2:	ea24 040c 	bic.w	r4, r4, ip
 80021e6:	f005 0c18 	and.w	ip, r5, #24
 80021ea:	4d90      	ldr	r5, [pc, #576]	; (800242c <HAL_ADC_ConfigChannel+0x380>)
 80021ec:	fa25 f50c 	lsr.w	r5, r5, ip
 80021f0:	402a      	ands	r2, r5
 80021f2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80021f6:	4322      	orrs	r2, r4
 80021f8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021fc:	68c8      	ldr	r0, [r1, #12]
 80021fe:	4a8c      	ldr	r2, [pc, #560]	; (8002430 <HAL_ADC_ConfigChannel+0x384>)
 8002200:	4290      	cmp	r0, r2
 8002202:	f000 809b 	beq.w	800233c <HAL_ADC_ConfigChannel+0x290>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002206:	680a      	ldr	r2, [r1, #0]
 8002208:	498a      	ldr	r1, [pc, #552]	; (8002434 <HAL_ADC_ConfigChannel+0x388>)
 800220a:	420a      	tst	r2, r1
 800220c:	f000 81ad 	beq.w	800256a <HAL_ADC_ConfigChannel+0x4be>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002210:	4989      	ldr	r1, [pc, #548]	; (8002438 <HAL_ADC_ConfigChannel+0x38c>)
 8002212:	6889      	ldr	r1, [r1, #8]
 8002214:	f001 70e0 	and.w	r0, r1, #29360128	; 0x1c00000
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002218:	4c88      	ldr	r4, [pc, #544]	; (800243c <HAL_ADC_ConfigChannel+0x390>)
 800221a:	42a2      	cmp	r2, r4
 800221c:	f000 815c 	beq.w	80024d8 <HAL_ADC_ConfigChannel+0x42c>
 8002220:	4c87      	ldr	r4, [pc, #540]	; (8002440 <HAL_ADC_ConfigChannel+0x394>)
 8002222:	42a2      	cmp	r2, r4
 8002224:	f000 8158 	beq.w	80024d8 <HAL_ADC_ConfigChannel+0x42c>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002228:	4c86      	ldr	r4, [pc, #536]	; (8002444 <HAL_ADC_ConfigChannel+0x398>)
 800222a:	42a2      	cmp	r2, r4
 800222c:	f000 817a 	beq.w	8002524 <HAL_ADC_ConfigChannel+0x478>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002230:	4c85      	ldr	r4, [pc, #532]	; (8002448 <HAL_ADC_ConfigChannel+0x39c>)
 8002232:	42a2      	cmp	r2, r4
 8002234:	f000 8188 	beq.w	8002548 <HAL_ADC_ConfigChannel+0x49c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002238:	2000      	movs	r0, #0
 800223a:	e74e      	b.n	80020da <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800223c:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800223e:	3014      	adds	r0, #20
 8002240:	0e6a      	lsrs	r2, r5, #25
 8002242:	0092      	lsls	r2, r2, #2
 8002244:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8002248:	5886      	ldr	r6, [r0, r2]
 800224a:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800224e:	2707      	movs	r7, #7
 8002250:	fa07 f505 	lsl.w	r5, r7, r5
 8002254:	ea26 0505 	bic.w	r5, r6, r5
 8002258:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800225a:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800225c:	6942      	ldr	r2, [r0, #20]
 800225e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002262:	6142      	str	r2, [r0, #20]
}
 8002264:	e781      	b.n	800216a <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002266:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800226a:	e7a7      	b.n	80021bc <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800226c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800226e:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002270:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002274:	680a      	ldr	r2, [r1, #0]
 8002276:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800227a:	bb85      	cbnz	r5, 80022de <HAL_ADC_ConfigChannel+0x232>
 800227c:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002280:	4294      	cmp	r4, r2
 8002282:	d034      	beq.n	80022ee <HAL_ADC_ConfigChannel+0x242>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002284:	681c      	ldr	r4, [r3, #0]
 8002286:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002288:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800228a:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800228e:	680a      	ldr	r2, [r1, #0]
 8002290:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002294:	bb85      	cbnz	r5, 80022f8 <HAL_ADC_ConfigChannel+0x24c>
 8002296:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800229a:	4290      	cmp	r0, r2
 800229c:	d034      	beq.n	8002308 <HAL_ADC_ConfigChannel+0x25c>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800229e:	681c      	ldr	r4, [r3, #0]
 80022a0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80022a2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80022a4:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022a8:	680a      	ldr	r2, [r1, #0]
 80022aa:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80022ae:	bb85      	cbnz	r5, 8002312 <HAL_ADC_ConfigChannel+0x266>
 80022b0:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022b4:	4290      	cmp	r0, r2
 80022b6:	d034      	beq.n	8002322 <HAL_ADC_ConfigChannel+0x276>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022b8:	681c      	ldr	r4, [r3, #0]
 80022ba:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80022bc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80022be:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022c2:	680a      	ldr	r2, [r1, #0]
 80022c4:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80022c8:	bb85      	cbnz	r5, 800232c <HAL_ADC_ConfigChannel+0x280>
 80022ca:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022ce:	4290      	cmp	r0, r2
 80022d0:	f47f af7c 	bne.w	80021cc <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 80022d4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80022d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022da:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 80022dc:	e776      	b.n	80021cc <HAL_ADC_ConfigChannel+0x120>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022e2:	b112      	cbz	r2, 80022ea <HAL_ADC_ConfigChannel+0x23e>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80022e4:	fab2 f282 	clz	r2, r2
 80022e8:	e7ca      	b.n	8002280 <HAL_ADC_ConfigChannel+0x1d4>
    return 32U;
 80022ea:	2220      	movs	r2, #32
 80022ec:	e7c8      	b.n	8002280 <HAL_ADC_ConfigChannel+0x1d4>
  MODIFY_REG(*preg,
 80022ee:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80022f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022f4:	6602      	str	r2, [r0, #96]	; 0x60
}
 80022f6:	e7c5      	b.n	8002284 <HAL_ADC_ConfigChannel+0x1d8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80022fc:	b112      	cbz	r2, 8002304 <HAL_ADC_ConfigChannel+0x258>
  return __builtin_clz(value);
 80022fe:	fab2 f282 	clz	r2, r2
 8002302:	e7ca      	b.n	800229a <HAL_ADC_ConfigChannel+0x1ee>
    return 32U;
 8002304:	2220      	movs	r2, #32
 8002306:	e7c8      	b.n	800229a <HAL_ADC_ConfigChannel+0x1ee>
  MODIFY_REG(*preg,
 8002308:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800230a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800230e:	6662      	str	r2, [r4, #100]	; 0x64
}
 8002310:	e7c5      	b.n	800229e <HAL_ADC_ConfigChannel+0x1f2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002316:	b112      	cbz	r2, 800231e <HAL_ADC_ConfigChannel+0x272>
  return __builtin_clz(value);
 8002318:	fab2 f282 	clz	r2, r2
 800231c:	e7ca      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x208>
    return 32U;
 800231e:	2220      	movs	r2, #32
 8002320:	e7c8      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x208>
  MODIFY_REG(*preg,
 8002322:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8002324:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002328:	66a2      	str	r2, [r4, #104]	; 0x68
}
 800232a:	e7c5      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x20c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002330:	b112      	cbz	r2, 8002338 <HAL_ADC_ConfigChannel+0x28c>
  return __builtin_clz(value);
 8002332:	fab2 f282 	clz	r2, r2
 8002336:	e7ca      	b.n	80022ce <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8002338:	2220      	movs	r2, #32
 800233a:	e7c8      	b.n	80022ce <HAL_ADC_ConfigChannel+0x222>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233c:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800233e:	680a      	ldr	r2, [r1, #0]
 8002340:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002344:	2d00      	cmp	r5, #0
 8002346:	d138      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x30e>
 8002348:	0e90      	lsrs	r0, r2, #26
 800234a:	3001      	adds	r0, #1
 800234c:	f000 001f 	and.w	r0, r0, #31
 8002350:	2809      	cmp	r0, #9
 8002352:	bf8c      	ite	hi
 8002354:	2000      	movhi	r0, #0
 8002356:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002358:	2800      	cmp	r0, #0
 800235a:	d077      	beq.n	800244c <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800235c:	2d00      	cmp	r5, #0
 800235e:	d13b      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x32c>
 8002360:	0e90      	lsrs	r0, r2, #26
 8002362:	3001      	adds	r0, #1
 8002364:	0680      	lsls	r0, r0, #26
 8002366:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800236a:	2d00      	cmp	r5, #0
 800236c:	d140      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x344>
 800236e:	0e96      	lsrs	r6, r2, #26
 8002370:	3601      	adds	r6, #1
 8002372:	f006 071f 	and.w	r7, r6, #31
 8002376:	2601      	movs	r6, #1
 8002378:	40be      	lsls	r6, r7
 800237a:	4330      	orrs	r0, r6
 800237c:	2d00      	cmp	r5, #0
 800237e:	d145      	bne.n	800240c <HAL_ADC_ConfigChannel+0x360>
 8002380:	0e92      	lsrs	r2, r2, #26
 8002382:	3201      	adds	r2, #1
 8002384:	f002 021f 	and.w	r2, r2, #31
 8002388:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800238c:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800238e:	4302      	orrs	r2, r0
 8002390:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002392:	f104 0614 	add.w	r6, r4, #20
 8002396:	0e55      	lsrs	r5, r2, #25
 8002398:	00ad      	lsls	r5, r5, #2
 800239a:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 800239e:	5974      	ldr	r4, [r6, r5]
 80023a0:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80023a4:	f04f 0c07 	mov.w	ip, #7
 80023a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80023ac:	ea24 0c0c 	bic.w	ip, r4, ip
 80023b0:	4090      	lsls	r0, r2
 80023b2:	ea4c 0000 	orr.w	r0, ip, r0
 80023b6:	5170      	str	r0, [r6, r5]
}
 80023b8:	e725      	b.n	8002206 <HAL_ADC_ConfigChannel+0x15a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80023be:	b148      	cbz	r0, 80023d4 <HAL_ADC_ConfigChannel+0x328>
  return __builtin_clz(value);
 80023c0:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023c4:	3001      	adds	r0, #1
 80023c6:	f000 001f 	and.w	r0, r0, #31
 80023ca:	2809      	cmp	r0, #9
 80023cc:	bf8c      	ite	hi
 80023ce:	2000      	movhi	r0, #0
 80023d0:	2001      	movls	r0, #1
 80023d2:	e7c1      	b.n	8002358 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80023d4:	2020      	movs	r0, #32
 80023d6:	e7f5      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x318>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80023dc:	b130      	cbz	r0, 80023ec <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 80023de:	fab0 f080 	clz	r0, r0
 80023e2:	3001      	adds	r0, #1
 80023e4:	0680      	lsls	r0, r0, #26
 80023e6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80023ea:	e7be      	b.n	800236a <HAL_ADC_ConfigChannel+0x2be>
    return 32U;
 80023ec:	2020      	movs	r0, #32
 80023ee:	e7f8      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x336>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80023f4:	b146      	cbz	r6, 8002408 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80023f6:	fab6 f686 	clz	r6, r6
 80023fa:	3601      	adds	r6, #1
 80023fc:	f006 061f 	and.w	r6, r6, #31
 8002400:	2701      	movs	r7, #1
 8002402:	fa07 f606 	lsl.w	r6, r7, r6
 8002406:	e7b8      	b.n	800237a <HAL_ADC_ConfigChannel+0x2ce>
    return 32U;
 8002408:	2620      	movs	r6, #32
 800240a:	e7f6      	b.n	80023fa <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002410:	b142      	cbz	r2, 8002424 <HAL_ADC_ConfigChannel+0x378>
  return __builtin_clz(value);
 8002412:	fab2 f282 	clz	r2, r2
 8002416:	3201      	adds	r2, #1
 8002418:	f002 021f 	and.w	r2, r2, #31
 800241c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002420:	0512      	lsls	r2, r2, #20
 8002422:	e7b4      	b.n	800238e <HAL_ADC_ConfigChannel+0x2e2>
    return 32U;
 8002424:	2220      	movs	r2, #32
 8002426:	e7f6      	b.n	8002416 <HAL_ADC_ConfigChannel+0x36a>
 8002428:	03fff000 	.word	0x03fff000
 800242c:	0007ffff 	.word	0x0007ffff
 8002430:	407f0000 	.word	0x407f0000
 8002434:	80080000 	.word	0x80080000
 8002438:	50000300 	.word	0x50000300
 800243c:	c3210000 	.word	0xc3210000
 8002440:	90c00010 	.word	0x90c00010
 8002444:	c7520000 	.word	0xc7520000
 8002448:	cb840000 	.word	0xcb840000
 800244c:	b9cd      	cbnz	r5, 8002482 <HAL_ADC_ConfigChannel+0x3d6>
 800244e:	0e90      	lsrs	r0, r2, #26
 8002450:	3001      	adds	r0, #1
 8002452:	0680      	lsls	r0, r0, #26
 8002454:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002458:	b9fd      	cbnz	r5, 800249a <HAL_ADC_ConfigChannel+0x3ee>
 800245a:	0e96      	lsrs	r6, r2, #26
 800245c:	3601      	adds	r6, #1
 800245e:	f006 071f 	and.w	r7, r6, #31
 8002462:	2601      	movs	r6, #1
 8002464:	40be      	lsls	r6, r7
 8002466:	4330      	orrs	r0, r6
 8002468:	bb2d      	cbnz	r5, 80024b6 <HAL_ADC_ConfigChannel+0x40a>
 800246a:	0e92      	lsrs	r2, r2, #26
 800246c:	3201      	adds	r2, #1
 800246e:	f002 021f 	and.w	r2, r2, #31
 8002472:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002476:	3a1e      	subs	r2, #30
 8002478:	0512      	lsls	r2, r2, #20
 800247a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800247e:	4302      	orrs	r2, r0
 8002480:	e786      	b.n	8002390 <HAL_ADC_ConfigChannel+0x2e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002486:	b130      	cbz	r0, 8002496 <HAL_ADC_ConfigChannel+0x3ea>
  return __builtin_clz(value);
 8002488:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800248c:	3001      	adds	r0, #1
 800248e:	0680      	lsls	r0, r0, #26
 8002490:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002494:	e7e0      	b.n	8002458 <HAL_ADC_ConfigChannel+0x3ac>
    return 32U;
 8002496:	2020      	movs	r0, #32
 8002498:	e7f8      	b.n	800248c <HAL_ADC_ConfigChannel+0x3e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800249e:	b146      	cbz	r6, 80024b2 <HAL_ADC_ConfigChannel+0x406>
  return __builtin_clz(value);
 80024a0:	fab6 f686 	clz	r6, r6
 80024a4:	3601      	adds	r6, #1
 80024a6:	f006 061f 	and.w	r6, r6, #31
 80024aa:	2701      	movs	r7, #1
 80024ac:	fa07 f606 	lsl.w	r6, r7, r6
 80024b0:	e7d9      	b.n	8002466 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80024b2:	2620      	movs	r6, #32
 80024b4:	e7f6      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80024ba:	b15a      	cbz	r2, 80024d4 <HAL_ADC_ConfigChannel+0x428>
  return __builtin_clz(value);
 80024bc:	fab2 f282 	clz	r2, r2
 80024c0:	3201      	adds	r2, #1
 80024c2:	f002 021f 	and.w	r2, r2, #31
 80024c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80024ca:	3a1e      	subs	r2, #30
 80024cc:	0512      	lsls	r2, r2, #20
 80024ce:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80024d2:	e7d4      	b.n	800247e <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 80024d4:	2220      	movs	r2, #32
 80024d6:	e7f3      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x414>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024d8:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 80024dc:	f47f aea4 	bne.w	8002228 <HAL_ADC_ConfigChannel+0x17c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80024e6:	d001      	beq.n	80024ec <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e8:	2000      	movs	r0, #0
 80024ea:	e5f6      	b.n	80020da <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80024f0:	4923      	ldr	r1, [pc, #140]	; (8002580 <HAL_ADC_ConfigChannel+0x4d4>)
 80024f2:	688a      	ldr	r2, [r1, #8]
 80024f4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80024f8:	4310      	orrs	r0, r2
 80024fa:	6088      	str	r0, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024fc:	4a21      	ldr	r2, [pc, #132]	; (8002584 <HAL_ADC_ConfigChannel+0x4d8>)
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	0992      	lsrs	r2, r2, #6
 8002502:	4921      	ldr	r1, [pc, #132]	; (8002588 <HAL_ADC_ConfigChannel+0x4dc>)
 8002504:	fba1 1202 	umull	r1, r2, r1, r2
 8002508:	0992      	lsrs	r2, r2, #6
 800250a:	3201      	adds	r2, #1
 800250c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002510:	0092      	lsls	r2, r2, #2
 8002512:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002514:	9a01      	ldr	r2, [sp, #4]
 8002516:	b11a      	cbz	r2, 8002520 <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 8002518:	9a01      	ldr	r2, [sp, #4]
 800251a:	3a01      	subs	r2, #1
 800251c:	9201      	str	r2, [sp, #4]
 800251e:	e7f9      	b.n	8002514 <HAL_ADC_ConfigChannel+0x468>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002520:	2000      	movs	r0, #0
 8002522:	e5da      	b.n	80020da <HAL_ADC_ConfigChannel+0x2e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002524:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8002528:	f47f ae82 	bne.w	8002230 <HAL_ADC_ConfigChannel+0x184>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	4a17      	ldr	r2, [pc, #92]	; (800258c <HAL_ADC_ConfigChannel+0x4e0>)
 8002530:	4291      	cmp	r1, r2
 8002532:	d01c      	beq.n	800256e <HAL_ADC_ConfigChannel+0x4c2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002534:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8002538:	4911      	ldr	r1, [pc, #68]	; (8002580 <HAL_ADC_ConfigChannel+0x4d4>)
 800253a:	688a      	ldr	r2, [r1, #8]
 800253c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002540:	4310      	orrs	r0, r2
 8002542:	6088      	str	r0, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002544:	2000      	movs	r0, #0
}
 8002546:	e5c8      	b.n	80020da <HAL_ADC_ConfigChannel+0x2e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002548:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 800254c:	d111      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x4c6>
        if (ADC_VREFINT_INSTANCE(hadc))
 800254e:	6819      	ldr	r1, [r3, #0]
 8002550:	4a0e      	ldr	r2, [pc, #56]	; (800258c <HAL_ADC_ConfigChannel+0x4e0>)
 8002552:	4291      	cmp	r1, r2
 8002554:	d00f      	beq.n	8002576 <HAL_ADC_ConfigChannel+0x4ca>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002556:	f440 0280 	orr.w	r2, r0, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800255a:	4809      	ldr	r0, [pc, #36]	; (8002580 <HAL_ADC_ConfigChannel+0x4d4>)
 800255c:	6881      	ldr	r1, [r0, #8]
 800255e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002562:	430a      	orrs	r2, r1
 8002564:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002566:	2000      	movs	r0, #0
}
 8002568:	e5b7      	b.n	80020da <HAL_ADC_ConfigChannel+0x2e>
 800256a:	2000      	movs	r0, #0
 800256c:	e5b5      	b.n	80020da <HAL_ADC_ConfigChannel+0x2e>
 800256e:	2000      	movs	r0, #0
 8002570:	e5b3      	b.n	80020da <HAL_ADC_ConfigChannel+0x2e>
 8002572:	2000      	movs	r0, #0
 8002574:	e5b1      	b.n	80020da <HAL_ADC_ConfigChannel+0x2e>
 8002576:	2000      	movs	r0, #0
 8002578:	e5af      	b.n	80020da <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 800257a:	2002      	movs	r0, #2
 800257c:	e5b0      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x34>
 800257e:	bf00      	nop
 8002580:	50000300 	.word	0x50000300
 8002584:	20000004 	.word	0x20000004
 8002588:	053e2d63 	.word	0x053e2d63
 800258c:	50000100 	.word	0x50000100

08002590 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002590:	b530      	push	{r4, r5, lr}
 8002592:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002594:	2300      	movs	r3, #0
 8002596:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002598:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	f012 0f01 	tst.w	r2, #1
 80025a0:	d158      	bne.n	8002654 <ADC_Enable+0xc4>
 80025a2:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80025a4:	6899      	ldr	r1, [r3, #8]
 80025a6:	4a2d      	ldr	r2, [pc, #180]	; (800265c <ADC_Enable+0xcc>)
 80025a8:	4211      	tst	r1, r2
 80025aa:	d119      	bne.n	80025e0 <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025b2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80025bc:	4b28      	ldr	r3, [pc, #160]	; (8002660 <ADC_Enable+0xd0>)
 80025be:	689b      	ldr	r3, [r3, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025c0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80025c4:	d01c      	beq.n	8002600 <ADC_Enable+0x70>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025c6:	4b27      	ldr	r3, [pc, #156]	; (8002664 <ADC_Enable+0xd4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	099b      	lsrs	r3, r3, #6
 80025cc:	4a26      	ldr	r2, [pc, #152]	; (8002668 <ADC_Enable+0xd8>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	099b      	lsrs	r3, r3, #6
 80025d4:	3301      	adds	r3, #1
 80025d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80025de:	e00c      	b.n	80025fa <ADC_Enable+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80025e2:	f043 0310 	orr.w	r3, r3, #16
 80025e6:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e8:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 80025f0:	2001      	movs	r0, #1
 80025f2:	e030      	b.n	8002656 <ADC_Enable+0xc6>
      {
        wait_loop_index--;
 80025f4:	9b01      	ldr	r3, [sp, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80025fa:	9b01      	ldr	r3, [sp, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f9      	bne.n	80025f4 <ADC_Enable+0x64>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002600:	f7ff fae6 	bl	8001bd0 <HAL_GetTick>
 8002604:	4605      	mov	r5, r0

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	f012 0f01 	tst.w	r2, #1
 800260e:	d11f      	bne.n	8002650 <ADC_Enable+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	f012 0f01 	tst.w	r2, #1
 8002616:	d107      	bne.n	8002628 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800261e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002628:	f7ff fad2 	bl	8001bd0 <HAL_GetTick>
 800262c:	1b43      	subs	r3, r0, r5
 800262e:	2b02      	cmp	r3, #2
 8002630:	d9e9      	bls.n	8002606 <ADC_Enable+0x76>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f013 0f01 	tst.w	r3, #1
 800263a:	d1e4      	bne.n	8002606 <ADC_Enable+0x76>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800263e:	f043 0310 	orr.w	r3, r3, #16
 8002642:	65e3      	str	r3, [r4, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002644:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6623      	str	r3, [r4, #96]	; 0x60

          return HAL_ERROR;
 800264c:	2001      	movs	r0, #1
 800264e:	e002      	b.n	8002656 <ADC_Enable+0xc6>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002650:	2000      	movs	r0, #0
 8002652:	e000      	b.n	8002656 <ADC_Enable+0xc6>
 8002654:	2000      	movs	r0, #0
}
 8002656:	b003      	add	sp, #12
 8002658:	bd30      	pop	{r4, r5, pc}
 800265a:	bf00      	nop
 800265c:	8000003f 	.word	0x8000003f
 8002660:	50000300 	.word	0x50000300
 8002664:	20000004 	.word	0x20000004
 8002668:	053e2d63 	.word	0x053e2d63

0800266c <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 800266c:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800266e:	4b4a      	ldr	r3, [pc, #296]	; (8002798 <HAL_ADCEx_InjectedStart_IT+0x12c>)
 8002670:	689d      	ldr	r5, [r3, #8]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002672:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	f012 0f08 	tst.w	r2, #8
 800267a:	f040 8089 	bne.w	8002790 <HAL_ADCEx_InjectedStart_IT+0x124>
 800267e:	4604      	mov	r4, r0
 8002680:	f005 051f 	and.w	r5, r5, #31
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002684:	68da      	ldr	r2, [r3, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002688:	f413 7fc0 	tst.w	r3, #384	; 0x180
 800268c:	d101      	bne.n	8002692 <HAL_ADCEx_InjectedStart_IT+0x26>
        && (tmp_config_injected_queue == 0UL)
 800268e:	2a00      	cmp	r2, #0
 8002690:	da53      	bge.n	800273a <HAL_ADCEx_InjectedStart_IT+0xce>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8002692:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8002696:	2b01      	cmp	r3, #1
 8002698:	d07c      	beq.n	8002794 <HAL_ADCEx_InjectedStart_IT+0x128>
 800269a:	2301      	movs	r3, #1
 800269c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026a0:	4620      	mov	r0, r4
 80026a2:	f7ff ff75 	bl	8002590 <ADC_Enable>

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d16e      	bne.n	8002788 <HAL_ADCEx_InjectedStart_IT+0x11c>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 80026aa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80026b0:	d049      	beq.n	8002746 <HAL_ADCEx_InjectedStart_IT+0xda>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80026b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80026b4:	f023 0308 	bic.w	r3, r3, #8
 80026b8:	6623      	str	r3, [r4, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80026ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026c8:	65e3      	str	r3, [r4, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	4a33      	ldr	r2, [pc, #204]	; (800279c <HAL_ADCEx_InjectedStart_IT+0x130>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d03c      	beq.n	800274c <HAL_ADCEx_InjectedStart_IT+0xe0>
 80026d2:	461a      	mov	r2, r3
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d000      	beq.n	80026da <HAL_ADCEx_InjectedStart_IT+0x6e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026d8:	b91d      	cbnz	r5, 80026e2 <HAL_ADCEx_InjectedStart_IT+0x76>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80026dc:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80026e0:	65e2      	str	r2, [r4, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80026e2:	2260      	movs	r2, #96	; 0x60
 80026e4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026e6:	2300      	movs	r3, #0
 80026e8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80026f4:	d003      	beq.n	80026fe <HAL_ADCEx_InjectedStart_IT+0x92>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026fc:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80026fe:	69a3      	ldr	r3, [r4, #24]
 8002700:	2b08      	cmp	r3, #8
 8002702:	d026      	beq.n	8002752 <HAL_ADCEx_InjectedStart_IT+0xe6>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
          break;
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002704:	6822      	ldr	r2, [r4, #0]
 8002706:	6853      	ldr	r3, [r2, #4]
 8002708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800270c:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800270e:	6822      	ldr	r2, [r4, #0]
 8002710:	6853      	ldr	r3, [r2, #4]
 8002712:	f043 0320 	orr.w	r3, r3, #32
 8002716:	6053      	str	r3, [r2, #4]
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	4a20      	ldr	r2, [pc, #128]	; (800279c <HAL_ADCEx_InjectedStart_IT+0x130>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d023      	beq.n	8002768 <HAL_ADCEx_InjectedStart_IT+0xfc>
 8002720:	461a      	mov	r2, r3
 8002722:	4293      	cmp	r3, r2
 8002724:	d023      	beq.n	800276e <HAL_ADCEx_InjectedStart_IT+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002726:	b315      	cbz	r5, 800276e <HAL_ADCEx_InjectedStart_IT+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002728:	2d06      	cmp	r5, #6
 800272a:	d020      	beq.n	800276e <HAL_ADCEx_InjectedStart_IT+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800272c:	2d07      	cmp	r5, #7
 800272e:	d01e      	beq.n	800276e <HAL_ADCEx_InjectedStart_IT+0x102>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002730:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002736:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002738:	e02b      	b.n	8002792 <HAL_ADCEx_InjectedStart_IT+0x126>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800273a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8002742:	2001      	movs	r0, #1
 8002744:	e025      	b.n	8002792 <HAL_ADCEx_InjectedStart_IT+0x126>
        ADC_CLEAR_ERRORCODE(hadc);
 8002746:	2300      	movs	r3, #0
 8002748:	6623      	str	r3, [r4, #96]	; 0x60
 800274a:	e7b6      	b.n	80026ba <HAL_ADCEx_InjectedStart_IT+0x4e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800274c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002750:	e7c0      	b.n	80026d4 <HAL_ADCEx_InjectedStart_IT+0x68>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002752:	6822      	ldr	r2, [r4, #0]
 8002754:	6853      	ldr	r3, [r2, #4]
 8002756:	f023 0320 	bic.w	r3, r3, #32
 800275a:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800275c:	6822      	ldr	r2, [r4, #0]
 800275e:	6853      	ldr	r3, [r2, #4]
 8002760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002764:	6053      	str	r3, [r2, #4]
          break;
 8002766:	e7d7      	b.n	8002718 <HAL_ADCEx_InjectedStart_IT+0xac>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002768:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800276c:	e7d9      	b.n	8002722 <HAL_ADCEx_InjectedStart_IT+0xb6>
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 800276e:	68da      	ldr	r2, [r3, #12]
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002770:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002774:	d10d      	bne.n	8002792 <HAL_ADCEx_InjectedStart_IT+0x126>
  MODIFY_REG(ADCx->CR,
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800277c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002780:	f042 0208 	orr.w	r2, r2, #8
 8002784:	609a      	str	r2, [r3, #8]
}
 8002786:	e004      	b.n	8002792 <HAL_ADCEx_InjectedStart_IT+0x126>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002788:	2300      	movs	r3, #0
 800278a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800278e:	e000      	b.n	8002792 <HAL_ADCEx_InjectedStart_IT+0x126>
    return HAL_BUSY;
 8002790:	2002      	movs	r0, #2
  }
}
 8002792:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8002794:	2002      	movs	r0, #2
 8002796:	e7fc      	b.n	8002792 <HAL_ADCEx_InjectedStart_IT+0x126>
 8002798:	50000300 	.word	0x50000300
 800279c:	50000100 	.word	0x50000100

080027a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80027a0:	4770      	bx	lr

080027a2 <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80027a2:	4770      	bx	lr

080027a4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80027a4:	4770      	bx	lr

080027a6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80027a6:	4770      	bx	lr

080027a8 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80027a8:	4770      	bx	lr
	...

080027ac <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80027ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ae:	b083      	sub	sp, #12
 80027b0:	4603      	mov	r3, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 80027b2:	2200      	movs	r2, #0
 80027b4:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pConfigInjected->InjectedOffset));
  assert_param(IS_ADC_OFFSET_SIGN(pConfigInjected->InjectedOffsetSign));
  assert_param(IS_FUNCTIONAL_STATE(pConfigInjected->InjectedOffsetSaturation));
  assert_param(IS_FUNCTIONAL_STATE(pConfigInjected->InjecOversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027b6:	6940      	ldr	r0, [r0, #20]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027b8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80027bc:	2a01      	cmp	r2, #1
 80027be:	f000 82fa 	beq.w	8002db6 <HAL_ADCEx_InjectedConfigChannel+0x60a>
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80027c8:	b1a8      	cbz	r0, 80027f6 <HAL_ADCEx_InjectedConfigChannel+0x4a>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80027ca:	6a0a      	ldr	r2, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80027cc:	2a01      	cmp	r2, #1
 80027ce:	d012      	beq.n	80027f6 <HAL_ADCEx_InjectedConfigChannel+0x4a>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80027d0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80027d2:	2800      	cmp	r0, #0
 80027d4:	f040 80cd 	bne.w	8002972 <HAL_ADCEx_InjectedConfigChannel+0x1c6>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80027d8:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80027da:	2200      	movs	r2, #0
 80027dc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80027de:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80027e0:	2c00      	cmp	r4, #0
 80027e2:	f000 80c3 	beq.w	800296c <HAL_ADCEx_InjectedConfigChannel+0x1c0>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80027e6:	6a0a      	ldr	r2, [r1, #32]
 80027e8:	3a01      	subs	r2, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80027ea:	f004 047c 	and.w	r4, r4, #124	; 0x7c
 80027ee:	4322      	orrs	r2, r4
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80027f0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80027f2:	4314      	orrs	r4, r2
 80027f4:	e0be      	b.n	8002974 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80027f6:	684a      	ldr	r2, [r1, #4]
 80027f8:	2a09      	cmp	r2, #9
 80027fa:	f000 8097 	beq.w	800292c <HAL_ADCEx_InjectedConfigChannel+0x180>
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80027fe:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002800:	6890      	ldr	r0, [r2, #8]
 8002802:	f010 0f08 	tst.w	r0, #8
 8002806:	d110      	bne.n	800282a <HAL_ADCEx_InjectedConfigChannel+0x7e>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8002808:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 800280c:	2800      	cmp	r0, #0
 800280e:	f040 80d0 	bne.w	80029b2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8002812:	68d0      	ldr	r0, [r2, #12]
 8002814:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8002818:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 800281c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8002820:	0524      	lsls	r4, r4, #20
 8002822:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8002826:	4320      	orrs	r0, r4
 8002828:	60d0      	str	r0, [r2, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800282a:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800282c:	68a2      	ldr	r2, [r4, #8]
 800282e:	f012 0204 	ands.w	r2, r2, #4
 8002832:	d000      	beq.n	8002836 <HAL_ADCEx_InjectedConfigChannel+0x8a>
 8002834:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002836:	68a5      	ldr	r5, [r4, #8]
 8002838:	f015 0508 	ands.w	r5, r5, #8
 800283c:	d000      	beq.n	8002840 <HAL_ADCEx_InjectedConfigChannel+0x94>
 800283e:	2501      	movs	r5, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002840:	2a00      	cmp	r2, #0
 8002842:	f040 8161 	bne.w	8002b08 <HAL_ADCEx_InjectedConfigChannel+0x35c>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002846:	2d00      	cmp	r5, #0
 8002848:	f040 8199 	bne.w	8002b7e <HAL_ADCEx_InjectedConfigChannel+0x3d2>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800284c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800284e:	b11a      	cbz	r2, 8002858 <HAL_ADCEx_InjectedConfigChannel+0xac>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8002850:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002852:	2a00      	cmp	r2, #0
 8002854:	f040 80bc 	bne.w	80029d0 <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002858:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
 800285c:	2a01      	cmp	r2, #1
 800285e:	f000 80b1 	beq.w	80029c4 <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002862:	68e2      	ldr	r2, [r4, #12]
 8002864:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002868:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286a:	2000      	movs	r0, #0
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 800286c:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8002870:	2a01      	cmp	r2, #1
 8002872:	f000 80bc 	beq.w	80029ee <HAL_ADCEx_InjectedConfigChannel+0x242>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8002876:	681c      	ldr	r4, [r3, #0]
 8002878:	6922      	ldr	r2, [r4, #16]
 800287a:	f022 0202 	bic.w	r2, r2, #2
 800287e:	6122      	str	r2, [r4, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002880:	688c      	ldr	r4, [r1, #8]
 8002882:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002886:	f000 80be 	beq.w	8002a06 <HAL_ADCEx_InjectedConfigChannel+0x25a>
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	680f      	ldr	r7, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800288e:	f102 0c14 	add.w	ip, r2, #20
 8002892:	0e7a      	lsrs	r2, r7, #25
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 800289a:	f85c 6002 	ldr.w	r6, [ip, r2]
 800289e:	f3c7 5704 	ubfx	r7, r7, #20, #5
 80028a2:	f04f 0e07 	mov.w	lr, #7
 80028a6:	fa0e fe07 	lsl.w	lr, lr, r7
 80028aa:	ea26 060e 	bic.w	r6, r6, lr
 80028ae:	40bc      	lsls	r4, r7
 80028b0:	4334      	orrs	r4, r6
 80028b2:	f84c 4002 	str.w	r4, [ip, r2]
                                    pConfigInjected->InjectedSamplingTime);

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80028b6:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028b8:	6962      	ldr	r2, [r4, #20]
 80028ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028be:	6162      	str	r2, [r4, #20]

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80028c0:	694c      	ldr	r4, [r1, #20]
 80028c2:	681e      	ldr	r6, [r3, #0]
 80028c4:	68f2      	ldr	r2, [r6, #12]
 80028c6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80028ca:	0052      	lsls	r2, r2, #1
 80028cc:	fa04 f202 	lsl.w	r2, r4, r2

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80028d0:	f8d1 c010 	ldr.w	ip, [r1, #16]
 80028d4:	f1bc 0f04 	cmp.w	ip, #4
 80028d8:	f000 80af 	beq.w	8002a3a <HAL_ADCEx_InjectedConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028dc:	3660      	adds	r6, #96	; 0x60
  MODIFY_REG(*preg,
 80028de:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80028e2:	4fa8      	ldr	r7, [pc, #672]	; (8002b84 <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 80028e4:	4027      	ands	r7, r4
 80028e6:	680c      	ldr	r4, [r1, #0]
 80028e8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80028ec:	4322      	orrs	r2, r4
 80028ee:	4317      	orrs	r7, r2
 80028f0:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 80028f4:	f846 702c 	str.w	r7, [r6, ip, lsl #2]
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	690f      	ldr	r7, [r1, #16]
 80028fc:	698c      	ldr	r4, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028fe:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8002900:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8002904:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8002908:	4334      	orrs	r4, r6
 800290a:	f842 4027 	str.w	r4, [r2, r7, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	690e      	ldr	r6, [r1, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8002912:	7f0c      	ldrb	r4, [r1, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8002914:	2c01      	cmp	r4, #1
 8002916:	f000 808d 	beq.w	8002a34 <HAL_ADCEx_InjectedConfigChannel+0x288>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800291a:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 800291c:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 8002920:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8002924:	4325      	orrs	r5, r4
 8002926:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
}
 800292a:	e0ee      	b.n	8002b0a <HAL_ADCEx_InjectedConfigChannel+0x35e>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800292c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800292e:	b1bc      	cbz	r4, 8002960 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002930:	6808      	ldr	r0, [r1, #0]
 8002932:	0e82      	lsrs	r2, r0, #26
 8002934:	0252      	lsls	r2, r2, #9
 8002936:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800293a:	f004 047c 	and.w	r4, r4, #124	; 0x7c
 800293e:	4322      	orrs	r2, r4
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8002940:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002942:	4302      	orrs	r2, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8002944:	681c      	ldr	r4, [r3, #0]
 8002946:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002948:	f020 407b 	bic.w	r0, r0, #4211081216	; 0xfb000000
 800294c:	f420 006f 	bic.w	r0, r0, #15663104	; 0xef0000
 8002950:	f420 403f 	bic.w	r0, r0, #48896	; 0xbf00
 8002954:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002958:	4310      	orrs	r0, r2
 800295a:	64e0      	str	r0, [r4, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800295c:	665a      	str	r2, [r3, #100]	; 0x64
 800295e:	e74e      	b.n	80027fe <HAL_ADCEx_InjectedConfigChannel+0x52>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8002960:	680a      	ldr	r2, [r1, #0]
 8002962:	0e92      	lsrs	r2, r2, #26
 8002964:	0252      	lsls	r2, r2, #9
 8002966:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
 800296a:	e7eb      	b.n	8002944 <HAL_ADCEx_InjectedConfigChannel+0x198>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800296c:	6a0a      	ldr	r2, [r1, #32]
 800296e:	1e54      	subs	r4, r2, #1
 8002970:	e000      	b.n	8002974 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8002972:	2400      	movs	r4, #0
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8002974:	6808      	ldr	r0, [r1, #0]
 8002976:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800297a:	684a      	ldr	r2, [r1, #4]
 800297c:	f002 021f 	and.w	r2, r2, #31
 8002980:	fa00 f202 	lsl.w	r2, r0, r2
 8002984:	4322      	orrs	r2, r4
    hadc->InjectionConfig.ChannelCount--;
 8002986:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002988:	3801      	subs	r0, #1
 800298a:	6698      	str	r0, [r3, #104]	; 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800298c:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800298e:	4322      	orrs	r2, r4
 8002990:	665a      	str	r2, [r3, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002992:	2800      	cmp	r0, #0
 8002994:	f47f af33 	bne.w	80027fe <HAL_ADCEx_InjectedConfigChannel+0x52>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8002998:	681c      	ldr	r4, [r3, #0]
 800299a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800299c:	f020 407b 	bic.w	r0, r0, #4211081216	; 0xfb000000
 80029a0:	f420 006f 	bic.w	r0, r0, #15663104	; 0xef0000
 80029a4:	f420 403f 	bic.w	r0, r0, #48896	; 0xbf00
 80029a8:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80029ac:	4302      	orrs	r2, r0
 80029ae:	64e2      	str	r2, [r4, #76]	; 0x4c
 80029b0:	e725      	b.n	80027fe <HAL_ADCEx_InjectedConfigChannel+0x52>
      MODIFY_REG(hadc->Instance->CFGR,
 80029b2:	68d0      	ldr	r0, [r2, #12]
 80029b4:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 80029b8:	f891 4026 	ldrb.w	r4, [r1, #38]	; 0x26
 80029bc:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 80029c0:	60d0      	str	r0, [r2, #12]
 80029c2:	e732      	b.n	800282a <HAL_ADCEx_InjectedConfigChannel+0x7e>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80029c4:	68e2      	ldr	r2, [r4, #12]
 80029c6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80029ca:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029cc:	2000      	movs	r0, #0
 80029ce:	e74d      	b.n	800286c <HAL_ADCEx_InjectedConfigChannel+0xc0>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80029d0:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 80029d4:	2801      	cmp	r0, #1
 80029d6:	d005      	beq.n	80029e4 <HAL_ADCEx_InjectedConfigChannel+0x238>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80029d8:	68e2      	ldr	r2, [r4, #12]
 80029da:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80029de:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e0:	2000      	movs	r0, #0
 80029e2:	e743      	b.n	800286c <HAL_ADCEx_InjectedConfigChannel+0xc0>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029e6:	f042 0220 	orr.w	r2, r2, #32
 80029ea:	65da      	str	r2, [r3, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 80029ec:	e73e      	b.n	800286c <HAL_ADCEx_InjectedConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->CFGR2,
 80029ee:	681e      	ldr	r6, [r3, #0]
 80029f0:	6932      	ldr	r2, [r6, #16]
 80029f2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80029f6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80029f8:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 80029fa:	433c      	orrs	r4, r7
 80029fc:	4322      	orrs	r2, r4
 80029fe:	f042 0202 	orr.w	r2, r2, #2
 8002a02:	6132      	str	r2, [r6, #16]
 8002a04:	e73c      	b.n	8002880 <HAL_ADCEx_InjectedConfigChannel+0xd4>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a06:	681c      	ldr	r4, [r3, #0]
 8002a08:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a0a:	3414      	adds	r4, #20
 8002a0c:	0e72      	lsrs	r2, r6, #25
 8002a0e:	0092      	lsls	r2, r2, #2
 8002a10:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8002a14:	58a7      	ldr	r7, [r4, r2]
 8002a16:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8002a1a:	f04f 0c07 	mov.w	ip, #7
 8002a1e:	fa0c f606 	lsl.w	r6, ip, r6
 8002a22:	ea27 0606 	bic.w	r6, r7, r6
 8002a26:	50a6      	str	r6, [r4, r2]
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a28:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a2a:	6962      	ldr	r2, [r4, #20]
 8002a2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a30:	6162      	str	r2, [r4, #20]
}
 8002a32:	e745      	b.n	80028c0 <HAL_ADCEx_InjectedConfigChannel+0x114>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8002a34:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8002a38:	e76f      	b.n	800291a <HAL_ADCEx_InjectedConfigChannel+0x16e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a3a:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8002a3c:	6e34      	ldr	r4, [r6, #96]	; 0x60
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a3e:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002a42:	680a      	ldr	r2, [r1, #0]
 8002a44:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002a48:	bb7d      	cbnz	r5, 8002aaa <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8002a4a:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a4e:	4294      	cmp	r4, r2
 8002a50:	d033      	beq.n	8002aba <HAL_ADCEx_InjectedConfigChannel+0x30e>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a52:	681d      	ldr	r5, [r3, #0]
 8002a54:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8002a56:	6e6c      	ldr	r4, [r5, #100]	; 0x64
 8002a58:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002a5c:	680a      	ldr	r2, [r1, #0]
 8002a5e:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8002a62:	bb7e      	cbnz	r6, 8002ac4 <HAL_ADCEx_InjectedConfigChannel+0x318>
 8002a64:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a68:	4294      	cmp	r4, r2
 8002a6a:	d033      	beq.n	8002ad4 <HAL_ADCEx_InjectedConfigChannel+0x328>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a6c:	681d      	ldr	r5, [r3, #0]
 8002a6e:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8002a70:	6eac      	ldr	r4, [r5, #104]	; 0x68
 8002a72:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002a76:	680a      	ldr	r2, [r1, #0]
 8002a78:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8002a7c:	bb7e      	cbnz	r6, 8002ade <HAL_ADCEx_InjectedConfigChannel+0x332>
 8002a7e:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a82:	4294      	cmp	r4, r2
 8002a84:	d033      	beq.n	8002aee <HAL_ADCEx_InjectedConfigChannel+0x342>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a86:	681d      	ldr	r5, [r3, #0]
 8002a88:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8002a8a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8002a8c:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002a90:	680a      	ldr	r2, [r1, #0]
 8002a92:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8002a96:	bb7e      	cbnz	r6, 8002af8 <HAL_ADCEx_InjectedConfigChannel+0x34c>
 8002a98:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a9c:	4294      	cmp	r4, r2
 8002a9e:	d134      	bne.n	8002b0a <HAL_ADCEx_InjectedConfigChannel+0x35e>
  MODIFY_REG(*preg,
 8002aa0:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8002aa2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aa6:	66ea      	str	r2, [r5, #108]	; 0x6c
}
 8002aa8:	e02f      	b.n	8002b0a <HAL_ADCEx_InjectedConfigChannel+0x35e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002aae:	b112      	cbz	r2, 8002ab6 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  return __builtin_clz(value);
 8002ab0:	fab2 f282 	clz	r2, r2
 8002ab4:	e7cb      	b.n	8002a4e <HAL_ADCEx_InjectedConfigChannel+0x2a2>
    return 32U;
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	e7c9      	b.n	8002a4e <HAL_ADCEx_InjectedConfigChannel+0x2a2>
  MODIFY_REG(*preg,
 8002aba:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8002abc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ac0:	6632      	str	r2, [r6, #96]	; 0x60
}
 8002ac2:	e7c6      	b.n	8002a52 <HAL_ADCEx_InjectedConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002ac8:	b112      	cbz	r2, 8002ad0 <HAL_ADCEx_InjectedConfigChannel+0x324>
  return __builtin_clz(value);
 8002aca:	fab2 f282 	clz	r2, r2
 8002ace:	e7cb      	b.n	8002a68 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    return 32U;
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	e7c9      	b.n	8002a68 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
  MODIFY_REG(*preg,
 8002ad4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8002ad6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ada:	666a      	str	r2, [r5, #100]	; 0x64
}
 8002adc:	e7c6      	b.n	8002a6c <HAL_ADCEx_InjectedConfigChannel+0x2c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002ae2:	b112      	cbz	r2, 8002aea <HAL_ADCEx_InjectedConfigChannel+0x33e>
  return __builtin_clz(value);
 8002ae4:	fab2 f282 	clz	r2, r2
 8002ae8:	e7cb      	b.n	8002a82 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
    return 32U;
 8002aea:	2220      	movs	r2, #32
 8002aec:	e7c9      	b.n	8002a82 <HAL_ADCEx_InjectedConfigChannel+0x2d6>
  MODIFY_REG(*preg,
 8002aee:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8002af0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002af4:	66aa      	str	r2, [r5, #104]	; 0x68
}
 8002af6:	e7c6      	b.n	8002a86 <HAL_ADCEx_InjectedConfigChannel+0x2da>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002afc:	b112      	cbz	r2, 8002b04 <HAL_ADCEx_InjectedConfigChannel+0x358>
  return __builtin_clz(value);
 8002afe:	fab2 f282 	clz	r2, r2
 8002b02:	e7cb      	b.n	8002a9c <HAL_ADCEx_InjectedConfigChannel+0x2f0>
    return 32U;
 8002b04:	2220      	movs	r2, #32
 8002b06:	e7c9      	b.n	8002a9c <HAL_ADCEx_InjectedConfigChannel+0x2f0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b08:	2000      	movs	r0, #0
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b0a:	681d      	ldr	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b0c:	68aa      	ldr	r2, [r5, #8]
 8002b0e:	f012 0f01 	tst.w	r2, #1
 8002b12:	d117      	bne.n	8002b44 <HAL_ADCEx_InjectedConfigChannel+0x398>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8002b14:	680a      	ldr	r2, [r1, #0]
 8002b16:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8002b18:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 8002b1c:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8002b20:	ea24 0407 	bic.w	r4, r4, r7
 8002b24:	f006 0c18 	and.w	ip, r6, #24
 8002b28:	4e17      	ldr	r6, [pc, #92]	; (8002b88 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8002b2a:	fa26 fc0c 	lsr.w	ip, r6, ip
 8002b2e:	ea02 020c 	and.w	r2, r2, ip
 8002b32:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8002b36:	4322      	orrs	r2, r4
 8002b38:	f8c5 20b0 	str.w	r2, [r5, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b3c:	68cc      	ldr	r4, [r1, #12]
 8002b3e:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8002b40:	4294      	cmp	r4, r2
 8002b42:	d031      	beq.n	8002ba8 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8002b44:	680a      	ldr	r2, [r1, #0]
 8002b46:	4912      	ldr	r1, [pc, #72]	; (8002b90 <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 8002b48:	420a      	tst	r2, r1
 8002b4a:	d013      	beq.n	8002b74 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002b4c:	4911      	ldr	r1, [pc, #68]	; (8002b94 <HAL_ADCEx_InjectedConfigChannel+0x3e8>)
 8002b4e:	6889      	ldr	r1, [r1, #8]
 8002b50:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8002b54:	4d10      	ldr	r5, [pc, #64]	; (8002b98 <HAL_ADCEx_InjectedConfigChannel+0x3ec>)
 8002b56:	42aa      	cmp	r2, r5
 8002b58:	f000 80e4 	beq.w	8002d24 <HAL_ADCEx_InjectedConfigChannel+0x578>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b5c:	4d0f      	ldr	r5, [pc, #60]	; (8002b9c <HAL_ADCEx_InjectedConfigChannel+0x3f0>)
 8002b5e:	42aa      	cmp	r2, r5
 8002b60:	f000 80e0 	beq.w	8002d24 <HAL_ADCEx_InjectedConfigChannel+0x578>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8002b64:	4d0e      	ldr	r5, [pc, #56]	; (8002ba0 <HAL_ADCEx_InjectedConfigChannel+0x3f4>)
 8002b66:	42aa      	cmp	r2, r5
 8002b68:	f000 8101 	beq.w	8002d6e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8002b6c:	4d0d      	ldr	r5, [pc, #52]	; (8002ba4 <HAL_ADCEx_InjectedConfigChannel+0x3f8>)
 8002b6e:	42aa      	cmp	r2, r5
 8002b70:	f000 810f 	beq.w	8002d92 <HAL_ADCEx_InjectedConfigChannel+0x5e6>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8002b7a:	b003      	add	sp, #12
 8002b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b7e:	2000      	movs	r0, #0
 8002b80:	e7c3      	b.n	8002b0a <HAL_ADCEx_InjectedConfigChannel+0x35e>
 8002b82:	bf00      	nop
 8002b84:	03fff000 	.word	0x03fff000
 8002b88:	0007ffff 	.word	0x0007ffff
 8002b8c:	407f0000 	.word	0x407f0000
 8002b90:	80080000 	.word	0x80080000
 8002b94:	50000300 	.word	0x50000300
 8002b98:	c3210000 	.word	0xc3210000
 8002b9c:	90c00010 	.word	0x90c00010
 8002ba0:	c7520000 	.word	0xc7520000
 8002ba4:	cb840000 	.word	0xcb840000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba8:	681d      	ldr	r5, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002baa:	680a      	ldr	r2, [r1, #0]
 8002bac:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8002bb0:	2e00      	cmp	r6, #0
 8002bb2:	d137      	bne.n	8002c24 <HAL_ADCEx_InjectedConfigChannel+0x478>
 8002bb4:	0e94      	lsrs	r4, r2, #26
 8002bb6:	3401      	adds	r4, #1
 8002bb8:	f004 041f 	and.w	r4, r4, #31
 8002bbc:	2c09      	cmp	r4, #9
 8002bbe:	bf8c      	ite	hi
 8002bc0:	2400      	movhi	r4, #0
 8002bc2:	2401      	movls	r4, #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc4:	2c00      	cmp	r4, #0
 8002bc6:	d065      	beq.n	8002c94 <HAL_ADCEx_InjectedConfigChannel+0x4e8>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bc8:	2e00      	cmp	r6, #0
 8002bca:	d13a      	bne.n	8002c42 <HAL_ADCEx_InjectedConfigChannel+0x496>
 8002bcc:	0e94      	lsrs	r4, r2, #26
 8002bce:	3401      	adds	r4, #1
 8002bd0:	06a4      	lsls	r4, r4, #26
 8002bd2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002bd6:	2e00      	cmp	r6, #0
 8002bd8:	d13f      	bne.n	8002c5a <HAL_ADCEx_InjectedConfigChannel+0x4ae>
 8002bda:	0e97      	lsrs	r7, r2, #26
 8002bdc:	3701      	adds	r7, #1
 8002bde:	f007 0c1f 	and.w	ip, r7, #31
 8002be2:	2701      	movs	r7, #1
 8002be4:	fa07 f70c 	lsl.w	r7, r7, ip
 8002be8:	433c      	orrs	r4, r7
 8002bea:	2e00      	cmp	r6, #0
 8002bec:	d144      	bne.n	8002c78 <HAL_ADCEx_InjectedConfigChannel+0x4cc>
 8002bee:	0e92      	lsrs	r2, r2, #26
 8002bf0:	3201      	adds	r2, #1
 8002bf2:	f002 021f 	and.w	r2, r2, #31
 8002bf6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002bfa:	0512      	lsls	r2, r2, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bfc:	4322      	orrs	r2, r4
 8002bfe:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c00:	3514      	adds	r5, #20
 8002c02:	0e56      	lsrs	r6, r2, #25
 8002c04:	00b6      	lsls	r6, r6, #2
 8002c06:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8002c0a:	59af      	ldr	r7, [r5, r6]
 8002c0c:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8002c10:	f04f 0c07 	mov.w	ip, #7
 8002c14:	fa0c fc02 	lsl.w	ip, ip, r2
 8002c18:	ea27 070c 	bic.w	r7, r7, ip
 8002c1c:	4094      	lsls	r4, r2
 8002c1e:	433c      	orrs	r4, r7
 8002c20:	51ac      	str	r4, [r5, r6]
}
 8002c22:	e78f      	b.n	8002b44 <HAL_ADCEx_InjectedConfigChannel+0x398>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8002c28:	b14c      	cbz	r4, 8002c3e <HAL_ADCEx_InjectedConfigChannel+0x492>
  return __builtin_clz(value);
 8002c2a:	fab4 f484 	clz	r4, r4
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c2e:	3401      	adds	r4, #1
 8002c30:	f004 041f 	and.w	r4, r4, #31
 8002c34:	2c09      	cmp	r4, #9
 8002c36:	bf8c      	ite	hi
 8002c38:	2400      	movhi	r4, #0
 8002c3a:	2401      	movls	r4, #1
 8002c3c:	e7c2      	b.n	8002bc4 <HAL_ADCEx_InjectedConfigChannel+0x418>
    return 32U;
 8002c3e:	2420      	movs	r4, #32
 8002c40:	e7f5      	b.n	8002c2e <HAL_ADCEx_InjectedConfigChannel+0x482>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8002c46:	b134      	cbz	r4, 8002c56 <HAL_ADCEx_InjectedConfigChannel+0x4aa>
  return __builtin_clz(value);
 8002c48:	fab4 f484 	clz	r4, r4
 8002c4c:	3401      	adds	r4, #1
 8002c4e:	06a4      	lsls	r4, r4, #26
 8002c50:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002c54:	e7bf      	b.n	8002bd6 <HAL_ADCEx_InjectedConfigChannel+0x42a>
    return 32U;
 8002c56:	2420      	movs	r4, #32
 8002c58:	e7f8      	b.n	8002c4c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8002c5e:	b14f      	cbz	r7, 8002c74 <HAL_ADCEx_InjectedConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002c60:	fab7 f787 	clz	r7, r7
 8002c64:	3701      	adds	r7, #1
 8002c66:	f007 071f 	and.w	r7, r7, #31
 8002c6a:	f04f 0c01 	mov.w	ip, #1
 8002c6e:	fa0c f707 	lsl.w	r7, ip, r7
 8002c72:	e7b9      	b.n	8002be8 <HAL_ADCEx_InjectedConfigChannel+0x43c>
    return 32U;
 8002c74:	2720      	movs	r7, #32
 8002c76:	e7f5      	b.n	8002c64 <HAL_ADCEx_InjectedConfigChannel+0x4b8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002c7c:	b142      	cbz	r2, 8002c90 <HAL_ADCEx_InjectedConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002c7e:	fab2 f282 	clz	r2, r2
 8002c82:	3201      	adds	r2, #1
 8002c84:	f002 021f 	and.w	r2, r2, #31
 8002c88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002c8c:	0512      	lsls	r2, r2, #20
 8002c8e:	e7b5      	b.n	8002bfc <HAL_ADCEx_InjectedConfigChannel+0x450>
    return 32U;
 8002c90:	2220      	movs	r2, #32
 8002c92:	e7f6      	b.n	8002c82 <HAL_ADCEx_InjectedConfigChannel+0x4d6>
 8002c94:	b9d6      	cbnz	r6, 8002ccc <HAL_ADCEx_InjectedConfigChannel+0x520>
 8002c96:	0e94      	lsrs	r4, r2, #26
 8002c98:	3401      	adds	r4, #1
 8002c9a:	06a4      	lsls	r4, r4, #26
 8002c9c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002ca0:	bb06      	cbnz	r6, 8002ce4 <HAL_ADCEx_InjectedConfigChannel+0x538>
 8002ca2:	0e97      	lsrs	r7, r2, #26
 8002ca4:	3701      	adds	r7, #1
 8002ca6:	f007 0c1f 	and.w	ip, r7, #31
 8002caa:	2701      	movs	r7, #1
 8002cac:	fa07 f70c 	lsl.w	r7, r7, ip
 8002cb0:	433c      	orrs	r4, r7
 8002cb2:	bb36      	cbnz	r6, 8002d02 <HAL_ADCEx_InjectedConfigChannel+0x556>
 8002cb4:	0e92      	lsrs	r2, r2, #26
 8002cb6:	3201      	adds	r2, #1
 8002cb8:	f002 021f 	and.w	r2, r2, #31
 8002cbc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002cc0:	3a1e      	subs	r2, #30
 8002cc2:	0512      	lsls	r2, r2, #20
 8002cc4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc8:	4322      	orrs	r2, r4
 8002cca:	e798      	b.n	8002bfe <HAL_ADCEx_InjectedConfigChannel+0x452>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8002cd0:	b134      	cbz	r4, 8002ce0 <HAL_ADCEx_InjectedConfigChannel+0x534>
  return __builtin_clz(value);
 8002cd2:	fab4 f484 	clz	r4, r4
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cd6:	3401      	adds	r4, #1
 8002cd8:	06a4      	lsls	r4, r4, #26
 8002cda:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002cde:	e7df      	b.n	8002ca0 <HAL_ADCEx_InjectedConfigChannel+0x4f4>
    return 32U;
 8002ce0:	2420      	movs	r4, #32
 8002ce2:	e7f8      	b.n	8002cd6 <HAL_ADCEx_InjectedConfigChannel+0x52a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8002ce8:	b14f      	cbz	r7, 8002cfe <HAL_ADCEx_InjectedConfigChannel+0x552>
  return __builtin_clz(value);
 8002cea:	fab7 f787 	clz	r7, r7
 8002cee:	3701      	adds	r7, #1
 8002cf0:	f007 071f 	and.w	r7, r7, #31
 8002cf4:	f04f 0c01 	mov.w	ip, #1
 8002cf8:	fa0c f707 	lsl.w	r7, ip, r7
 8002cfc:	e7d8      	b.n	8002cb0 <HAL_ADCEx_InjectedConfigChannel+0x504>
    return 32U;
 8002cfe:	2720      	movs	r7, #32
 8002d00:	e7f5      	b.n	8002cee <HAL_ADCEx_InjectedConfigChannel+0x542>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002d06:	b15a      	cbz	r2, 8002d20 <HAL_ADCEx_InjectedConfigChannel+0x574>
  return __builtin_clz(value);
 8002d08:	fab2 f282 	clz	r2, r2
 8002d0c:	3201      	adds	r2, #1
 8002d0e:	f002 021f 	and.w	r2, r2, #31
 8002d12:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002d16:	3a1e      	subs	r2, #30
 8002d18:	0512      	lsls	r2, r2, #20
 8002d1a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002d1e:	e7d3      	b.n	8002cc8 <HAL_ADCEx_InjectedConfigChannel+0x51c>
    return 32U;
 8002d20:	2220      	movs	r2, #32
 8002d22:	e7f3      	b.n	8002d0c <HAL_ADCEx_InjectedConfigChannel+0x560>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d24:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8002d28:	f47f af1c 	bne.w	8002b64 <HAL_ADCEx_InjectedConfigChannel+0x3b8>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002d32:	f47f af1f 	bne.w	8002b74 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d36:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002d3a:	4920      	ldr	r1, [pc, #128]	; (8002dbc <HAL_ADCEx_InjectedConfigChannel+0x610>)
 8002d3c:	688a      	ldr	r2, [r1, #8]
 8002d3e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002d42:	4314      	orrs	r4, r2
 8002d44:	608c      	str	r4, [r1, #8]
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8002d46:	4a1e      	ldr	r2, [pc, #120]	; (8002dc0 <HAL_ADCEx_InjectedConfigChannel+0x614>)
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	0992      	lsrs	r2, r2, #6
 8002d4c:	491d      	ldr	r1, [pc, #116]	; (8002dc4 <HAL_ADCEx_InjectedConfigChannel+0x618>)
 8002d4e:	fba1 1202 	umull	r1, r2, r1, r2
 8002d52:	0992      	lsrs	r2, r2, #6
 8002d54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002d58:	0092      	lsls	r2, r2, #2
 8002d5a:	3218      	adds	r2, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002d5c:	9201      	str	r2, [sp, #4]
        while (wait_loop_index != 0UL)
 8002d5e:	e002      	b.n	8002d66 <HAL_ADCEx_InjectedConfigChannel+0x5ba>
          wait_loop_index--;
 8002d60:	9a01      	ldr	r2, [sp, #4]
 8002d62:	3a01      	subs	r2, #1
 8002d64:	9201      	str	r2, [sp, #4]
        while (wait_loop_index != 0UL)
 8002d66:	9a01      	ldr	r2, [sp, #4]
 8002d68:	2a00      	cmp	r2, #0
 8002d6a:	d1f9      	bne.n	8002d60 <HAL_ADCEx_InjectedConfigChannel+0x5b4>
 8002d6c:	e702      	b.n	8002b74 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d6e:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8002d72:	f47f aefb 	bne.w	8002b6c <HAL_ADCEx_InjectedConfigChannel+0x3c0>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d76:	6819      	ldr	r1, [r3, #0]
 8002d78:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <HAL_ADCEx_InjectedConfigChannel+0x61c>)
 8002d7a:	4291      	cmp	r1, r2
 8002d7c:	f43f aefa 	beq.w	8002b74 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d80:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8002d84:	490d      	ldr	r1, [pc, #52]	; (8002dbc <HAL_ADCEx_InjectedConfigChannel+0x610>)
 8002d86:	688a      	ldr	r2, [r1, #8]
 8002d88:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002d8c:	4314      	orrs	r4, r2
 8002d8e:	608c      	str	r4, [r1, #8]
}
 8002d90:	e6f0      	b.n	8002b74 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d92:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8002d96:	f47f aeed 	bne.w	8002b74 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
      if (ADC_VREFINT_INSTANCE(hadc))
 8002d9a:	6819      	ldr	r1, [r3, #0]
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <HAL_ADCEx_InjectedConfigChannel+0x61c>)
 8002d9e:	4291      	cmp	r1, r2
 8002da0:	f43f aee8 	beq.w	8002b74 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da4:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002da8:	4904      	ldr	r1, [pc, #16]	; (8002dbc <HAL_ADCEx_InjectedConfigChannel+0x610>)
 8002daa:	688a      	ldr	r2, [r1, #8]
 8002dac:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002db0:	4314      	orrs	r4, r2
 8002db2:	608c      	str	r4, [r1, #8]
}
 8002db4:	e6de      	b.n	8002b74 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
  __HAL_LOCK(hadc);
 8002db6:	2002      	movs	r0, #2
 8002db8:	e6df      	b.n	8002b7a <HAL_ADCEx_InjectedConfigChannel+0x3ce>
 8002dba:	bf00      	nop
 8002dbc:	50000300 	.word	0x50000300
 8002dc0:	20000004 	.word	0x20000004
 8002dc4:	053e2d63 	.word	0x053e2d63
 8002dc8:	50000100 	.word	0x50000100

08002dcc <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dcc:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8002dd0:	2a01      	cmp	r2, #1
 8002dd2:	d07f      	beq.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
{
 8002dd4:	b410      	push	{r4}
 8002dd6:	b09d      	sub	sp, #116	; 0x74
 8002dd8:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002de0:	2200      	movs	r2, #0
 8002de2:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002de4:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002de6:	6800      	ldr	r0, [r0, #0]
 8002de8:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002dec:	d039      	beq.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0x96>
 8002dee:	2200      	movs	r2, #0
 8002df0:	9201      	str	r2, [sp, #4]

  if (tmp_hadc_slave.Instance == NULL)
 8002df2:	9a01      	ldr	r2, [sp, #4]
 8002df4:	2a00      	cmp	r2, #0
 8002df6:	d037      	beq.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002df8:	6892      	ldr	r2, [r2, #8]
 8002dfa:	f012 0204 	ands.w	r2, r2, #4
 8002dfe:	d000      	beq.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002e00:	2201      	movs	r2, #1
 8002e02:	6880      	ldr	r0, [r0, #8]
 8002e04:	f010 0f04 	tst.w	r0, #4
 8002e08:	d154      	bne.n	8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002e0a:	2a00      	cmp	r2, #0
 8002e0c:	d152      	bne.n	8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e0e:	680a      	ldr	r2, [r1, #0]
 8002e10:	2a00      	cmp	r2, #0
 8002e12:	d032      	beq.n	8002e7a <HAL_ADCEx_MultiModeConfigChannel+0xae>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e14:	4c30      	ldr	r4, [pc, #192]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8002e16:	68a2      	ldr	r2, [r4, #8]
 8002e18:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e1c:	6848      	ldr	r0, [r1, #4]
 8002e1e:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8002e22:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8002e26:	4302      	orrs	r2, r0
 8002e28:	60a2      	str	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002e2e:	6892      	ldr	r2, [r2, #8]
 8002e30:	f012 0201 	ands.w	r2, r2, #1
 8002e34:	d000      	beq.n	8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x6c>
 8002e36:	2201      	movs	r2, #1
 8002e38:	4828      	ldr	r0, [pc, #160]	; (8002edc <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002e3a:	6880      	ldr	r0, [r0, #8]
 8002e3c:	f010 0001 	ands.w	r0, r0, #1
 8002e40:	d000      	beq.n	8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002e42:	2001      	movs	r0, #1
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d141      	bne.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x100>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e48:	4c23      	ldr	r4, [pc, #140]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8002e4a:	68a2      	ldr	r2, [r4, #8]
 8002e4c:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002e50:	f022 020f 	bic.w	r2, r2, #15
 8002e54:	6808      	ldr	r0, [r1, #0]
 8002e56:	6889      	ldr	r1, [r1, #8]
 8002e58:	4301      	orrs	r1, r0
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e5e:	2000      	movs	r0, #0
 8002e60:	e02d      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0xf2>
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002e62:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002e64:	9201      	str	r2, [sp, #4]
 8002e66:	e7c4      	b.n	8002df2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e6a:	f042 0220 	orr.w	r2, r2, #32
 8002e6e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8002e76:	2001      	movs	r0, #1
 8002e78:	e024      	b.n	8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e7a:	4917      	ldr	r1, [pc, #92]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8002e7c:	688a      	ldr	r2, [r1, #8]
 8002e7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e82:	608a      	str	r2, [r1, #8]
 8002e84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002e88:	6892      	ldr	r2, [r2, #8]
 8002e8a:	f012 0201 	ands.w	r2, r2, #1
 8002e8e:	d000      	beq.n	8002e92 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
 8002e90:	2201      	movs	r2, #1
 8002e92:	4912      	ldr	r1, [pc, #72]	; (8002edc <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002e94:	6889      	ldr	r1, [r1, #8]
 8002e96:	f011 0101 	ands.w	r1, r1, #1
 8002e9a:	d000      	beq.n	8002e9e <HAL_ADCEx_MultiModeConfigChannel+0xd2>
 8002e9c:	2101      	movs	r1, #1

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	d116      	bne.n	8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x104>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ea2:	490d      	ldr	r1, [pc, #52]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8002ea4:	688a      	ldr	r2, [r1, #8]
 8002ea6:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002eaa:	f022 020f 	bic.w	r2, r2, #15
 8002eae:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e004      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0xf2>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002eb6:	f042 0220 	orr.w	r2, r2, #32
 8002eba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ebc:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8002ec4:	b01d      	add	sp, #116	; 0x74
 8002ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002eca:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ecc:	2000      	movs	r0, #0
 8002ece:	e7f6      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	e7f4      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0xf2>
  __HAL_LOCK(hadc);
 8002ed4:	2002      	movs	r0, #2
}
 8002ed6:	4770      	bx	lr
 8002ed8:	50000300 	.word	0x50000300
 8002edc:	50000100 	.word	0x50000100

08002ee0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee0:	4a07      	ldr	r2, [pc, #28]	; (8002f00 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002ee2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ee4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ee8:	041b      	lsls	r3, r3, #16
 8002eea:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eec:	0200      	lsls	r0, r0, #8
 8002eee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ef2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002efc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f04:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_NVIC_SetPriority+0x68>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f0e:	f1c3 0c07 	rsb	ip, r3, #7
 8002f12:	f1bc 0f04 	cmp.w	ip, #4
 8002f16:	bf28      	it	cs
 8002f18:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1c:	f103 0e04 	add.w	lr, r3, #4
 8002f20:	f1be 0f06 	cmp.w	lr, #6
 8002f24:	d918      	bls.n	8002f58 <HAL_NVIC_SetPriority+0x54>
 8002f26:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	f04f 3eff 	mov.w	lr, #4294967295
 8002f2c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002f30:	ea21 010c 	bic.w	r1, r1, ip
 8002f34:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f36:	fa0e f303 	lsl.w	r3, lr, r3
 8002f3a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002f40:	2800      	cmp	r0, #0
 8002f42:	db0b      	blt.n	8002f5c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f44:	0109      	lsls	r1, r1, #4
 8002f46:	b2c9      	uxtb	r1, r1
 8002f48:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002f4c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002f50:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002f54:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e7e5      	b.n	8002f28 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	f000 000f 	and.w	r0, r0, #15
 8002f60:	0109      	lsls	r1, r1, #4
 8002f62:	b2c9      	uxtb	r1, r1
 8002f64:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <HAL_NVIC_SetPriority+0x6c>)
 8002f66:	5419      	strb	r1, [r3, r0]
 8002f68:	e7f4      	b.n	8002f54 <HAL_NVIC_SetPriority+0x50>
 8002f6a:	bf00      	nop
 8002f6c:	e000ed00 	.word	0xe000ed00
 8002f70:	e000ed14 	.word	0xe000ed14

08002f74 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002f74:	2800      	cmp	r0, #0
 8002f76:	db07      	blt.n	8002f88 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f78:	f000 021f 	and.w	r2, r0, #31
 8002f7c:	0940      	lsrs	r0, r0, #5
 8002f7e:	2301      	movs	r3, #1
 8002f80:	4093      	lsls	r3, r2
 8002f82:	4a02      	ldr	r2, [pc, #8]	; (8002f8c <HAL_NVIC_EnableIRQ+0x18>)
 8002f84:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000e100 	.word	0xe000e100

08002f90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f90:	3801      	subs	r0, #1
 8002f92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002f96:	d20b      	bcs.n	8002fb0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002f9c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9e:	4a05      	ldr	r2, [pc, #20]	; (8002fb4 <HAL_SYSTICK_Config+0x24>)
 8002fa0:	21f0      	movs	r1, #240	; 0xf0
 8002fa2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002faa:	2207      	movs	r2, #7
 8002fac:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002fb0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fba:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8002fbc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fbe:	e062      	b.n	8003086 <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fc0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fc2:	005e      	lsls	r6, r3, #1
 8002fc4:	2403      	movs	r4, #3
 8002fc6:	40b4      	lsls	r4, r6
 8002fc8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fcc:	68cc      	ldr	r4, [r1, #12]
 8002fce:	40b4      	lsls	r4, r6
 8002fd0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002fd2:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fd6:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fda:	684c      	ldr	r4, [r1, #4]
 8002fdc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002fe0:	409c      	lsls	r4, r3
 8002fe2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8002fe6:	6044      	str	r4, [r0, #4]
 8002fe8:	e05e      	b.n	80030a8 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fea:	08dd      	lsrs	r5, r3, #3
 8002fec:	3508      	adds	r5, #8
 8002fee:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ff2:	f003 0407 	and.w	r4, r3, #7
 8002ff6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002ffa:	240f      	movs	r4, #15
 8002ffc:	fa04 f40c 	lsl.w	r4, r4, ip
 8003000:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003004:	690c      	ldr	r4, [r1, #16]
 8003006:	fa04 f40c 	lsl.w	r4, r4, ip
 800300a:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800300e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003012:	e060      	b.n	80030d6 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003014:	2405      	movs	r4, #5
 8003016:	e000      	b.n	800301a <HAL_GPIO_Init+0x62>
 8003018:	2400      	movs	r4, #0
 800301a:	fa04 f40e 	lsl.w	r4, r4, lr
 800301e:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003020:	f10c 0c02 	add.w	ip, ip, #2
 8003024:	4d55      	ldr	r5, [pc, #340]	; (800317c <HAL_GPIO_Init+0x1c4>)
 8003026:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800302a:	4c55      	ldr	r4, [pc, #340]	; (8003180 <HAL_GPIO_Init+0x1c8>)
 800302c:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800302e:	43d4      	mvns	r4, r2
 8003030:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003034:	684f      	ldr	r7, [r1, #4]
 8003036:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800303a:	d001      	beq.n	8003040 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800303c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003040:	4d4f      	ldr	r5, [pc, #316]	; (8003180 <HAL_GPIO_Init+0x1c8>)
 8003042:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8003044:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8003046:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800304a:	684f      	ldr	r7, [r1, #4]
 800304c:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8003050:	d001      	beq.n	8003056 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8003052:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003056:	4d4a      	ldr	r5, [pc, #296]	; (8003180 <HAL_GPIO_Init+0x1c8>)
 8003058:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 800305a:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800305c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003060:	684f      	ldr	r7, [r1, #4]
 8003062:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003066:	d001      	beq.n	800306c <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8003068:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800306c:	4d44      	ldr	r5, [pc, #272]	; (8003180 <HAL_GPIO_Init+0x1c8>)
 800306e:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003070:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8003072:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003074:	684e      	ldr	r6, [r1, #4]
 8003076:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800307a:	d001      	beq.n	8003080 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 800307c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8003080:	4a3f      	ldr	r2, [pc, #252]	; (8003180 <HAL_GPIO_Init+0x1c8>)
 8003082:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8003084:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003086:	680a      	ldr	r2, [r1, #0]
 8003088:	fa32 f403 	lsrs.w	r4, r2, r3
 800308c:	d074      	beq.n	8003178 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800308e:	f04f 0c01 	mov.w	ip, #1
 8003092:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8003096:	ea1c 0202 	ands.w	r2, ip, r2
 800309a:	d0f3      	beq.n	8003084 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800309c:	684c      	ldr	r4, [r1, #4]
 800309e:	f004 0403 	and.w	r4, r4, #3
 80030a2:	3c01      	subs	r4, #1
 80030a4:	2c01      	cmp	r4, #1
 80030a6:	d98b      	bls.n	8002fc0 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a8:	684c      	ldr	r4, [r1, #4]
 80030aa:	f004 0403 	and.w	r4, r4, #3
 80030ae:	2c03      	cmp	r4, #3
 80030b0:	d00c      	beq.n	80030cc <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80030b2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030b4:	005d      	lsls	r5, r3, #1
 80030b6:	f04f 0c03 	mov.w	ip, #3
 80030ba:	fa0c fc05 	lsl.w	ip, ip, r5
 80030be:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c2:	688c      	ldr	r4, [r1, #8]
 80030c4:	40ac      	lsls	r4, r5
 80030c6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80030ca:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030cc:	684c      	ldr	r4, [r1, #4]
 80030ce:	f004 0403 	and.w	r4, r4, #3
 80030d2:	2c02      	cmp	r4, #2
 80030d4:	d089      	beq.n	8002fea <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 80030d6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030d8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80030dc:	f04f 0c03 	mov.w	ip, #3
 80030e0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80030e4:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030e8:	684c      	ldr	r4, [r1, #4]
 80030ea:	f004 0403 	and.w	r4, r4, #3
 80030ee:	fa04 f40e 	lsl.w	r4, r4, lr
 80030f2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80030f6:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030f8:	684c      	ldr	r4, [r1, #4]
 80030fa:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 80030fe:	d0c1      	beq.n	8003084 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003100:	4c20      	ldr	r4, [pc, #128]	; (8003184 <HAL_GPIO_Init+0x1cc>)
 8003102:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003104:	f045 0501 	orr.w	r5, r5, #1
 8003108:	6625      	str	r5, [r4, #96]	; 0x60
 800310a:	6e24      	ldr	r4, [r4, #96]	; 0x60
 800310c:	f004 0401 	and.w	r4, r4, #1
 8003110:	9401      	str	r4, [sp, #4]
 8003112:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003114:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003118:	f10c 0502 	add.w	r5, ip, #2
 800311c:	4c17      	ldr	r4, [pc, #92]	; (800317c <HAL_GPIO_Init+0x1c4>)
 800311e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003122:	f003 0403 	and.w	r4, r3, #3
 8003126:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800312a:	240f      	movs	r4, #15
 800312c:	fa04 f40e 	lsl.w	r4, r4, lr
 8003130:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003134:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003138:	f43f af6e 	beq.w	8003018 <HAL_GPIO_Init+0x60>
 800313c:	4c12      	ldr	r4, [pc, #72]	; (8003188 <HAL_GPIO_Init+0x1d0>)
 800313e:	42a0      	cmp	r0, r4
 8003140:	d012      	beq.n	8003168 <HAL_GPIO_Init+0x1b0>
 8003142:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003146:	42a0      	cmp	r0, r4
 8003148:	d010      	beq.n	800316c <HAL_GPIO_Init+0x1b4>
 800314a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800314e:	42a0      	cmp	r0, r4
 8003150:	d00e      	beq.n	8003170 <HAL_GPIO_Init+0x1b8>
 8003152:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003156:	42a0      	cmp	r0, r4
 8003158:	d00c      	beq.n	8003174 <HAL_GPIO_Init+0x1bc>
 800315a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800315e:	42a0      	cmp	r0, r4
 8003160:	f43f af58 	beq.w	8003014 <HAL_GPIO_Init+0x5c>
 8003164:	2406      	movs	r4, #6
 8003166:	e758      	b.n	800301a <HAL_GPIO_Init+0x62>
 8003168:	2401      	movs	r4, #1
 800316a:	e756      	b.n	800301a <HAL_GPIO_Init+0x62>
 800316c:	2402      	movs	r4, #2
 800316e:	e754      	b.n	800301a <HAL_GPIO_Init+0x62>
 8003170:	2403      	movs	r4, #3
 8003172:	e752      	b.n	800301a <HAL_GPIO_Init+0x62>
 8003174:	2404      	movs	r4, #4
 8003176:	e750      	b.n	800301a <HAL_GPIO_Init+0x62>
  }
}
 8003178:	b003      	add	sp, #12
 800317a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800317c:	40010000 	.word	0x40010000
 8003180:	40010400 	.word	0x40010400
 8003184:	40021000 	.word	0x40021000
 8003188:	48000400 	.word	0x48000400

0800318c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800318c:	6903      	ldr	r3, [r0, #16]
 800318e:	4219      	tst	r1, r3
 8003190:	d001      	beq.n	8003196 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8003192:	2001      	movs	r0, #1
 8003194:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003196:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003198:	4770      	bx	lr

0800319a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800319a:	b10a      	cbz	r2, 80031a0 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800319c:	6181      	str	r1, [r0, #24]
 800319e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031a0:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80031a2:	4770      	bx	lr

080031a4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031a4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031a6:	ea01 0203 	and.w	r2, r1, r3
 80031aa:	ea21 0103 	bic.w	r1, r1, r3
 80031ae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80031b2:	6181      	str	r1, [r0, #24]
}
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d136      	bne.n	800322a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031bc:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c8:	d008      	beq.n	80031dc <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031ca:	4a3b      	ldr	r2, [pc, #236]	; (80032b8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80031cc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80031d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80031d8:	2000      	movs	r0, #0
 80031da:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031dc:	4a36      	ldr	r2, [pc, #216]	; (80032b8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80031de:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80031e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ea:	6813      	ldr	r3, [r2, #0]
 80031ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031f4:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031f6:	4b31      	ldr	r3, [pc, #196]	; (80032bc <HAL_PWREx_ControlVoltageScaling+0x104>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2232      	movs	r2, #50	; 0x32
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	4a2f      	ldr	r2, [pc, #188]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8003202:	fba2 2303 	umull	r2, r3, r2, r3
 8003206:	0c9b      	lsrs	r3, r3, #18
 8003208:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320a:	e000      	b.n	800320e <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 800320c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320e:	4a2a      	ldr	r2, [pc, #168]	; (80032b8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003210:	6952      	ldr	r2, [r2, #20]
 8003212:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003216:	d001      	beq.n	800321c <HAL_PWREx_ControlVoltageScaling+0x64>
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f7      	bne.n	800320c <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800321c:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003224:	d144      	bne.n	80032b0 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8003226:	2000      	movs	r0, #0
 8003228:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800322a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800322e:	d008      	beq.n	8003242 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003230:	4a21      	ldr	r2, [pc, #132]	; (80032b8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003232:	6813      	ldr	r3, [r2, #0]
 8003234:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003238:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800323c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800323e:	2000      	movs	r0, #0
 8003240:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003242:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800324a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324e:	d008      	beq.n	8003262 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003250:	4a19      	ldr	r2, [pc, #100]	; (80032b8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003252:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 800325e:	2000      	movs	r0, #0
 8003260:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003262:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003264:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800326c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003270:	6813      	ldr	r3, [r2, #0]
 8003272:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800327a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_PWREx_ControlVoltageScaling+0x104>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2232      	movs	r2, #50	; 0x32
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	4a0e      	ldr	r2, [pc, #56]	; (80032c0 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	0c9b      	lsrs	r3, r3, #18
 800328e:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003290:	e000      	b.n	8003294 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8003292:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003294:	4a08      	ldr	r2, [pc, #32]	; (80032b8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8003296:	6952      	ldr	r2, [r2, #20]
 8003298:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800329c:	d001      	beq.n	80032a2 <HAL_PWREx_ControlVoltageScaling+0xea>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f7      	bne.n	8003292 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <HAL_PWREx_ControlVoltageScaling+0x100>)
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80032aa:	d103      	bne.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 80032ac:	2000      	movs	r0, #0
 80032ae:	4770      	bx	lr
        return HAL_TIMEOUT;
 80032b0:	2003      	movs	r0, #3
 80032b2:	4770      	bx	lr
        return HAL_TIMEOUT;
 80032b4:	2003      	movs	r0, #3
}
 80032b6:	4770      	bx	lr
 80032b8:	40007000 	.word	0x40007000
 80032bc:	20000004 	.word	0x20000004
 80032c0:	431bde83 	.word	0x431bde83

080032c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80032c4:	4a02      	ldr	r2, [pc, #8]	; (80032d0 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80032c6:	6893      	ldr	r3, [r2, #8]
 80032c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032cc:	6093      	str	r3, [r2, #8]
}
 80032ce:	4770      	bx	lr
 80032d0:	40007000 	.word	0x40007000

080032d4 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032dc:	68d8      	ldr	r0, [r3, #12]
 80032de:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80032e2:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 80032e4:	2a03      	cmp	r2, #3
 80032e6:	d011      	beq.n	800330c <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032e8:	480e      	ldr	r0, [pc, #56]	; (8003324 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 80032ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80032ee:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 80032f6:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003302:	3301      	adds	r3, #1
 8003304:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8003306:	fbb0 f0f3 	udiv	r0, r0, r3
 800330a:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800330c:	4806      	ldr	r0, [pc, #24]	; (8003328 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 800330e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003312:	4b03      	ldr	r3, [pc, #12]	; (8003320 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800331a:	fb03 f000 	mul.w	r0, r3, r0
    break;
 800331e:	e7ec      	b.n	80032fa <RCC_GetSysClockFreqFromPLLSource+0x26>
 8003320:	40021000 	.word	0x40021000
 8003324:	00f42400 	.word	0x00f42400
 8003328:	007a1200 	.word	0x007a1200

0800332c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800332c:	2800      	cmp	r0, #0
 800332e:	f000 824f 	beq.w	80037d0 <HAL_RCC_OscConfig+0x4a4>
{
 8003332:	b570      	push	{r4, r5, r6, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003338:	6803      	ldr	r3, [r0, #0]
 800333a:	f013 0f01 	tst.w	r3, #1
 800333e:	d037      	beq.n	80033b0 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003340:	4aa4      	ldr	r2, [pc, #656]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 8003342:	6893      	ldr	r3, [r2, #8]
 8003344:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003348:	68d2      	ldr	r2, [r2, #12]
 800334a:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800334e:	2b0c      	cmp	r3, #12
 8003350:	d023      	beq.n	800339a <HAL_RCC_OscConfig+0x6e>
 8003352:	2b08      	cmp	r3, #8
 8003354:	d023      	beq.n	800339e <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003356:	6863      	ldr	r3, [r4, #4]
 8003358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800335c:	d04e      	beq.n	80033fc <HAL_RCC_OscConfig+0xd0>
 800335e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003362:	d051      	beq.n	8003408 <HAL_RCC_OscConfig+0xdc>
 8003364:	4b9b      	ldr	r3, [pc, #620]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003374:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003376:	6863      	ldr	r3, [r4, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d052      	beq.n	8003422 <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 800337c:	f7fe fc28 	bl	8001bd0 <HAL_GetTick>
 8003380:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003382:	4b94      	ldr	r3, [pc, #592]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800338a:	d111      	bne.n	80033b0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800338c:	f7fe fc20 	bl	8001bd0 <HAL_GetTick>
 8003390:	1b40      	subs	r0, r0, r5
 8003392:	2864      	cmp	r0, #100	; 0x64
 8003394:	d9f5      	bls.n	8003382 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8003396:	2003      	movs	r0, #3
 8003398:	e223      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800339a:	2a03      	cmp	r2, #3
 800339c:	d1d9      	bne.n	8003352 <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339e:	4b8d      	ldr	r3, [pc, #564]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80033a6:	d003      	beq.n	80033b0 <HAL_RCC_OscConfig+0x84>
 80033a8:	6863      	ldr	r3, [r4, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 8212 	beq.w	80037d4 <HAL_RCC_OscConfig+0x4a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	f013 0f02 	tst.w	r3, #2
 80033b6:	d05d      	beq.n	8003474 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b8:	4a86      	ldr	r2, [pc, #536]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 80033ba:	6893      	ldr	r3, [r2, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c0:	68d2      	ldr	r2, [r2, #12]
 80033c2:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	d03a      	beq.n	8003440 <HAL_RCC_OscConfig+0x114>
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d03a      	beq.n	8003444 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ce:	68e3      	ldr	r3, [r4, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d075      	beq.n	80034c0 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 80033d4:	4a7f      	ldr	r2, [pc, #508]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 80033d6:	6813      	ldr	r3, [r2, #0]
 80033d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80033de:	f7fe fbf7 	bl	8001bd0 <HAL_GetTick>
 80033e2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e4:	4b7b      	ldr	r3, [pc, #492]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80033ec:	d15f      	bne.n	80034ae <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ee:	f7fe fbef 	bl	8001bd0 <HAL_GetTick>
 80033f2:	1b40      	subs	r0, r0, r5
 80033f4:	2802      	cmp	r0, #2
 80033f6:	d9f5      	bls.n	80033e4 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 80033f8:	2003      	movs	r0, #3
 80033fa:	e1f2      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033fc:	4a75      	ldr	r2, [pc, #468]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 80033fe:	6813      	ldr	r3, [r2, #0]
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e7b6      	b.n	8003376 <HAL_RCC_OscConfig+0x4a>
 8003408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800340c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e7a9      	b.n	8003376 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8003422:	f7fe fbd5 	bl	8001bd0 <HAL_GetTick>
 8003426:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003428:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003430:	d0be      	beq.n	80033b0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003432:	f7fe fbcd 	bl	8001bd0 <HAL_GetTick>
 8003436:	1b40      	subs	r0, r0, r5
 8003438:	2864      	cmp	r0, #100	; 0x64
 800343a:	d9f5      	bls.n	8003428 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 800343c:	2003      	movs	r0, #3
 800343e:	e1d0      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003440:	2a02      	cmp	r2, #2
 8003442:	d1c2      	bne.n	80033ca <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003444:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800344c:	d003      	beq.n	8003456 <HAL_RCC_OscConfig+0x12a>
 800344e:	68e3      	ldr	r3, [r4, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 81c1 	beq.w	80037d8 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003456:	4a5f      	ldr	r2, [pc, #380]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 8003458:	6853      	ldr	r3, [r2, #4]
 800345a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800345e:	6921      	ldr	r1, [r4, #16]
 8003460:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003464:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003466:	4b5c      	ldr	r3, [pc, #368]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	f7fe fb6d 	bl	8001b48 <HAL_InitTick>
 800346e:	2800      	cmp	r0, #0
 8003470:	f040 81b4 	bne.w	80037dc <HAL_RCC_OscConfig+0x4b0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	f013 0f08 	tst.w	r3, #8
 800347a:	d04c      	beq.n	8003516 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800347c:	6963      	ldr	r3, [r4, #20]
 800347e:	b39b      	cbz	r3, 80034e8 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 8003480:	4a54      	ldr	r2, [pc, #336]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 8003482:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003486:	f043 0301 	orr.w	r3, r3, #1
 800348a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800348e:	f7fe fb9f 	bl	8001bd0 <HAL_GetTick>
 8003492:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003494:	4b4f      	ldr	r3, [pc, #316]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 8003496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349a:	f013 0f02 	tst.w	r3, #2
 800349e:	d13a      	bne.n	8003516 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a0:	f7fe fb96 	bl	8001bd0 <HAL_GetTick>
 80034a4:	1b40      	subs	r0, r0, r5
 80034a6:	2802      	cmp	r0, #2
 80034a8:	d9f4      	bls.n	8003494 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 80034aa:	2003      	movs	r0, #3
 80034ac:	e199      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ae:	4a49      	ldr	r2, [pc, #292]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 80034b0:	6853      	ldr	r3, [r2, #4]
 80034b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80034b6:	6921      	ldr	r1, [r4, #16]
 80034b8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80034bc:	6053      	str	r3, [r2, #4]
 80034be:	e7d9      	b.n	8003474 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 80034c0:	4a44      	ldr	r2, [pc, #272]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 80034c2:	6813      	ldr	r3, [r2, #0]
 80034c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80034ca:	f7fe fb81 	bl	8001bd0 <HAL_GetTick>
 80034ce:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034d0:	4b40      	ldr	r3, [pc, #256]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80034d8:	d0cc      	beq.n	8003474 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034da:	f7fe fb79 	bl	8001bd0 <HAL_GetTick>
 80034de:	1b40      	subs	r0, r0, r5
 80034e0:	2802      	cmp	r0, #2
 80034e2:	d9f5      	bls.n	80034d0 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 80034e4:	2003      	movs	r0, #3
 80034e6:	e17c      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_LSI_DISABLE();
 80034e8:	4a3a      	ldr	r2, [pc, #232]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 80034ea:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80034f6:	f7fe fb6b 	bl	8001bd0 <HAL_GetTick>
 80034fa:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034fc:	4b35      	ldr	r3, [pc, #212]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 80034fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003502:	f013 0f02 	tst.w	r3, #2
 8003506:	d006      	beq.n	8003516 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003508:	f7fe fb62 	bl	8001bd0 <HAL_GetTick>
 800350c:	1b40      	subs	r0, r0, r5
 800350e:	2802      	cmp	r0, #2
 8003510:	d9f4      	bls.n	80034fc <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 8003512:	2003      	movs	r0, #3
 8003514:	e165      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	f013 0f04 	tst.w	r3, #4
 800351c:	f000 8081 	beq.w	8003622 <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003520:	4b2c      	ldr	r3, [pc, #176]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003528:	d136      	bne.n	8003598 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 800352c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800352e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003532:	659a      	str	r2, [r3, #88]	; 0x58
 8003534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800353e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003540:	4b26      	ldr	r3, [pc, #152]	; (80035dc <HAL_RCC_OscConfig+0x2b0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003548:	d028      	beq.n	800359c <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800354a:	68a3      	ldr	r3, [r4, #8]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d039      	beq.n	80035c4 <HAL_RCC_OscConfig+0x298>
 8003550:	2b05      	cmp	r3, #5
 8003552:	d045      	beq.n	80035e0 <HAL_RCC_OscConfig+0x2b4>
 8003554:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 8003556:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003562:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003566:	f022 0204 	bic.w	r2, r2, #4
 800356a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800356e:	68a3      	ldr	r3, [r4, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d043      	beq.n	80035fc <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 8003574:	f7fe fb2c 	bl	8001bd0 <HAL_GetTick>
 8003578:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357a:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f013 0f02 	tst.w	r3, #2
 8003584:	d14c      	bne.n	8003620 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fe fb23 	bl	8001bd0 <HAL_GetTick>
 800358a:	1b80      	subs	r0, r0, r6
 800358c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003590:	4298      	cmp	r0, r3
 8003592:	d9f2      	bls.n	800357a <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8003594:	2003      	movs	r0, #3
 8003596:	e124      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
    FlagStatus       pwrclkchanged = RESET;
 8003598:	2500      	movs	r5, #0
 800359a:	e7d1      	b.n	8003540 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359c:	4a0f      	ldr	r2, [pc, #60]	; (80035dc <HAL_RCC_OscConfig+0x2b0>)
 800359e:	6813      	ldr	r3, [r2, #0]
 80035a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80035a6:	f7fe fb13 	bl	8001bd0 <HAL_GetTick>
 80035aa:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_RCC_OscConfig+0x2b0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80035b4:	d1c9      	bne.n	800354a <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b6:	f7fe fb0b 	bl	8001bd0 <HAL_GetTick>
 80035ba:	1b80      	subs	r0, r0, r6
 80035bc:	2802      	cmp	r0, #2
 80035be:	d9f5      	bls.n	80035ac <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 80035c0:	2003      	movs	r0, #3
 80035c2:	e10e      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c4:	4a03      	ldr	r2, [pc, #12]	; (80035d4 <HAL_RCC_OscConfig+0x2a8>)
 80035c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035d2:	e7cc      	b.n	800356e <HAL_RCC_OscConfig+0x242>
 80035d4:	40021000 	.word	0x40021000
 80035d8:	2000000c 	.word	0x2000000c
 80035dc:	40007000 	.word	0x40007000
 80035e0:	4b88      	ldr	r3, [pc, #544]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 80035e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80035e6:	f042 0204 	orr.w	r2, r2, #4
 80035ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80035ee:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80035fa:	e7b8      	b.n	800356e <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 80035fc:	f7fe fae8 	bl	8001bd0 <HAL_GetTick>
 8003600:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003602:	4b80      	ldr	r3, [pc, #512]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	f013 0f02 	tst.w	r3, #2
 800360c:	d008      	beq.n	8003620 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fe fadf 	bl	8001bd0 <HAL_GetTick>
 8003612:	1b80      	subs	r0, r0, r6
 8003614:	f241 3388 	movw	r3, #5000	; 0x1388
 8003618:	4298      	cmp	r0, r3
 800361a:	d9f2      	bls.n	8003602 <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 800361c:	2003      	movs	r0, #3
 800361e:	e0e0      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
    if (pwrclkchanged == SET)
 8003620:	b9e5      	cbnz	r5, 800365c <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	f013 0f20 	tst.w	r3, #32
 8003628:	d035      	beq.n	8003696 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800362a:	69a3      	ldr	r3, [r4, #24]
 800362c:	b1e3      	cbz	r3, 8003668 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 800362e:	4a75      	ldr	r2, [pc, #468]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 8003630:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800363c:	f7fe fac8 	bl	8001bd0 <HAL_GetTick>
 8003640:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003642:	4b70      	ldr	r3, [pc, #448]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 8003644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003648:	f013 0f02 	tst.w	r3, #2
 800364c:	d123      	bne.n	8003696 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800364e:	f7fe fabf 	bl	8001bd0 <HAL_GetTick>
 8003652:	1b40      	subs	r0, r0, r5
 8003654:	2802      	cmp	r0, #2
 8003656:	d9f4      	bls.n	8003642 <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8003658:	2003      	movs	r0, #3
 800365a:	e0c2      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800365c:	4a69      	ldr	r2, [pc, #420]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 800365e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003664:	6593      	str	r3, [r2, #88]	; 0x58
 8003666:	e7dc      	b.n	8003622 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8003668:	4a66      	ldr	r2, [pc, #408]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 800366a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003676:	f7fe faab 	bl	8001bd0 <HAL_GetTick>
 800367a:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800367c:	4b61      	ldr	r3, [pc, #388]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 800367e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003682:	f013 0f02 	tst.w	r3, #2
 8003686:	d006      	beq.n	8003696 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003688:	f7fe faa2 	bl	8001bd0 <HAL_GetTick>
 800368c:	1b40      	subs	r0, r0, r5
 800368e:	2802      	cmp	r0, #2
 8003690:	d9f4      	bls.n	800367c <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 8003692:	2003      	movs	r0, #3
 8003694:	e0a5      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003696:	69e3      	ldr	r3, [r4, #28]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80a1 	beq.w	80037e0 <HAL_RCC_OscConfig+0x4b4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800369e:	4a59      	ldr	r2, [pc, #356]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	f002 020c 	and.w	r2, r2, #12
 80036a6:	2a0c      	cmp	r2, #12
 80036a8:	d064      	beq.n	8003774 <HAL_RCC_OscConfig+0x448>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d013      	beq.n	80036d6 <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4a55      	ldr	r2, [pc, #340]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 80036b0:	6813      	ldr	r3, [r2, #0]
 80036b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80036b8:	f7fe fa8a 	bl	8001bd0 <HAL_GetTick>
 80036bc:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036be:	4b51      	ldr	r3, [pc, #324]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80036c6:	d04e      	beq.n	8003766 <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fe fa82 	bl	8001bd0 <HAL_GetTick>
 80036cc:	1b00      	subs	r0, r0, r4
 80036ce:	2802      	cmp	r0, #2
 80036d0:	d9f5      	bls.n	80036be <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 80036d2:	2003      	movs	r0, #3
 80036d4:	e085      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_DISABLE();
 80036d6:	4a4b      	ldr	r2, [pc, #300]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 80036d8:	6813      	ldr	r3, [r2, #0]
 80036da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036de:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80036e0:	f7fe fa76 	bl	8001bd0 <HAL_GetTick>
 80036e4:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e6:	4b47      	ldr	r3, [pc, #284]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80036ee:	d006      	beq.n	80036fe <HAL_RCC_OscConfig+0x3d2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f0:	f7fe fa6e 	bl	8001bd0 <HAL_GetTick>
 80036f4:	1b40      	subs	r0, r0, r5
 80036f6:	2802      	cmp	r0, #2
 80036f8:	d9f5      	bls.n	80036e6 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 80036fa:	2003      	movs	r0, #3
 80036fc:	e071      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036fe:	4a41      	ldr	r2, [pc, #260]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 8003700:	68d3      	ldr	r3, [r2, #12]
 8003702:	4941      	ldr	r1, [pc, #260]	; (8003808 <HAL_RCC_OscConfig+0x4dc>)
 8003704:	4019      	ands	r1, r3
 8003706:	6a23      	ldr	r3, [r4, #32]
 8003708:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800370a:	3801      	subs	r0, #1
 800370c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003710:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003712:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003716:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003718:	0840      	lsrs	r0, r0, #1
 800371a:	3801      	subs	r0, #1
 800371c:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8003720:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003722:	0840      	lsrs	r0, r0, #1
 8003724:	3801      	subs	r0, #1
 8003726:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800372a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800372c:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8003730:	430b      	orrs	r3, r1
 8003732:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8003734:	6813      	ldr	r3, [r2, #0]
 8003736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800373a:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800373c:	68d3      	ldr	r3, [r2, #12]
 800373e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003742:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003744:	f7fe fa44 	bl	8001bd0 <HAL_GetTick>
 8003748:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374a:	4b2e      	ldr	r3, [pc, #184]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x436>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003754:	f7fe fa3c 	bl	8001bd0 <HAL_GetTick>
 8003758:	1b00      	subs	r0, r0, r4
 800375a:	2802      	cmp	r0, #2
 800375c:	d9f5      	bls.n	800374a <HAL_RCC_OscConfig+0x41e>
            return HAL_TIMEOUT;
 800375e:	2003      	movs	r0, #3
 8003760:	e03f      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
  return HAL_OK;
 8003762:	2000      	movs	r0, #0
 8003764:	e03d      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003766:	4a27      	ldr	r2, [pc, #156]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 8003768:	68d1      	ldr	r1, [r2, #12]
 800376a:	4b28      	ldr	r3, [pc, #160]	; (800380c <HAL_RCC_OscConfig+0x4e0>)
 800376c:	400b      	ands	r3, r1
 800376e:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8003770:	2000      	movs	r0, #0
 8003772:	e036      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003774:	2b01      	cmp	r3, #1
 8003776:	d036      	beq.n	80037e6 <HAL_RCC_OscConfig+0x4ba>
      temp_pllckcfg = RCC->PLLCFGR;
 8003778:	4b22      	ldr	r3, [pc, #136]	; (8003804 <HAL_RCC_OscConfig+0x4d8>)
 800377a:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377c:	f003 0103 	and.w	r1, r3, #3
 8003780:	6a22      	ldr	r2, [r4, #32]
 8003782:	4291      	cmp	r1, r2
 8003784:	d131      	bne.n	80037ea <HAL_RCC_OscConfig+0x4be>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003786:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800378a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800378c:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378e:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003792:	d12c      	bne.n	80037ee <HAL_RCC_OscConfig+0x4c2>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003794:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003798:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800379a:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800379e:	d128      	bne.n	80037f2 <HAL_RCC_OscConfig+0x4c6>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80037a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037a6:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80037aa:	d124      	bne.n	80037f6 <HAL_RCC_OscConfig+0x4ca>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ac:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80037b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80037b2:	0852      	lsrs	r2, r2, #1
 80037b4:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037b6:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80037ba:	d11e      	bne.n	80037fa <HAL_RCC_OscConfig+0x4ce>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037bc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80037c0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80037c2:	0852      	lsrs	r2, r2, #1
 80037c4:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c6:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80037ca:	d118      	bne.n	80037fe <HAL_RCC_OscConfig+0x4d2>
  return HAL_OK;
 80037cc:	2000      	movs	r0, #0
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
    return HAL_ERROR;
 80037d0:	2001      	movs	r0, #1
}
 80037d2:	4770      	bx	lr
        return HAL_ERROR;
 80037d4:	2001      	movs	r0, #1
 80037d6:	e004      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
        return HAL_ERROR;
 80037d8:	2001      	movs	r0, #1
 80037da:	e002      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
          return HAL_ERROR;
 80037dc:	2001      	movs	r0, #1
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
  return HAL_OK;
 80037e0:	2000      	movs	r0, #0
}
 80037e2:	b002      	add	sp, #8
 80037e4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80037e6:	2001      	movs	r0, #1
 80037e8:	e7fb      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
        return HAL_ERROR;
 80037ea:	2001      	movs	r0, #1
 80037ec:	e7f9      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
 80037ee:	2001      	movs	r0, #1
 80037f0:	e7f7      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
 80037f2:	2001      	movs	r0, #1
 80037f4:	e7f5      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
 80037f6:	2001      	movs	r0, #1
 80037f8:	e7f3      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
 80037fa:	2001      	movs	r0, #1
 80037fc:	e7f1      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
 80037fe:	2001      	movs	r0, #1
 8003800:	e7ef      	b.n	80037e2 <HAL_RCC_OscConfig+0x4b6>
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	019f800c 	.word	0x019f800c
 800380c:	feeefffc 	.word	0xfeeefffc

08003810 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003810:	4b1e      	ldr	r3, [pc, #120]	; (800388c <HAL_RCC_GetSysClockFreq+0x7c>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b04      	cmp	r3, #4
 800381a:	d033      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800381c:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_RCC_GetSysClockFreq+0x7c>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b08      	cmp	r3, #8
 8003826:	d02f      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003828:	4b18      	ldr	r3, [pc, #96]	; (800388c <HAL_RCC_GetSysClockFreq+0x7c>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b0c      	cmp	r3, #12
 8003832:	d001      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8003834:	2000      	movs	r0, #0
}
 8003836:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003838:	4b14      	ldr	r3, [pc, #80]	; (800388c <HAL_RCC_GetSysClockFreq+0x7c>)
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003840:	68d8      	ldr	r0, [r3, #12]
 8003842:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003846:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 8003848:	2a03      	cmp	r2, #3
 800384a:	d011      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800384c:	4810      	ldr	r0, [pc, #64]	; (8003890 <HAL_RCC_GetSysClockFreq+0x80>)
 800384e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003852:	4b0e      	ldr	r3, [pc, #56]	; (800388c <HAL_RCC_GetSysClockFreq+0x7c>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800385a:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_GetSysClockFreq+0x7c>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003866:	3301      	adds	r3, #1
 8003868:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800386a:	fbb0 f0f3 	udiv	r0, r0, r3
 800386e:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003870:	4808      	ldr	r0, [pc, #32]	; (8003894 <HAL_RCC_GetSysClockFreq+0x84>)
 8003872:	fbb0 f0f3 	udiv	r0, r0, r3
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_GetSysClockFreq+0x7c>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800387e:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8003882:	e7ec      	b.n	800385e <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <HAL_RCC_GetSysClockFreq+0x80>)
 8003886:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8003888:	4802      	ldr	r0, [pc, #8]	; (8003894 <HAL_RCC_GetSysClockFreq+0x84>)
 800388a:	4770      	bx	lr
 800388c:	40021000 	.word	0x40021000
 8003890:	00f42400 	.word	0x00f42400
 8003894:	007a1200 	.word	0x007a1200

08003898 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003898:	2800      	cmp	r0, #0
 800389a:	f000 80e6 	beq.w	8003a6a <HAL_RCC_ClockConfig+0x1d2>
{
 800389e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a0:	460c      	mov	r4, r1
 80038a2:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a4:	4b74      	ldr	r3, [pc, #464]	; (8003a78 <HAL_RCC_ClockConfig+0x1e0>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	428b      	cmp	r3, r1
 80038ae:	d20b      	bcs.n	80038c8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b0:	4a71      	ldr	r2, [pc, #452]	; (8003a78 <HAL_RCC_ClockConfig+0x1e0>)
 80038b2:	6813      	ldr	r3, [r2, #0]
 80038b4:	f023 030f 	bic.w	r3, r3, #15
 80038b8:	430b      	orrs	r3, r1
 80038ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038bc:	6813      	ldr	r3, [r2, #0]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	428b      	cmp	r3, r1
 80038c4:	f040 80d3 	bne.w	8003a6e <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c8:	682e      	ldr	r6, [r5, #0]
 80038ca:	f016 0601 	ands.w	r6, r6, #1
 80038ce:	d05f      	beq.n	8003990 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d0:	686b      	ldr	r3, [r5, #4]
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d02f      	beq.n	8003936 <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d04d      	beq.n	8003976 <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038da:	4b68      	ldr	r3, [pc, #416]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80038e2:	f000 80c6 	beq.w	8003a72 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80038e6:	f7ff ff93 	bl	8003810 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80038ea:	4b65      	ldr	r3, [pc, #404]	; (8003a80 <HAL_RCC_ClockConfig+0x1e8>)
 80038ec:	4298      	cmp	r0, r3
 80038ee:	d94d      	bls.n	800398c <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038f0:	4a62      	ldr	r2, [pc, #392]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 80038f2:	6893      	ldr	r3, [r2, #8]
 80038f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80038fe:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003900:	4a5e      	ldr	r2, [pc, #376]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 8003902:	6893      	ldr	r3, [r2, #8]
 8003904:	f023 0303 	bic.w	r3, r3, #3
 8003908:	6869      	ldr	r1, [r5, #4]
 800390a:	430b      	orrs	r3, r1
 800390c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800390e:	f7fe f95f 	bl	8001bd0 <HAL_GetTick>
 8003912:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003914:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 030c 	and.w	r3, r3, #12
 800391c:	686a      	ldr	r2, [r5, #4]
 800391e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003922:	d035      	beq.n	8003990 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003924:	f7fe f954 	bl	8001bd0 <HAL_GetTick>
 8003928:	1bc0      	subs	r0, r0, r7
 800392a:	f241 3388 	movw	r3, #5000	; 0x1388
 800392e:	4298      	cmp	r0, r3
 8003930:	d9f0      	bls.n	8003914 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8003932:	2003      	movs	r0, #3
 8003934:	e078      	b.n	8003a28 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003936:	4b51      	ldr	r3, [pc, #324]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8003940:	2001      	movs	r0, #1
 8003942:	e071      	b.n	8003a28 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003944:	f7ff fcc6 	bl	80032d4 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8003948:	4b4d      	ldr	r3, [pc, #308]	; (8003a80 <HAL_RCC_ClockConfig+0x1e8>)
 800394a:	4298      	cmp	r0, r3
 800394c:	d91a      	bls.n	8003984 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800394e:	4b4b      	ldr	r3, [pc, #300]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8003956:	d005      	beq.n	8003964 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003958:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800395a:	f016 0602 	ands.w	r6, r6, #2
 800395e:	d0cf      	beq.n	8003900 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003960:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003962:	b98b      	cbnz	r3, 8003988 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003964:	4a45      	ldr	r2, [pc, #276]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 8003966:	6893      	ldr	r3, [r2, #8]
 8003968:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003970:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003972:	2680      	movs	r6, #128	; 0x80
 8003974:	e7c4      	b.n	8003900 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003976:	4b41      	ldr	r3, [pc, #260]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800397e:	d1b2      	bne.n	80038e6 <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8003980:	2001      	movs	r0, #1
 8003982:	e051      	b.n	8003a28 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003984:	2600      	movs	r6, #0
 8003986:	e7bb      	b.n	8003900 <HAL_RCC_ClockConfig+0x68>
 8003988:	2600      	movs	r6, #0
 800398a:	e7b9      	b.n	8003900 <HAL_RCC_ClockConfig+0x68>
 800398c:	2600      	movs	r6, #0
 800398e:	e7b7      	b.n	8003900 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	f013 0f02 	tst.w	r3, #2
 8003996:	d048      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003998:	f013 0f04 	tst.w	r3, #4
 800399c:	d004      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800399e:	4a37      	ldr	r2, [pc, #220]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 80039a0:	6893      	ldr	r3, [r2, #8]
 80039a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039a6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a8:	682b      	ldr	r3, [r5, #0]
 80039aa:	f013 0f08 	tst.w	r3, #8
 80039ae:	d006      	beq.n	80039be <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80039b0:	4a32      	ldr	r2, [pc, #200]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 80039b2:	6893      	ldr	r3, [r2, #8]
 80039b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039b8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039bc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039be:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 80039c0:	6893      	ldr	r3, [r2, #8]
 80039c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039c6:	68a9      	ldr	r1, [r5, #8]
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039cc:	4b2a      	ldr	r3, [pc, #168]	; (8003a78 <HAL_RCC_ClockConfig+0x1e0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	42a3      	cmp	r3, r4
 80039d6:	d830      	bhi.n	8003a3a <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d8:	682b      	ldr	r3, [r5, #0]
 80039da:	f013 0f04 	tst.w	r3, #4
 80039de:	d006      	beq.n	80039ee <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e0:	4a26      	ldr	r2, [pc, #152]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 80039e2:	6893      	ldr	r3, [r2, #8]
 80039e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80039e8:	68e9      	ldr	r1, [r5, #12]
 80039ea:	430b      	orrs	r3, r1
 80039ec:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ee:	682b      	ldr	r3, [r5, #0]
 80039f0:	f013 0f08 	tst.w	r3, #8
 80039f4:	d007      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f6:	4a21      	ldr	r2, [pc, #132]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 80039f8:	6893      	ldr	r3, [r2, #8]
 80039fa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80039fe:	6929      	ldr	r1, [r5, #16]
 8003a00:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003a04:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a06:	f7ff ff03 	bl	8003810 <HAL_RCC_GetSysClockFreq>
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003a12:	4a1c      	ldr	r2, [pc, #112]	; (8003a84 <HAL_RCC_ClockConfig+0x1ec>)
 8003a14:	5cd3      	ldrb	r3, [r2, r3]
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	40d8      	lsrs	r0, r3
 8003a1c:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <HAL_RCC_ClockConfig+0x1f0>)
 8003a1e:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8003a20:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <HAL_RCC_ClockConfig+0x1f4>)
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	f7fe f890 	bl	8001b48 <HAL_InitTick>
}
 8003a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 8003a2a:	2e80      	cmp	r6, #128	; 0x80
 8003a2c:	d1ce      	bne.n	80039cc <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a2e:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <HAL_RCC_ClockConfig+0x1e4>)
 8003a30:	6893      	ldr	r3, [r2, #8]
 8003a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a36:	6093      	str	r3, [r2, #8]
 8003a38:	e7c8      	b.n	80039cc <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4a0f      	ldr	r2, [pc, #60]	; (8003a78 <HAL_RCC_ClockConfig+0x1e0>)
 8003a3c:	6813      	ldr	r3, [r2, #0]
 8003a3e:	f023 030f 	bic.w	r3, r3, #15
 8003a42:	4323      	orrs	r3, r4
 8003a44:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003a46:	f7fe f8c3 	bl	8001bd0 <HAL_GetTick>
 8003a4a:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_RCC_ClockConfig+0x1e0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	42a3      	cmp	r3, r4
 8003a56:	d0bf      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a58:	f7fe f8ba 	bl	8001bd0 <HAL_GetTick>
 8003a5c:	1b80      	subs	r0, r0, r6
 8003a5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a62:	4298      	cmp	r0, r3
 8003a64:	d9f2      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8003a66:	2003      	movs	r0, #3
 8003a68:	e7de      	b.n	8003a28 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 8003a6a:	2001      	movs	r0, #1
}
 8003a6c:	4770      	bx	lr
      return HAL_ERROR;
 8003a6e:	2001      	movs	r0, #1
 8003a70:	e7da      	b.n	8003a28 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8003a72:	2001      	movs	r0, #1
 8003a74:	e7d8      	b.n	8003a28 <HAL_RCC_ClockConfig+0x190>
 8003a76:	bf00      	nop
 8003a78:	40022000 	.word	0x40022000
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	04c4b400 	.word	0x04c4b400
 8003a84:	08005b10 	.word	0x08005b10
 8003a88:	20000004 	.word	0x20000004
 8003a8c:	2000000c 	.word	0x2000000c

08003a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a92:	b083      	sub	sp, #12
 8003a94:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a96:	6803      	ldr	r3, [r0, #0]
 8003a98:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003a9c:	d069      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9e:	4bae      	ldr	r3, [pc, #696]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003aa6:	d11e      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa8:	4bab      	ldr	r3, [pc, #684]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003aaa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003aac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ab0:	659a      	str	r2, [r3, #88]	; 0x58
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003abc:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003abe:	4aa7      	ldr	r2, [pc, #668]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ac0:	6813      	ldr	r3, [r2, #0]
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ac8:	f7fe f882 	bl	8001bd0 <HAL_GetTick>
 8003acc:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ace:	4ba3      	ldr	r3, [pc, #652]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ad6:	d108      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad8:	f7fe f87a 	bl	8001bd0 <HAL_GetTick>
 8003adc:	1b40      	subs	r0, r0, r5
 8003ade:	2802      	cmp	r0, #2
 8003ae0:	d9f5      	bls.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 8003ae2:	2503      	movs	r5, #3
 8003ae4:	e002      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 8003ae6:	2600      	movs	r6, #0
 8003ae8:	e7e9      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aea:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 8003aec:	bb45      	cbnz	r5, 8003b40 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003aee:	4b9a      	ldr	r3, [pc, #616]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003af4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003af8:	d015      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8003afa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d012      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b00:	4a95      	ldr	r2, [pc, #596]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003b02:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b0a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8003b0e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003b12:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b16:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8003b1a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003b1e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b26:	f013 0f01 	tst.w	r3, #1
 8003b2a:	d110      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b2c:	b945      	cbnz	r5, 8003b40 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b2e:	4a8a      	ldr	r2, [pc, #552]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003b30:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b38:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b40:	b1c6      	cbz	r6, 8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b42:	4a85      	ldr	r2, [pc, #532]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003b44:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b4c:	e012      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 8003b4e:	f7fe f83f 	bl	8001bd0 <HAL_GetTick>
 8003b52:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b54:	4b80      	ldr	r3, [pc, #512]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f013 0f02 	tst.w	r3, #2
 8003b5e:	d1e5      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b60:	f7fe f836 	bl	8001bd0 <HAL_GetTick>
 8003b64:	1bc0      	subs	r0, r0, r7
 8003b66:	f241 3388 	movw	r3, #5000	; 0x1388
 8003b6a:	4298      	cmp	r0, r3
 8003b6c:	d9f2      	bls.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8003b6e:	2503      	movs	r5, #3
 8003b70:	e7dc      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b72:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	f013 0f01 	tst.w	r3, #1
 8003b7a:	d008      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b7c:	4a76      	ldr	r2, [pc, #472]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003b7e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003b82:	f023 0303 	bic.w	r3, r3, #3
 8003b86:	6861      	ldr	r1, [r4, #4]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	f013 0f02 	tst.w	r3, #2
 8003b94:	d008      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b96:	4a70      	ldr	r2, [pc, #448]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003b98:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003b9c:	f023 030c 	bic.w	r3, r3, #12
 8003ba0:	68a1      	ldr	r1, [r4, #8]
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	f013 0f04 	tst.w	r3, #4
 8003bae:	d008      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bb0:	4a69      	ldr	r2, [pc, #420]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003bb2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003bb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003bba:	68e1      	ldr	r1, [r4, #12]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	f013 0f08 	tst.w	r3, #8
 8003bc8:	d008      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bca:	4a63      	ldr	r2, [pc, #396]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003bcc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003bd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003bd4:	6921      	ldr	r1, [r4, #16]
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	f013 0f20 	tst.w	r3, #32
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003be4:	4a5c      	ldr	r2, [pc, #368]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003be6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003bea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003bee:	6961      	ldr	r1, [r4, #20]
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003bfc:	d008      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bfe:	4a56      	ldr	r2, [pc, #344]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003c00:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c08:	69a1      	ldr	r1, [r4, #24]
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003c16:	d008      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c18:	4a4f      	ldr	r2, [pc, #316]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003c1a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c1e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c22:	69e1      	ldr	r1, [r4, #28]
 8003c24:	430b      	orrs	r3, r1
 8003c26:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c30:	d008      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c32:	4a49      	ldr	r2, [pc, #292]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003c34:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c38:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c3c:	6a21      	ldr	r1, [r4, #32]
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c4c:	4a42      	ldr	r2, [pc, #264]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003c4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c52:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003c56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003c64:	d00c      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c66:	4a3c      	ldr	r2, [pc, #240]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003c68:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c6c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c70:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c72:	430b      	orrs	r3, r1
 8003c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7e:	d057      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003c86:	d00c      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c88:	4a33      	ldr	r2, [pc, #204]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003c8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003c8e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003c92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c94:	430b      	orrs	r3, r1
 8003c96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca0:	d04b      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003ca8:	d00c      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003caa:	4a2b      	ldr	r2, [pc, #172]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003cac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003cb0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003cb4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003cbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003cbe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc2:	d03f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003cca:	d00c      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ccc:	4a22      	ldr	r2, [pc, #136]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003cce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003cd2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003cd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ce4:	d033      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003cec:	d00c      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cee:	4a1a      	ldr	r2, [pc, #104]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003cf0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003cf4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003cf8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d06:	d02b      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003d0e:	d00c      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d10:	4a11      	ldr	r2, [pc, #68]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003d12:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003d16:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003d1a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d28:	d01f      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  }

#endif /* QUADSPI */

  return status;
}
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	b003      	add	sp, #12
 8003d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d30:	68d3      	ldr	r3, [r2, #12]
 8003d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d36:	60d3      	str	r3, [r2, #12]
 8003d38:	e7a2      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d3a:	68d3      	ldr	r3, [r2, #12]
 8003d3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d40:	60d3      	str	r3, [r2, #12]
 8003d42:	e7ae      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d44:	68d3      	ldr	r3, [r2, #12]
 8003d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d4a:	60d3      	str	r3, [r2, #12]
 8003d4c:	e7ba      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d4e:	68d3      	ldr	r3, [r2, #12]
 8003d50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d54:	60d3      	str	r3, [r2, #12]
 8003d56:	e7c6      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d60:	68d3      	ldr	r3, [r2, #12]
 8003d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d66:	60d3      	str	r3, [r2, #12]
 8003d68:	e7ce      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d6a:	68d3      	ldr	r3, [r2, #12]
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	60d3      	str	r3, [r2, #12]
 8003d72:	e7da      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x29a>

08003d74 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d06f      	beq.n	8003e58 <HAL_SPI_Init+0xe4>
{
 8003d78:	b510      	push	{r4, lr}
 8003d7a:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d7e:	b933      	cbnz	r3, 8003d8e <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d80:	6843      	ldr	r3, [r0, #4]
 8003d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d86:	d005      	beq.n	8003d94 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61c3      	str	r3, [r0, #28]
 8003d8c:	e002      	b.n	8003d94 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d92:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d98:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d052      	beq.n	8003e46 <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003da0:	2302      	movs	r3, #2
 8003da2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	6813      	ldr	r3, [r2, #0]
 8003daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dae:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003db0:	68e3      	ldr	r3, [r4, #12]
 8003db2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003db6:	d94c      	bls.n	8003e52 <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003db8:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003dba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003dbe:	d004      	beq.n	8003dca <HAL_SPI_Init+0x56>
 8003dc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003dc4:	d001      	beq.n	8003dca <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dca:	6863      	ldr	r3, [r4, #4]
 8003dcc:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003dd0:	68a1      	ldr	r1, [r4, #8]
 8003dd2:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	6921      	ldr	r1, [r4, #16]
 8003dda:	f001 0102 	and.w	r1, r1, #2
 8003dde:	430b      	orrs	r3, r1
 8003de0:	6961      	ldr	r1, [r4, #20]
 8003de2:	f001 0101 	and.w	r1, r1, #1
 8003de6:	430b      	orrs	r3, r1
 8003de8:	69a1      	ldr	r1, [r4, #24]
 8003dea:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003dee:	430b      	orrs	r3, r1
 8003df0:	69e1      	ldr	r1, [r4, #28]
 8003df2:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8003df6:	430b      	orrs	r3, r1
 8003df8:	6a21      	ldr	r1, [r4, #32]
 8003dfa:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003e02:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8003e06:	6820      	ldr	r0, [r4, #0]
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e0c:	8b63      	ldrh	r3, [r4, #26]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003e14:	f001 0110 	and.w	r1, r1, #16
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e1c:	f001 0108 	and.w	r1, r1, #8
 8003e20:	430b      	orrs	r3, r1
 8003e22:	68e1      	ldr	r1, [r4, #12]
 8003e24:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	6821      	ldr	r1, [r4, #0]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e30:	6822      	ldr	r2, [r4, #0]
 8003e32:	69d3      	ldr	r3, [r2, #28]
 8003e34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e38:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8003e44:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003e46:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f7fd fd82 	bl	8001954 <HAL_SPI_MspInit>
 8003e50:	e7a6      	b.n	8003da0 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e56:	e7b0      	b.n	8003dba <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003e58:	2001      	movs	r0, #1
}
 8003e5a:	4770      	bx	lr

08003e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e5c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e60:	6a02      	ldr	r2, [r0, #32]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e6a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e70:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e74:	680c      	ldr	r4, [r1, #0]
 8003e76:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e78:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e7c:	688c      	ldr	r4, [r1, #8]
 8003e7e:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e80:	4c1d      	ldr	r4, [pc, #116]	; (8003ef8 <TIM_OC1_SetConfig+0x9c>)
 8003e82:	42a0      	cmp	r0, r4
 8003e84:	d00f      	beq.n	8003ea6 <TIM_OC1_SetConfig+0x4a>
 8003e86:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003e8a:	42a0      	cmp	r0, r4
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_OC1_SetConfig+0x4a>
 8003e8e:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8003e92:	42a0      	cmp	r0, r4
 8003e94:	d007      	beq.n	8003ea6 <TIM_OC1_SetConfig+0x4a>
 8003e96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003e9a:	42a0      	cmp	r0, r4
 8003e9c:	d003      	beq.n	8003ea6 <TIM_OC1_SetConfig+0x4a>
 8003e9e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ea2:	42a0      	cmp	r0, r4
 8003ea4:	d105      	bne.n	8003eb2 <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ea6:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eaa:	68cc      	ldr	r4, [r1, #12]
 8003eac:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eae:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb2:	4c11      	ldr	r4, [pc, #68]	; (8003ef8 <TIM_OC1_SetConfig+0x9c>)
 8003eb4:	42a0      	cmp	r0, r4
 8003eb6:	d00f      	beq.n	8003ed8 <TIM_OC1_SetConfig+0x7c>
 8003eb8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003ebc:	42a0      	cmp	r0, r4
 8003ebe:	d00b      	beq.n	8003ed8 <TIM_OC1_SetConfig+0x7c>
 8003ec0:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8003ec4:	42a0      	cmp	r0, r4
 8003ec6:	d007      	beq.n	8003ed8 <TIM_OC1_SetConfig+0x7c>
 8003ec8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ecc:	42a0      	cmp	r0, r4
 8003ece:	d003      	beq.n	8003ed8 <TIM_OC1_SetConfig+0x7c>
 8003ed0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ed4:	42a0      	cmp	r0, r4
 8003ed6:	d107      	bne.n	8003ee8 <TIM_OC1_SetConfig+0x8c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ed8:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003edc:	694c      	ldr	r4, [r1, #20]
 8003ede:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ee2:	698d      	ldr	r5, [r1, #24]
 8003ee4:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eea:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eec:	684a      	ldr	r2, [r1, #4]
 8003eee:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef0:	6203      	str	r3, [r0, #32]
}
 8003ef2:	bc30      	pop	{r4, r5}
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40012c00 	.word	0x40012c00

08003efc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003efc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f00:	6a02      	ldr	r2, [r0, #32]
 8003f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f06:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f08:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f0a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f10:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f14:	680d      	ldr	r5, [r1, #0]
 8003f16:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f1c:	688d      	ldr	r5, [r1, #8]
 8003f1e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f22:	4d18      	ldr	r5, [pc, #96]	; (8003f84 <TIM_OC3_SetConfig+0x88>)
 8003f24:	42a8      	cmp	r0, r5
 8003f26:	d003      	beq.n	8003f30 <TIM_OC3_SetConfig+0x34>
 8003f28:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003f2c:	42a8      	cmp	r0, r5
 8003f2e:	d106      	bne.n	8003f3e <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f34:	68cd      	ldr	r5, [r1, #12]
 8003f36:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3e:	4d11      	ldr	r5, [pc, #68]	; (8003f84 <TIM_OC3_SetConfig+0x88>)
 8003f40:	42a8      	cmp	r0, r5
 8003f42:	d00f      	beq.n	8003f64 <TIM_OC3_SetConfig+0x68>
 8003f44:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003f48:	42a8      	cmp	r0, r5
 8003f4a:	d00b      	beq.n	8003f64 <TIM_OC3_SetConfig+0x68>
 8003f4c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003f50:	42a8      	cmp	r0, r5
 8003f52:	d007      	beq.n	8003f64 <TIM_OC3_SetConfig+0x68>
 8003f54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f58:	42a8      	cmp	r0, r5
 8003f5a:	d003      	beq.n	8003f64 <TIM_OC3_SetConfig+0x68>
 8003f5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f60:	42a8      	cmp	r0, r5
 8003f62:	d107      	bne.n	8003f74 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f64:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f68:	694c      	ldr	r4, [r1, #20]
 8003f6a:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f6e:	698c      	ldr	r4, [r1, #24]
 8003f70:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f74:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f76:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f78:	684a      	ldr	r2, [r1, #4]
 8003f7a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7c:	6203      	str	r3, [r0, #32]
}
 8003f7e:	bc30      	pop	{r4, r5}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40012c00 	.word	0x40012c00

08003f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f88:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f8c:	6a02      	ldr	r2, [r0, #32]
 8003f8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f92:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f94:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f96:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f98:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003f9c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa0:	680d      	ldr	r5, [r1, #0]
 8003fa2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003faa:	688d      	ldr	r5, [r1, #8]
 8003fac:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003fb0:	4d17      	ldr	r5, [pc, #92]	; (8004010 <TIM_OC4_SetConfig+0x88>)
 8003fb2:	42a8      	cmp	r0, r5
 8003fb4:	d003      	beq.n	8003fbe <TIM_OC4_SetConfig+0x36>
 8003fb6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003fba:	42a8      	cmp	r0, r5
 8003fbc:	d106      	bne.n	8003fcc <TIM_OC4_SetConfig+0x44>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003fbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003fc2:	68cd      	ldr	r5, [r1, #12]
 8003fc4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fcc:	4d10      	ldr	r5, [pc, #64]	; (8004010 <TIM_OC4_SetConfig+0x88>)
 8003fce:	42a8      	cmp	r0, r5
 8003fd0:	d00f      	beq.n	8003ff2 <TIM_OC4_SetConfig+0x6a>
 8003fd2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003fd6:	42a8      	cmp	r0, r5
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_OC4_SetConfig+0x6a>
 8003fda:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003fde:	42a8      	cmp	r0, r5
 8003fe0:	d007      	beq.n	8003ff2 <TIM_OC4_SetConfig+0x6a>
 8003fe2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fe6:	42a8      	cmp	r0, r5
 8003fe8:	d003      	beq.n	8003ff2 <TIM_OC4_SetConfig+0x6a>
 8003fea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fee:	42a8      	cmp	r0, r5
 8003ff0:	d107      	bne.n	8004002 <TIM_OC4_SetConfig+0x7a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003ff2:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ff6:	694c      	ldr	r4, [r1, #20]
 8003ff8:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003ffc:	698c      	ldr	r4, [r1, #24]
 8003ffe:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004002:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004004:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004006:	684a      	ldr	r2, [r1, #4]
 8004008:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400a:	6203      	str	r3, [r0, #32]
}
 800400c:	bc30      	pop	{r4, r5}
 800400e:	4770      	bx	lr
 8004010:	40012c00 	.word	0x40012c00

08004014 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004014:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004018:	6a02      	ldr	r2, [r0, #32]
 800401a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800401e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004022:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004024:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004028:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800402c:	680d      	ldr	r5, [r1, #0]
 800402e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004030:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004034:	688d      	ldr	r5, [r1, #8]
 8004036:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403a:	4d0f      	ldr	r5, [pc, #60]	; (8004078 <TIM_OC5_SetConfig+0x64>)
 800403c:	42a8      	cmp	r0, r5
 800403e:	d00f      	beq.n	8004060 <TIM_OC5_SetConfig+0x4c>
 8004040:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004044:	42a8      	cmp	r0, r5
 8004046:	d00b      	beq.n	8004060 <TIM_OC5_SetConfig+0x4c>
 8004048:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800404c:	42a8      	cmp	r0, r5
 800404e:	d007      	beq.n	8004060 <TIM_OC5_SetConfig+0x4c>
 8004050:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004054:	42a8      	cmp	r0, r5
 8004056:	d003      	beq.n	8004060 <TIM_OC5_SetConfig+0x4c>
 8004058:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800405c:	42a8      	cmp	r0, r5
 800405e:	d104      	bne.n	800406a <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004060:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004064:	694d      	ldr	r5, [r1, #20]
 8004066:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800406c:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800406e:	684a      	ldr	r2, [r1, #4]
 8004070:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004072:	6203      	str	r3, [r0, #32]
}
 8004074:	bc30      	pop	{r4, r5}
 8004076:	4770      	bx	lr
 8004078:	40012c00 	.word	0x40012c00

0800407c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004080:	6a02      	ldr	r2, [r0, #32]
 8004082:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004086:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004088:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800408a:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800408c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004090:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004094:	680d      	ldr	r5, [r1, #0]
 8004096:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800409a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800409e:	688d      	ldr	r5, [r1, #8]
 80040a0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a4:	4d0f      	ldr	r5, [pc, #60]	; (80040e4 <TIM_OC6_SetConfig+0x68>)
 80040a6:	42a8      	cmp	r0, r5
 80040a8:	d00f      	beq.n	80040ca <TIM_OC6_SetConfig+0x4e>
 80040aa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80040ae:	42a8      	cmp	r0, r5
 80040b0:	d00b      	beq.n	80040ca <TIM_OC6_SetConfig+0x4e>
 80040b2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80040b6:	42a8      	cmp	r0, r5
 80040b8:	d007      	beq.n	80040ca <TIM_OC6_SetConfig+0x4e>
 80040ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80040be:	42a8      	cmp	r0, r5
 80040c0:	d003      	beq.n	80040ca <TIM_OC6_SetConfig+0x4e>
 80040c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80040c6:	42a8      	cmp	r0, r5
 80040c8:	d104      	bne.n	80040d4 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040ca:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040ce:	694d      	ldr	r5, [r1, #20]
 80040d0:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040d6:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040d8:	684a      	ldr	r2, [r1, #4]
 80040da:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040dc:	6203      	str	r3, [r0, #32]
}
 80040de:	bc30      	pop	{r4, r5}
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40012c00 	.word	0x40012c00

080040e8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040e8:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040ea:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ec:	6a04      	ldr	r4, [r0, #32]
 80040ee:	f024 0410 	bic.w	r4, r4, #16
 80040f2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f4:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80040f6:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80040fa:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040fe:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004102:	031b      	lsls	r3, r3, #12
 8004104:	b29b      	uxth	r3, r3
 8004106:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800410a:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800410e:	0109      	lsls	r1, r1, #4
 8004110:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8004114:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004116:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004118:	6201      	str	r1, [r0, #32]
}
 800411a:	bc30      	pop	{r4, r5}
 800411c:	4770      	bx	lr

0800411e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800411e:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004120:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004122:	6a04      	ldr	r4, [r0, #32]
 8004124:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8004128:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800412a:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800412c:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8004130:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004134:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	b2db      	uxtb	r3, r3
 800413c:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004140:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004144:	0209      	lsls	r1, r1, #8
 8004146:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 800414a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800414c:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 800414e:	6201      	str	r1, [r0, #32]
}
 8004150:	bc30      	pop	{r4, r5}
 8004152:	4770      	bx	lr

08004154 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004154:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004156:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004158:	6a04      	ldr	r4, [r0, #32]
 800415a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800415e:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004160:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004162:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004166:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800416a:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800416e:	031b      	lsls	r3, r3, #12
 8004170:	b29b      	uxth	r3, r3
 8004172:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004176:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800417a:	0309      	lsls	r1, r1, #12
 800417c:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8004180:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004182:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8004184:	6201      	str	r1, [r0, #32]
}
 8004186:	bc30      	pop	{r4, r5}
 8004188:	4770      	bx	lr
	...

0800418c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800418c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	d132      	bne.n	80041fc <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 8004196:	2302      	movs	r3, #2
 8004198:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800419c:	6802      	ldr	r2, [r0, #0]
 800419e:	68d3      	ldr	r3, [r2, #12]
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a6:	6803      	ldr	r3, [r0, #0]
 80041a8:	4a17      	ldr	r2, [pc, #92]	; (8004208 <HAL_TIM_Base_Start_IT+0x7c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d018      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x54>
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b2:	d015      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x54>
 80041b4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d011      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x54>
 80041bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00d      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x54>
 80041c4:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d009      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x54>
 80041cc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d005      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80041dc:	2000      	movs	r0, #0
 80041de:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041e0:	6899      	ldr	r1, [r3, #8]
 80041e2:	4a0a      	ldr	r2, [pc, #40]	; (800420c <HAL_TIM_Base_Start_IT+0x80>)
 80041e4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041e6:	2a06      	cmp	r2, #6
 80041e8:	d00a      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x74>
 80041ea:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80041ee:	d009      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x78>
      __HAL_TIM_ENABLE(htim);
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80041f8:	2000      	movs	r0, #0
 80041fa:	4770      	bx	lr
    return HAL_ERROR;
 80041fc:	2001      	movs	r0, #1
 80041fe:	4770      	bx	lr
  return HAL_OK;
 8004200:	2000      	movs	r0, #0
 8004202:	4770      	bx	lr
 8004204:	2000      	movs	r0, #0
}
 8004206:	4770      	bx	lr
 8004208:	40012c00 	.word	0x40012c00
 800420c:	00010007 	.word	0x00010007

08004210 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004210:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004212:	4a30      	ldr	r2, [pc, #192]	; (80042d4 <TIM_Base_SetConfig+0xc4>)
 8004214:	4290      	cmp	r0, r2
 8004216:	d00e      	beq.n	8004236 <TIM_Base_SetConfig+0x26>
 8004218:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800421c:	d00b      	beq.n	8004236 <TIM_Base_SetConfig+0x26>
 800421e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004222:	4290      	cmp	r0, r2
 8004224:	d007      	beq.n	8004236 <TIM_Base_SetConfig+0x26>
 8004226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800422a:	4290      	cmp	r0, r2
 800422c:	d003      	beq.n	8004236 <TIM_Base_SetConfig+0x26>
 800422e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004232:	4290      	cmp	r0, r2
 8004234:	d103      	bne.n	800423e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800423a:	684a      	ldr	r2, [r1, #4]
 800423c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423e:	4a25      	ldr	r2, [pc, #148]	; (80042d4 <TIM_Base_SetConfig+0xc4>)
 8004240:	4290      	cmp	r0, r2
 8004242:	d01a      	beq.n	800427a <TIM_Base_SetConfig+0x6a>
 8004244:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004248:	d017      	beq.n	800427a <TIM_Base_SetConfig+0x6a>
 800424a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800424e:	4290      	cmp	r0, r2
 8004250:	d013      	beq.n	800427a <TIM_Base_SetConfig+0x6a>
 8004252:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004256:	4290      	cmp	r0, r2
 8004258:	d00f      	beq.n	800427a <TIM_Base_SetConfig+0x6a>
 800425a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800425e:	4290      	cmp	r0, r2
 8004260:	d00b      	beq.n	800427a <TIM_Base_SetConfig+0x6a>
 8004262:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004266:	4290      	cmp	r0, r2
 8004268:	d007      	beq.n	800427a <TIM_Base_SetConfig+0x6a>
 800426a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800426e:	4290      	cmp	r0, r2
 8004270:	d003      	beq.n	800427a <TIM_Base_SetConfig+0x6a>
 8004272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004276:	4290      	cmp	r0, r2
 8004278:	d103      	bne.n	8004282 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800427a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800427e:	68ca      	ldr	r2, [r1, #12]
 8004280:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004286:	694a      	ldr	r2, [r1, #20]
 8004288:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800428a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800428c:	688b      	ldr	r3, [r1, #8]
 800428e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004290:	680b      	ldr	r3, [r1, #0]
 8004292:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <TIM_Base_SetConfig+0xc4>)
 8004296:	4298      	cmp	r0, r3
 8004298:	d00f      	beq.n	80042ba <TIM_Base_SetConfig+0xaa>
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	4298      	cmp	r0, r3
 80042a0:	d00b      	beq.n	80042ba <TIM_Base_SetConfig+0xaa>
 80042a2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80042a6:	4298      	cmp	r0, r3
 80042a8:	d007      	beq.n	80042ba <TIM_Base_SetConfig+0xaa>
 80042aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ae:	4298      	cmp	r0, r3
 80042b0:	d003      	beq.n	80042ba <TIM_Base_SetConfig+0xaa>
 80042b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042b6:	4298      	cmp	r0, r3
 80042b8:	d101      	bne.n	80042be <TIM_Base_SetConfig+0xae>
    TIMx->RCR = Structure->RepetitionCounter;
 80042ba:	690b      	ldr	r3, [r1, #16]
 80042bc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80042be:	2301      	movs	r3, #1
 80042c0:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042c2:	6903      	ldr	r3, [r0, #16]
 80042c4:	f013 0f01 	tst.w	r3, #1
 80042c8:	d003      	beq.n	80042d2 <TIM_Base_SetConfig+0xc2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042ca:	6903      	ldr	r3, [r0, #16]
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	6103      	str	r3, [r0, #16]
}
 80042d2:	4770      	bx	lr
 80042d4:	40012c00 	.word	0x40012c00

080042d8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80042d8:	b360      	cbz	r0, 8004334 <HAL_TIM_PWM_Init+0x5c>
{
 80042da:	b510      	push	{r4, lr}
 80042dc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80042de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042e2:	b313      	cbz	r3, 800432a <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	2302      	movs	r3, #2
 80042e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ea:	4621      	mov	r1, r4
 80042ec:	f851 0b04 	ldr.w	r0, [r1], #4
 80042f0:	f7ff ff8e 	bl	8004210 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f4:	2301      	movs	r3, #1
 80042f6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80042fe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004302:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004306:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800430a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800430e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004312:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004316:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800431a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800431e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004322:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004326:	2000      	movs	r0, #0
}
 8004328:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800432a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800432e:	f7fd fb43 	bl	80019b8 <HAL_TIM_PWM_MspInit>
 8004332:	e7d7      	b.n	80042e4 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004334:	2001      	movs	r0, #1
}
 8004336:	4770      	bx	lr

08004338 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8004338:	b360      	cbz	r0, 8004394 <HAL_TIM_IC_Init+0x5c>
{
 800433a:	b510      	push	{r4, lr}
 800433c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800433e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004342:	b313      	cbz	r3, 800438a <HAL_TIM_IC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	2302      	movs	r3, #2
 8004346:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800434a:	4621      	mov	r1, r4
 800434c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004350:	f7ff ff5e 	bl	8004210 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004354:	2301      	movs	r3, #1
 8004356:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800435a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800435e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004362:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004366:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800436a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800436e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004372:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800437a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800437e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004382:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004386:	2000      	movs	r0, #0
}
 8004388:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800438a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800438e:	f7fd fb29 	bl	80019e4 <HAL_TIM_IC_MspInit>
 8004392:	e7d7      	b.n	8004344 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8004394:	2001      	movs	r0, #1
}
 8004396:	4770      	bx	lr

08004398 <TIM_OC2_SetConfig>:
{
 8004398:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800439a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800439c:	6a02      	ldr	r2, [r0, #32]
 800439e:	f022 0210 	bic.w	r2, r2, #16
 80043a2:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80043a4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80043a6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043a8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80043ac:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b0:	680d      	ldr	r5, [r1, #0]
 80043b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80043b6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043ba:	688d      	ldr	r5, [r1, #8]
 80043bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043c0:	4d17      	ldr	r5, [pc, #92]	; (8004420 <TIM_OC2_SetConfig+0x88>)
 80043c2:	42a8      	cmp	r0, r5
 80043c4:	d003      	beq.n	80043ce <TIM_OC2_SetConfig+0x36>
 80043c6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80043ca:	42a8      	cmp	r0, r5
 80043cc:	d106      	bne.n	80043dc <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 80043ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043d2:	68cd      	ldr	r5, [r1, #12]
 80043d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80043d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043dc:	4d10      	ldr	r5, [pc, #64]	; (8004420 <TIM_OC2_SetConfig+0x88>)
 80043de:	42a8      	cmp	r0, r5
 80043e0:	d00f      	beq.n	8004402 <TIM_OC2_SetConfig+0x6a>
 80043e2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80043e6:	42a8      	cmp	r0, r5
 80043e8:	d00b      	beq.n	8004402 <TIM_OC2_SetConfig+0x6a>
 80043ea:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80043ee:	42a8      	cmp	r0, r5
 80043f0:	d007      	beq.n	8004402 <TIM_OC2_SetConfig+0x6a>
 80043f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80043f6:	42a8      	cmp	r0, r5
 80043f8:	d003      	beq.n	8004402 <TIM_OC2_SetConfig+0x6a>
 80043fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80043fe:	42a8      	cmp	r0, r5
 8004400:	d107      	bne.n	8004412 <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004402:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004406:	694c      	ldr	r4, [r1, #20]
 8004408:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800440c:	698c      	ldr	r4, [r1, #24]
 800440e:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8004412:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004414:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004416:	684a      	ldr	r2, [r1, #4]
 8004418:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800441a:	6203      	str	r3, [r0, #32]
}
 800441c:	bc30      	pop	{r4, r5}
 800441e:	4770      	bx	lr
 8004420:	40012c00 	.word	0x40012c00

08004424 <HAL_TIM_PWM_ConfigChannel>:
{
 8004424:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004426:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800442a:	2b01      	cmp	r3, #1
 800442c:	f000 8095 	beq.w	800455a <HAL_TIM_PWM_ConfigChannel+0x136>
 8004430:	4604      	mov	r4, r0
 8004432:	460d      	mov	r5, r1
 8004434:	2301      	movs	r3, #1
 8004436:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800443a:	2a14      	cmp	r2, #20
 800443c:	f200 8088 	bhi.w	8004550 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8004440:	e8df f002 	tbb	[pc, r2]
 8004444:	8686860b 	.word	0x8686860b
 8004448:	8686861f 	.word	0x8686861f
 800444c:	86868634 	.word	0x86868634
 8004450:	86868648 	.word	0x86868648
 8004454:	8686865d 	.word	0x8686865d
 8004458:	71          	.byte	0x71
 8004459:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800445a:	6800      	ldr	r0, [r0, #0]
 800445c:	f7ff fcfe 	bl	8003e5c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004460:	6822      	ldr	r2, [r4, #0]
 8004462:	6993      	ldr	r3, [r2, #24]
 8004464:	f043 0308 	orr.w	r3, r3, #8
 8004468:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800446a:	6822      	ldr	r2, [r4, #0]
 800446c:	6993      	ldr	r3, [r2, #24]
 800446e:	f023 0304 	bic.w	r3, r3, #4
 8004472:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	6993      	ldr	r3, [r2, #24]
 8004478:	6929      	ldr	r1, [r5, #16]
 800447a:	430b      	orrs	r3, r1
 800447c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800447e:	2000      	movs	r0, #0
      break;
 8004480:	e067      	b.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004482:	6800      	ldr	r0, [r0, #0]
 8004484:	f7ff ff88 	bl	8004398 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004488:	6822      	ldr	r2, [r4, #0]
 800448a:	6993      	ldr	r3, [r2, #24]
 800448c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004490:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004492:	6822      	ldr	r2, [r4, #0]
 8004494:	6993      	ldr	r3, [r2, #24]
 8004496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800449a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	6993      	ldr	r3, [r2, #24]
 80044a0:	6929      	ldr	r1, [r5, #16]
 80044a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80044a6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80044a8:	2000      	movs	r0, #0
      break;
 80044aa:	e052      	b.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044ac:	6800      	ldr	r0, [r0, #0]
 80044ae:	f7ff fd25 	bl	8003efc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	69d3      	ldr	r3, [r2, #28]
 80044b6:	f043 0308 	orr.w	r3, r3, #8
 80044ba:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044bc:	6822      	ldr	r2, [r4, #0]
 80044be:	69d3      	ldr	r3, [r2, #28]
 80044c0:	f023 0304 	bic.w	r3, r3, #4
 80044c4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044c6:	6822      	ldr	r2, [r4, #0]
 80044c8:	69d3      	ldr	r3, [r2, #28]
 80044ca:	6929      	ldr	r1, [r5, #16]
 80044cc:	430b      	orrs	r3, r1
 80044ce:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80044d0:	2000      	movs	r0, #0
      break;
 80044d2:	e03e      	b.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044d4:	6800      	ldr	r0, [r0, #0]
 80044d6:	f7ff fd57 	bl	8003f88 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044da:	6822      	ldr	r2, [r4, #0]
 80044dc:	69d3      	ldr	r3, [r2, #28]
 80044de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044e2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044e4:	6822      	ldr	r2, [r4, #0]
 80044e6:	69d3      	ldr	r3, [r2, #28]
 80044e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044ec:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ee:	6822      	ldr	r2, [r4, #0]
 80044f0:	69d3      	ldr	r3, [r2, #28]
 80044f2:	6929      	ldr	r1, [r5, #16]
 80044f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80044f8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80044fa:	2000      	movs	r0, #0
      break;
 80044fc:	e029      	b.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044fe:	6800      	ldr	r0, [r0, #0]
 8004500:	f7ff fd88 	bl	8004014 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004504:	6822      	ldr	r2, [r4, #0]
 8004506:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004508:	f043 0308 	orr.w	r3, r3, #8
 800450c:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800450e:	6822      	ldr	r2, [r4, #0]
 8004510:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004512:	f023 0304 	bic.w	r3, r3, #4
 8004516:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004518:	6822      	ldr	r2, [r4, #0]
 800451a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800451c:	6929      	ldr	r1, [r5, #16]
 800451e:	430b      	orrs	r3, r1
 8004520:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8004522:	2000      	movs	r0, #0
      break;
 8004524:	e015      	b.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004526:	6800      	ldr	r0, [r0, #0]
 8004528:	f7ff fda8 	bl	800407c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800452c:	6822      	ldr	r2, [r4, #0]
 800452e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004530:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004534:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004536:	6822      	ldr	r2, [r4, #0]
 8004538:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800453a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800453e:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004540:	6822      	ldr	r2, [r4, #0]
 8004542:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004544:	6929      	ldr	r1, [r5, #16]
 8004546:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800454a:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800454c:	2000      	movs	r0, #0
      break;
 800454e:	e000      	b.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8004550:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004552:	2300      	movs	r3, #0
 8004554:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004558:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800455a:	2002      	movs	r0, #2
 800455c:	e7fc      	b.n	8004558 <HAL_TIM_PWM_ConfigChannel+0x134>
	...

08004560 <TIM_TI1_SetConfig>:
{
 8004560:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8004562:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004564:	6a04      	ldr	r4, [r0, #32]
 8004566:	f024 0401 	bic.w	r4, r4, #1
 800456a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800456c:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800456e:	4d15      	ldr	r5, [pc, #84]	; (80045c4 <TIM_TI1_SetConfig+0x64>)
 8004570:	42a8      	cmp	r0, r5
 8004572:	d015      	beq.n	80045a0 <TIM_TI1_SetConfig+0x40>
 8004574:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004578:	d012      	beq.n	80045a0 <TIM_TI1_SetConfig+0x40>
 800457a:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 800457e:	42a8      	cmp	r0, r5
 8004580:	d00e      	beq.n	80045a0 <TIM_TI1_SetConfig+0x40>
 8004582:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004586:	42a8      	cmp	r0, r5
 8004588:	d00a      	beq.n	80045a0 <TIM_TI1_SetConfig+0x40>
 800458a:	f505 3596 	add.w	r5, r5, #76800	; 0x12c00
 800458e:	42a8      	cmp	r0, r5
 8004590:	d006      	beq.n	80045a0 <TIM_TI1_SetConfig+0x40>
 8004592:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004596:	42a8      	cmp	r0, r5
 8004598:	d002      	beq.n	80045a0 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800459a:	f044 0201 	orr.w	r2, r4, #1
 800459e:	e002      	b.n	80045a6 <TIM_TI1_SetConfig+0x46>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045a0:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80045a4:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045b0:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80045b4:	f001 010a 	and.w	r1, r1, #10
 80045b8:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 80045ba:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80045bc:	6201      	str	r1, [r0, #32]
}
 80045be:	bc70      	pop	{r4, r5, r6}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40012c00 	.word	0x40012c00

080045c8 <HAL_TIM_IC_ConfigChannel>:
{
 80045c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80045ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d05a      	beq.n	8004688 <HAL_TIM_IC_ConfigChannel+0xc0>
 80045d2:	4604      	mov	r4, r0
 80045d4:	460d      	mov	r5, r1
 80045d6:	2301      	movs	r3, #1
 80045d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80045dc:	b152      	cbz	r2, 80045f4 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 80045de:	2a04      	cmp	r2, #4
 80045e0:	d01a      	beq.n	8004618 <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 80045e2:	2a08      	cmp	r2, #8
 80045e4:	d02b      	beq.n	800463e <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 80045e6:	2a0c      	cmp	r2, #12
 80045e8:	d03b      	beq.n	8004662 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 80045ea:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80045ec:	2300      	movs	r3, #0
 80045ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80045f2:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80045f4:	68cb      	ldr	r3, [r1, #12]
 80045f6:	684a      	ldr	r2, [r1, #4]
 80045f8:	6809      	ldr	r1, [r1, #0]
 80045fa:	6800      	ldr	r0, [r0, #0]
 80045fc:	f7ff ffb0 	bl	8004560 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004600:	6822      	ldr	r2, [r4, #0]
 8004602:	6993      	ldr	r3, [r2, #24]
 8004604:	f023 030c 	bic.w	r3, r3, #12
 8004608:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800460a:	6822      	ldr	r2, [r4, #0]
 800460c:	6993      	ldr	r3, [r2, #24]
 800460e:	68a9      	ldr	r1, [r5, #8]
 8004610:	430b      	orrs	r3, r1
 8004612:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004614:	2000      	movs	r0, #0
 8004616:	e7e9      	b.n	80045ec <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 8004618:	68cb      	ldr	r3, [r1, #12]
 800461a:	684a      	ldr	r2, [r1, #4]
 800461c:	6809      	ldr	r1, [r1, #0]
 800461e:	6800      	ldr	r0, [r0, #0]
 8004620:	f7ff fd62 	bl	80040e8 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004624:	6822      	ldr	r2, [r4, #0]
 8004626:	6993      	ldr	r3, [r2, #24]
 8004628:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800462c:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800462e:	6822      	ldr	r2, [r4, #0]
 8004630:	6993      	ldr	r3, [r2, #24]
 8004632:	68a9      	ldr	r1, [r5, #8]
 8004634:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004638:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2000      	movs	r0, #0
 800463c:	e7d6      	b.n	80045ec <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 800463e:	68cb      	ldr	r3, [r1, #12]
 8004640:	684a      	ldr	r2, [r1, #4]
 8004642:	6809      	ldr	r1, [r1, #0]
 8004644:	6800      	ldr	r0, [r0, #0]
 8004646:	f7ff fd6a 	bl	800411e <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800464a:	6822      	ldr	r2, [r4, #0]
 800464c:	69d3      	ldr	r3, [r2, #28]
 800464e:	f023 030c 	bic.w	r3, r3, #12
 8004652:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004654:	6822      	ldr	r2, [r4, #0]
 8004656:	69d3      	ldr	r3, [r2, #28]
 8004658:	68a9      	ldr	r1, [r5, #8]
 800465a:	430b      	orrs	r3, r1
 800465c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2000      	movs	r0, #0
 8004660:	e7c4      	b.n	80045ec <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 8004662:	68cb      	ldr	r3, [r1, #12]
 8004664:	684a      	ldr	r2, [r1, #4]
 8004666:	6809      	ldr	r1, [r1, #0]
 8004668:	6800      	ldr	r0, [r0, #0]
 800466a:	f7ff fd73 	bl	8004154 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800466e:	6822      	ldr	r2, [r4, #0]
 8004670:	69d3      	ldr	r3, [r2, #28]
 8004672:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004676:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004678:	6822      	ldr	r2, [r4, #0]
 800467a:	69d3      	ldr	r3, [r2, #28]
 800467c:	68a9      	ldr	r1, [r5, #8]
 800467e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004682:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004684:	2000      	movs	r0, #0
 8004686:	e7b1      	b.n	80045ec <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 8004688:	2002      	movs	r0, #2
 800468a:	e7b2      	b.n	80045f2 <HAL_TIM_IC_ConfigChannel+0x2a>

0800468c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800468c:	f001 011f 	and.w	r1, r1, #31
 8004690:	2301      	movs	r3, #1
 8004692:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004696:	6a03      	ldr	r3, [r0, #32]
 8004698:	ea23 030c 	bic.w	r3, r3, ip
 800469c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800469e:	6a03      	ldr	r3, [r0, #32]
 80046a0:	fa02 f101 	lsl.w	r1, r2, r1
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6203      	str	r3, [r0, #32]
}
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_TIM_PWM_Start>:
{
 80046ac:	b510      	push	{r4, lr}
 80046ae:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046b0:	4608      	mov	r0, r1
 80046b2:	2900      	cmp	r1, #0
 80046b4:	d147      	bne.n	8004746 <HAL_TIM_PWM_Start+0x9a>
 80046b6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	bf18      	it	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f040 8094 	bne.w	80047f0 <HAL_TIM_PWM_Start+0x144>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d167      	bne.n	800479c <HAL_TIM_PWM_Start+0xf0>
 80046cc:	2302      	movs	r3, #2
 80046ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046d2:	2201      	movs	r2, #1
 80046d4:	4601      	mov	r1, r0
 80046d6:	6820      	ldr	r0, [r4, #0]
 80046d8:	f7ff ffd8 	bl	800468c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	4a47      	ldr	r2, [pc, #284]	; (80047fc <HAL_TIM_PWM_Start+0x150>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00f      	beq.n	8004704 <HAL_TIM_PWM_Start+0x58>
 80046e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00b      	beq.n	8004704 <HAL_TIM_PWM_Start+0x58>
 80046ec:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d007      	beq.n	8004704 <HAL_TIM_PWM_Start+0x58>
 80046f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d003      	beq.n	8004704 <HAL_TIM_PWM_Start+0x58>
 80046fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004700:	4293      	cmp	r3, r2
 8004702:	d103      	bne.n	800470c <HAL_TIM_PWM_Start+0x60>
    __HAL_TIM_MOE_ENABLE(htim);
 8004704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800470a:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	4a3b      	ldr	r2, [pc, #236]	; (80047fc <HAL_TIM_PWM_Start+0x150>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d05f      	beq.n	80047d4 <HAL_TIM_PWM_Start+0x128>
 8004714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004718:	d05c      	beq.n	80047d4 <HAL_TIM_PWM_Start+0x128>
 800471a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800471e:	4293      	cmp	r3, r2
 8004720:	d058      	beq.n	80047d4 <HAL_TIM_PWM_Start+0x128>
 8004722:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004726:	4293      	cmp	r3, r2
 8004728:	d054      	beq.n	80047d4 <HAL_TIM_PWM_Start+0x128>
 800472a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800472e:	4293      	cmp	r3, r2
 8004730:	d050      	beq.n	80047d4 <HAL_TIM_PWM_Start+0x128>
 8004732:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004736:	4293      	cmp	r3, r2
 8004738:	d04c      	beq.n	80047d4 <HAL_TIM_PWM_Start+0x128>
    __HAL_TIM_ENABLE(htim);
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	f042 0201 	orr.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004742:	2000      	movs	r0, #0
 8004744:	e055      	b.n	80047f2 <HAL_TIM_PWM_Start+0x146>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004746:	2904      	cmp	r1, #4
 8004748:	d00c      	beq.n	8004764 <HAL_TIM_PWM_Start+0xb8>
 800474a:	2908      	cmp	r1, #8
 800474c:	d011      	beq.n	8004772 <HAL_TIM_PWM_Start+0xc6>
 800474e:	290c      	cmp	r1, #12
 8004750:	d016      	beq.n	8004780 <HAL_TIM_PWM_Start+0xd4>
 8004752:	2910      	cmp	r1, #16
 8004754:	d01b      	beq.n	800478e <HAL_TIM_PWM_Start+0xe2>
 8004756:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800475a:	b2db      	uxtb	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	bf18      	it	ne
 8004760:	2301      	movne	r3, #1
 8004762:	e7ae      	b.n	80046c2 <HAL_TIM_PWM_Start+0x16>
 8004764:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8004768:	b2db      	uxtb	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	bf18      	it	ne
 800476e:	2301      	movne	r3, #1
 8004770:	e7a7      	b.n	80046c2 <HAL_TIM_PWM_Start+0x16>
 8004772:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004776:	b2db      	uxtb	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	bf18      	it	ne
 800477c:	2301      	movne	r3, #1
 800477e:	e7a0      	b.n	80046c2 <HAL_TIM_PWM_Start+0x16>
 8004780:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004784:	b2db      	uxtb	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	bf18      	it	ne
 800478a:	2301      	movne	r3, #1
 800478c:	e799      	b.n	80046c2 <HAL_TIM_PWM_Start+0x16>
 800478e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8004792:	b2db      	uxtb	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	bf18      	it	ne
 8004798:	2301      	movne	r3, #1
 800479a:	e792      	b.n	80046c2 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800479c:	2804      	cmp	r0, #4
 800479e:	d009      	beq.n	80047b4 <HAL_TIM_PWM_Start+0x108>
 80047a0:	2808      	cmp	r0, #8
 80047a2:	d00b      	beq.n	80047bc <HAL_TIM_PWM_Start+0x110>
 80047a4:	280c      	cmp	r0, #12
 80047a6:	d00d      	beq.n	80047c4 <HAL_TIM_PWM_Start+0x118>
 80047a8:	2810      	cmp	r0, #16
 80047aa:	d00f      	beq.n	80047cc <HAL_TIM_PWM_Start+0x120>
 80047ac:	2302      	movs	r3, #2
 80047ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b2:	e78e      	b.n	80046d2 <HAL_TIM_PWM_Start+0x26>
 80047b4:	2302      	movs	r3, #2
 80047b6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80047ba:	e78a      	b.n	80046d2 <HAL_TIM_PWM_Start+0x26>
 80047bc:	2302      	movs	r3, #2
 80047be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80047c2:	e786      	b.n	80046d2 <HAL_TIM_PWM_Start+0x26>
 80047c4:	2302      	movs	r3, #2
 80047c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80047ca:	e782      	b.n	80046d2 <HAL_TIM_PWM_Start+0x26>
 80047cc:	2302      	movs	r3, #2
 80047ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047d2:	e77e      	b.n	80046d2 <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d4:	6899      	ldr	r1, [r3, #8]
 80047d6:	4a0a      	ldr	r2, [pc, #40]	; (8004800 <HAL_TIM_PWM_Start+0x154>)
 80047d8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047da:	2a06      	cmp	r2, #6
 80047dc:	d00a      	beq.n	80047f4 <HAL_TIM_PWM_Start+0x148>
 80047de:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80047e2:	d009      	beq.n	80047f8 <HAL_TIM_PWM_Start+0x14c>
      __HAL_TIM_ENABLE(htim);
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80047ec:	2000      	movs	r0, #0
 80047ee:	e000      	b.n	80047f2 <HAL_TIM_PWM_Start+0x146>
    return HAL_ERROR;
 80047f0:	2001      	movs	r0, #1
}
 80047f2:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80047f4:	2000      	movs	r0, #0
 80047f6:	e7fc      	b.n	80047f2 <HAL_TIM_PWM_Start+0x146>
 80047f8:	2000      	movs	r0, #0
 80047fa:	e7fa      	b.n	80047f2 <HAL_TIM_PWM_Start+0x146>
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	00010007 	.word	0x00010007

08004804 <HAL_TIM_IC_Start_IT>:
{
 8004804:	b510      	push	{r4, lr}
 8004806:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004808:	460b      	mov	r3, r1
 800480a:	bb19      	cbnz	r1, 8004854 <HAL_TIM_IC_Start_IT+0x50>
 800480c:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8004810:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004812:	2b00      	cmp	r3, #0
 8004814:	d13a      	bne.n	800488c <HAL_TIM_IC_Start_IT+0x88>
 8004816:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800481a:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800481c:	2801      	cmp	r0, #1
 800481e:	f040 80b8 	bne.w	8004992 <HAL_TIM_IC_Start_IT+0x18e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004822:	2a01      	cmp	r2, #1
 8004824:	f040 80b6 	bne.w	8004994 <HAL_TIM_IC_Start_IT+0x190>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004828:	2b00      	cmp	r3, #0
 800482a:	d13f      	bne.n	80048ac <HAL_TIM_IC_Start_IT+0xa8>
 800482c:	2102      	movs	r1, #2
 800482e:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004832:	2b00      	cmp	r3, #0
 8004834:	d156      	bne.n	80048e4 <HAL_TIM_IC_Start_IT+0xe0>
 8004836:	2102      	movs	r1, #2
 8004838:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  switch (Channel)
 800483c:	2b0c      	cmp	r3, #12
 800483e:	f200 80aa 	bhi.w	8004996 <HAL_TIM_IC_Start_IT+0x192>
 8004842:	e8df f003 	tbb	[pc, r3]
 8004846:	a85f      	.short	0xa85f
 8004848:	a886a8a8 	.word	0xa886a8a8
 800484c:	a88ca8a8 	.word	0xa88ca8a8
 8004850:	a8a8      	.short	0xa8a8
 8004852:	92          	.byte	0x92
 8004853:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004854:	2904      	cmp	r1, #4
 8004856:	d009      	beq.n	800486c <HAL_TIM_IC_Start_IT+0x68>
 8004858:	2908      	cmp	r1, #8
 800485a:	d00b      	beq.n	8004874 <HAL_TIM_IC_Start_IT+0x70>
 800485c:	290c      	cmp	r1, #12
 800485e:	d00d      	beq.n	800487c <HAL_TIM_IC_Start_IT+0x78>
 8004860:	2910      	cmp	r1, #16
 8004862:	d00f      	beq.n	8004884 <HAL_TIM_IC_Start_IT+0x80>
 8004864:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 8004868:	b2c0      	uxtb	r0, r0
 800486a:	e7d2      	b.n	8004812 <HAL_TIM_IC_Start_IT+0xe>
 800486c:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8004870:	b2c0      	uxtb	r0, r0
 8004872:	e7ce      	b.n	8004812 <HAL_TIM_IC_Start_IT+0xe>
 8004874:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8004878:	b2c0      	uxtb	r0, r0
 800487a:	e7ca      	b.n	8004812 <HAL_TIM_IC_Start_IT+0xe>
 800487c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8004880:	b2c0      	uxtb	r0, r0
 8004882:	e7c6      	b.n	8004812 <HAL_TIM_IC_Start_IT+0xe>
 8004884:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 8004888:	b2c0      	uxtb	r0, r0
 800488a:	e7c2      	b.n	8004812 <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800488c:	2b04      	cmp	r3, #4
 800488e:	d005      	beq.n	800489c <HAL_TIM_IC_Start_IT+0x98>
 8004890:	2b08      	cmp	r3, #8
 8004892:	d007      	beq.n	80048a4 <HAL_TIM_IC_Start_IT+0xa0>
 8004894:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	e7bf      	b.n	800481c <HAL_TIM_IC_Start_IT+0x18>
 800489c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	e7bb      	b.n	800481c <HAL_TIM_IC_Start_IT+0x18>
 80048a4:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	e7b7      	b.n	800481c <HAL_TIM_IC_Start_IT+0x18>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d009      	beq.n	80048c4 <HAL_TIM_IC_Start_IT+0xc0>
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d00b      	beq.n	80048cc <HAL_TIM_IC_Start_IT+0xc8>
 80048b4:	2b0c      	cmp	r3, #12
 80048b6:	d00d      	beq.n	80048d4 <HAL_TIM_IC_Start_IT+0xd0>
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d00f      	beq.n	80048dc <HAL_TIM_IC_Start_IT+0xd8>
 80048bc:	2102      	movs	r1, #2
 80048be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048c2:	e7b6      	b.n	8004832 <HAL_TIM_IC_Start_IT+0x2e>
 80048c4:	2102      	movs	r1, #2
 80048c6:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 80048ca:	e7b2      	b.n	8004832 <HAL_TIM_IC_Start_IT+0x2e>
 80048cc:	2102      	movs	r1, #2
 80048ce:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 80048d2:	e7ae      	b.n	8004832 <HAL_TIM_IC_Start_IT+0x2e>
 80048d4:	2102      	movs	r1, #2
 80048d6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 80048da:	e7aa      	b.n	8004832 <HAL_TIM_IC_Start_IT+0x2e>
 80048dc:	2102      	movs	r1, #2
 80048de:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80048e2:	e7a6      	b.n	8004832 <HAL_TIM_IC_Start_IT+0x2e>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d005      	beq.n	80048f4 <HAL_TIM_IC_Start_IT+0xf0>
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d007      	beq.n	80048fc <HAL_TIM_IC_Start_IT+0xf8>
 80048ec:	2102      	movs	r1, #2
 80048ee:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
 80048f2:	e7a3      	b.n	800483c <HAL_TIM_IC_Start_IT+0x38>
 80048f4:	2102      	movs	r1, #2
 80048f6:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80048fa:	e79f      	b.n	800483c <HAL_TIM_IC_Start_IT+0x38>
 80048fc:	2102      	movs	r1, #2
 80048fe:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
 8004902:	e79b      	b.n	800483c <HAL_TIM_IC_Start_IT+0x38>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004904:	6821      	ldr	r1, [r4, #0]
 8004906:	68ca      	ldr	r2, [r1, #12]
 8004908:	f042 0202 	orr.w	r2, r2, #2
 800490c:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800490e:	2201      	movs	r2, #1
 8004910:	4619      	mov	r1, r3
 8004912:	6820      	ldr	r0, [r4, #0]
 8004914:	f7ff feba 	bl	800468c <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	4a22      	ldr	r2, [pc, #136]	; (80049a4 <HAL_TIM_IC_Start_IT+0x1a0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d02a      	beq.n	8004976 <HAL_TIM_IC_Start_IT+0x172>
 8004920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004924:	d027      	beq.n	8004976 <HAL_TIM_IC_Start_IT+0x172>
 8004926:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800492a:	4293      	cmp	r3, r2
 800492c:	d023      	beq.n	8004976 <HAL_TIM_IC_Start_IT+0x172>
 800492e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004932:	4293      	cmp	r3, r2
 8004934:	d01f      	beq.n	8004976 <HAL_TIM_IC_Start_IT+0x172>
 8004936:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800493a:	4293      	cmp	r3, r2
 800493c:	d01b      	beq.n	8004976 <HAL_TIM_IC_Start_IT+0x172>
 800493e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004942:	4293      	cmp	r3, r2
 8004944:	d017      	beq.n	8004976 <HAL_TIM_IC_Start_IT+0x172>
      __HAL_TIM_ENABLE(htim);
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	f042 0201 	orr.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	2000      	movs	r0, #0
 8004950:	e020      	b.n	8004994 <HAL_TIM_IC_Start_IT+0x190>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004952:	6821      	ldr	r1, [r4, #0]
 8004954:	68ca      	ldr	r2, [r1, #12]
 8004956:	f042 0204 	orr.w	r2, r2, #4
 800495a:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 800495c:	e7d7      	b.n	800490e <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800495e:	6821      	ldr	r1, [r4, #0]
 8004960:	68ca      	ldr	r2, [r1, #12]
 8004962:	f042 0208 	orr.w	r2, r2, #8
 8004966:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8004968:	e7d1      	b.n	800490e <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800496a:	6821      	ldr	r1, [r4, #0]
 800496c:	68ca      	ldr	r2, [r1, #12]
 800496e:	f042 0210 	orr.w	r2, r2, #16
 8004972:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8004974:	e7cb      	b.n	800490e <HAL_TIM_IC_Start_IT+0x10a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004976:	6899      	ldr	r1, [r3, #8]
 8004978:	4a0b      	ldr	r2, [pc, #44]	; (80049a8 <HAL_TIM_IC_Start_IT+0x1a4>)
 800497a:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497c:	2a06      	cmp	r2, #6
 800497e:	d00c      	beq.n	800499a <HAL_TIM_IC_Start_IT+0x196>
 8004980:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004984:	d00b      	beq.n	800499e <HAL_TIM_IC_Start_IT+0x19a>
        __HAL_TIM_ENABLE(htim);
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	2000      	movs	r0, #0
 8004990:	e000      	b.n	8004994 <HAL_TIM_IC_Start_IT+0x190>
    return HAL_ERROR;
 8004992:	2001      	movs	r0, #1
}
 8004994:	bd10      	pop	{r4, pc}
  switch (Channel)
 8004996:	4610      	mov	r0, r2
 8004998:	e7fc      	b.n	8004994 <HAL_TIM_IC_Start_IT+0x190>
 800499a:	2000      	movs	r0, #0
 800499c:	e7fa      	b.n	8004994 <HAL_TIM_IC_Start_IT+0x190>
 800499e:	2000      	movs	r0, #0
 80049a0:	e7f8      	b.n	8004994 <HAL_TIM_IC_Start_IT+0x190>
 80049a2:	bf00      	nop
 80049a4:	40012c00 	.word	0x40012c00
 80049a8:	00010007 	.word	0x00010007

080049ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d040      	beq.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
{
 80049b4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80049b6:	2301      	movs	r3, #1
 80049b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	2302      	movs	r3, #2
 80049be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049c2:	6802      	ldr	r2, [r0, #0]
 80049c4:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049c6:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049c8:	4d1c      	ldr	r5, [pc, #112]	; (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80049ca:	42aa      	cmp	r2, r5
 80049cc:	d003      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 80049ce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80049d2:	42aa      	cmp	r2, r5
 80049d4:	d103      	bne.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049da:	684d      	ldr	r5, [r1, #4]
 80049dc:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80049e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049e6:	680d      	ldr	r5, [r1, #0]
 80049e8:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ea:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ec:	6803      	ldr	r3, [r0, #0]
 80049ee:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d012      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80049f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f8:	d00f      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80049fa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00b      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004a02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d007      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004a0a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004a12:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d104      	bne.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a1a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a1e:	688a      	ldr	r2, [r1, #8]
 8004a20:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a22:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004a30:	4618      	mov	r0, r3
}
 8004a32:	bc30      	pop	{r4, r5}
 8004a34:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004a36:	2002      	movs	r0, #2
}
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40012c00 	.word	0x40012c00

08004a40 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a40:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d046      	beq.n	8004ad6 <HAL_TIMEx_ConfigBreakDeadTime+0x96>
{
 8004a48:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a50:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a56:	688a      	ldr	r2, [r1, #8]
 8004a58:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a5e:	684a      	ldr	r2, [r1, #4]
 8004a60:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a66:	680a      	ldr	r2, [r1, #0]
 8004a68:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a6e:	690a      	ldr	r2, [r1, #16]
 8004a70:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a76:	694a      	ldr	r2, [r1, #20]
 8004a78:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a7e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004a80:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004a82:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004a86:	698a      	ldr	r2, [r1, #24]
 8004a88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a90:	69ca      	ldr	r2, [r1, #28]
 8004a92:	4313      	orrs	r3, r2

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004a94:	6802      	ldr	r2, [r0, #0]
 8004a96:	4c11      	ldr	r4, [pc, #68]	; (8004adc <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8004a98:	42a2      	cmp	r2, r4
 8004a9a:	d003      	beq.n	8004aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8004a9c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004aa0:	42a2      	cmp	r2, r4
 8004aa2:	d110      	bne.n	8004ac6 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004aa4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004aa8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8004aaa:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	6a0c      	ldr	r4, [r1, #32]
 8004ab4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004ab6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004aba:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004abc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004abe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004ac2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004ac4:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ac6:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004ace:	4618      	mov	r0, r3
}
 8004ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ad4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004ad6:	2002      	movs	r0, #2
}
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40012c00 	.word	0x40012c00

08004ae0 <__errno>:
 8004ae0:	4b01      	ldr	r3, [pc, #4]	; (8004ae8 <__errno+0x8>)
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20000010 	.word	0x20000010

08004aec <__libc_init_array>:
 8004aec:	b570      	push	{r4, r5, r6, lr}
 8004aee:	4d0d      	ldr	r5, [pc, #52]	; (8004b24 <__libc_init_array+0x38>)
 8004af0:	4c0d      	ldr	r4, [pc, #52]	; (8004b28 <__libc_init_array+0x3c>)
 8004af2:	1b64      	subs	r4, r4, r5
 8004af4:	10a4      	asrs	r4, r4, #2
 8004af6:	2600      	movs	r6, #0
 8004af8:	42a6      	cmp	r6, r4
 8004afa:	d109      	bne.n	8004b10 <__libc_init_array+0x24>
 8004afc:	4d0b      	ldr	r5, [pc, #44]	; (8004b2c <__libc_init_array+0x40>)
 8004afe:	4c0c      	ldr	r4, [pc, #48]	; (8004b30 <__libc_init_array+0x44>)
 8004b00:	f000 fffa 	bl	8005af8 <_init>
 8004b04:	1b64      	subs	r4, r4, r5
 8004b06:	10a4      	asrs	r4, r4, #2
 8004b08:	2600      	movs	r6, #0
 8004b0a:	42a6      	cmp	r6, r4
 8004b0c:	d105      	bne.n	8004b1a <__libc_init_array+0x2e>
 8004b0e:	bd70      	pop	{r4, r5, r6, pc}
 8004b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b14:	4798      	blx	r3
 8004b16:	3601      	adds	r6, #1
 8004b18:	e7ee      	b.n	8004af8 <__libc_init_array+0xc>
 8004b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b1e:	4798      	blx	r3
 8004b20:	3601      	adds	r6, #1
 8004b22:	e7f2      	b.n	8004b0a <__libc_init_array+0x1e>
 8004b24:	08005f30 	.word	0x08005f30
 8004b28:	08005f30 	.word	0x08005f30
 8004b2c:	08005f30 	.word	0x08005f30
 8004b30:	08005f34 	.word	0x08005f34

08004b34 <memset>:
 8004b34:	4402      	add	r2, r0
 8004b36:	4603      	mov	r3, r0
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d100      	bne.n	8004b3e <memset+0xa>
 8004b3c:	4770      	bx	lr
 8004b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b42:	e7f9      	b.n	8004b38 <memset+0x4>

08004b44 <cosf>:
 8004b44:	ee10 3a10 	vmov	r3, s0
 8004b48:	b507      	push	{r0, r1, r2, lr}
 8004b4a:	4a1e      	ldr	r2, [pc, #120]	; (8004bc4 <cosf+0x80>)
 8004b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b50:	4293      	cmp	r3, r2
 8004b52:	dc06      	bgt.n	8004b62 <cosf+0x1e>
 8004b54:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8004bc8 <cosf+0x84>
 8004b58:	b003      	add	sp, #12
 8004b5a:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b5e:	f000 bb1d 	b.w	800519c <__kernel_cosf>
 8004b62:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004b66:	db04      	blt.n	8004b72 <cosf+0x2e>
 8004b68:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004b6c:	b003      	add	sp, #12
 8004b6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b72:	4668      	mov	r0, sp
 8004b74:	f000 f9d2 	bl	8004f1c <__ieee754_rem_pio2f>
 8004b78:	f000 0003 	and.w	r0, r0, #3
 8004b7c:	2801      	cmp	r0, #1
 8004b7e:	d009      	beq.n	8004b94 <cosf+0x50>
 8004b80:	2802      	cmp	r0, #2
 8004b82:	d010      	beq.n	8004ba6 <cosf+0x62>
 8004b84:	b9b0      	cbnz	r0, 8004bb4 <cosf+0x70>
 8004b86:	eddd 0a01 	vldr	s1, [sp, #4]
 8004b8a:	ed9d 0a00 	vldr	s0, [sp]
 8004b8e:	f000 fb05 	bl	800519c <__kernel_cosf>
 8004b92:	e7eb      	b.n	8004b6c <cosf+0x28>
 8004b94:	eddd 0a01 	vldr	s1, [sp, #4]
 8004b98:	ed9d 0a00 	vldr	s0, [sp]
 8004b9c:	f000 fdd4 	bl	8005748 <__kernel_sinf>
 8004ba0:	eeb1 0a40 	vneg.f32	s0, s0
 8004ba4:	e7e2      	b.n	8004b6c <cosf+0x28>
 8004ba6:	eddd 0a01 	vldr	s1, [sp, #4]
 8004baa:	ed9d 0a00 	vldr	s0, [sp]
 8004bae:	f000 faf5 	bl	800519c <__kernel_cosf>
 8004bb2:	e7f5      	b.n	8004ba0 <cosf+0x5c>
 8004bb4:	eddd 0a01 	vldr	s1, [sp, #4]
 8004bb8:	ed9d 0a00 	vldr	s0, [sp]
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	f000 fdc3 	bl	8005748 <__kernel_sinf>
 8004bc2:	e7d3      	b.n	8004b6c <cosf+0x28>
 8004bc4:	3f490fd8 	.word	0x3f490fd8
 8004bc8:	00000000 	.word	0x00000000

08004bcc <sinf>:
 8004bcc:	ee10 3a10 	vmov	r3, s0
 8004bd0:	b507      	push	{r0, r1, r2, lr}
 8004bd2:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <sinf+0x84>)
 8004bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	dc07      	bgt.n	8004bec <sinf+0x20>
 8004bdc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8004c54 <sinf+0x88>
 8004be0:	2000      	movs	r0, #0
 8004be2:	b003      	add	sp, #12
 8004be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004be8:	f000 bdae 	b.w	8005748 <__kernel_sinf>
 8004bec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004bf0:	db04      	blt.n	8004bfc <sinf+0x30>
 8004bf2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004bf6:	b003      	add	sp, #12
 8004bf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bfc:	4668      	mov	r0, sp
 8004bfe:	f000 f98d 	bl	8004f1c <__ieee754_rem_pio2f>
 8004c02:	f000 0003 	and.w	r0, r0, #3
 8004c06:	2801      	cmp	r0, #1
 8004c08:	d00a      	beq.n	8004c20 <sinf+0x54>
 8004c0a:	2802      	cmp	r0, #2
 8004c0c:	d00f      	beq.n	8004c2e <sinf+0x62>
 8004c0e:	b9c0      	cbnz	r0, 8004c42 <sinf+0x76>
 8004c10:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c14:	ed9d 0a00 	vldr	s0, [sp]
 8004c18:	2001      	movs	r0, #1
 8004c1a:	f000 fd95 	bl	8005748 <__kernel_sinf>
 8004c1e:	e7ea      	b.n	8004bf6 <sinf+0x2a>
 8004c20:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c24:	ed9d 0a00 	vldr	s0, [sp]
 8004c28:	f000 fab8 	bl	800519c <__kernel_cosf>
 8004c2c:	e7e3      	b.n	8004bf6 <sinf+0x2a>
 8004c2e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c32:	ed9d 0a00 	vldr	s0, [sp]
 8004c36:	2001      	movs	r0, #1
 8004c38:	f000 fd86 	bl	8005748 <__kernel_sinf>
 8004c3c:	eeb1 0a40 	vneg.f32	s0, s0
 8004c40:	e7d9      	b.n	8004bf6 <sinf+0x2a>
 8004c42:	eddd 0a01 	vldr	s1, [sp, #4]
 8004c46:	ed9d 0a00 	vldr	s0, [sp]
 8004c4a:	f000 faa7 	bl	800519c <__kernel_cosf>
 8004c4e:	e7f5      	b.n	8004c3c <sinf+0x70>
 8004c50:	3f490fd8 	.word	0x3f490fd8
 8004c54:	00000000 	.word	0x00000000

08004c58 <atan2f>:
 8004c58:	f000 b83e 	b.w	8004cd8 <__ieee754_atan2f>

08004c5c <fmodf>:
 8004c5c:	b508      	push	{r3, lr}
 8004c5e:	ed2d 8b02 	vpush	{d8}
 8004c62:	eef0 8a40 	vmov.f32	s17, s0
 8004c66:	eeb0 8a60 	vmov.f32	s16, s1
 8004c6a:	f000 f8d5 	bl	8004e18 <__ieee754_fmodf>
 8004c6e:	eef4 8a48 	vcmp.f32	s17, s16
 8004c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c76:	d60c      	bvs.n	8004c92 <fmodf+0x36>
 8004c78:	eddf 8a07 	vldr	s17, [pc, #28]	; 8004c98 <fmodf+0x3c>
 8004c7c:	eeb4 8a68 	vcmp.f32	s16, s17
 8004c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c84:	d105      	bne.n	8004c92 <fmodf+0x36>
 8004c86:	f7ff ff2b 	bl	8004ae0 <__errno>
 8004c8a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004c8e:	2321      	movs	r3, #33	; 0x21
 8004c90:	6003      	str	r3, [r0, #0]
 8004c92:	ecbd 8b02 	vpop	{d8}
 8004c96:	bd08      	pop	{r3, pc}
 8004c98:	00000000 	.word	0x00000000

08004c9c <sqrtf>:
 8004c9c:	b508      	push	{r3, lr}
 8004c9e:	ed2d 8b02 	vpush	{d8}
 8004ca2:	eeb0 8a40 	vmov.f32	s16, s0
 8004ca6:	f000 fa75 	bl	8005194 <__ieee754_sqrtf>
 8004caa:	eeb4 8a48 	vcmp.f32	s16, s16
 8004cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb2:	d60c      	bvs.n	8004cce <sqrtf+0x32>
 8004cb4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8004cd4 <sqrtf+0x38>
 8004cb8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc0:	d505      	bpl.n	8004cce <sqrtf+0x32>
 8004cc2:	f7ff ff0d 	bl	8004ae0 <__errno>
 8004cc6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004cca:	2321      	movs	r3, #33	; 0x21
 8004ccc:	6003      	str	r3, [r0, #0]
 8004cce:	ecbd 8b02 	vpop	{d8}
 8004cd2:	bd08      	pop	{r3, pc}
 8004cd4:	00000000 	.word	0x00000000

08004cd8 <__ieee754_atan2f>:
 8004cd8:	ee10 2a90 	vmov	r2, s1
 8004cdc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004ce0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004ce4:	b510      	push	{r4, lr}
 8004ce6:	eef0 7a40 	vmov.f32	s15, s0
 8004cea:	dc06      	bgt.n	8004cfa <__ieee754_atan2f+0x22>
 8004cec:	ee10 0a10 	vmov	r0, s0
 8004cf0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004cf4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004cf8:	dd04      	ble.n	8004d04 <__ieee754_atan2f+0x2c>
 8004cfa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8004cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8004d02:	bd10      	pop	{r4, pc}
 8004d04:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8004d08:	d103      	bne.n	8004d12 <__ieee754_atan2f+0x3a>
 8004d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d0e:	f000 bd63 	b.w	80057d8 <atanf>
 8004d12:	1794      	asrs	r4, r2, #30
 8004d14:	f004 0402 	and.w	r4, r4, #2
 8004d18:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8004d1c:	b943      	cbnz	r3, 8004d30 <__ieee754_atan2f+0x58>
 8004d1e:	2c02      	cmp	r4, #2
 8004d20:	d05e      	beq.n	8004de0 <__ieee754_atan2f+0x108>
 8004d22:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004df4 <__ieee754_atan2f+0x11c>
 8004d26:	2c03      	cmp	r4, #3
 8004d28:	bf08      	it	eq
 8004d2a:	eef0 7a47 	vmoveq.f32	s15, s14
 8004d2e:	e7e6      	b.n	8004cfe <__ieee754_atan2f+0x26>
 8004d30:	b941      	cbnz	r1, 8004d44 <__ieee754_atan2f+0x6c>
 8004d32:	eddf 7a31 	vldr	s15, [pc, #196]	; 8004df8 <__ieee754_atan2f+0x120>
 8004d36:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8004dfc <__ieee754_atan2f+0x124>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	bfb8      	it	lt
 8004d3e:	eef0 7a40 	vmovlt.f32	s15, s0
 8004d42:	e7dc      	b.n	8004cfe <__ieee754_atan2f+0x26>
 8004d44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004d48:	d110      	bne.n	8004d6c <__ieee754_atan2f+0x94>
 8004d4a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004d4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d52:	d107      	bne.n	8004d64 <__ieee754_atan2f+0x8c>
 8004d54:	2c02      	cmp	r4, #2
 8004d56:	d846      	bhi.n	8004de6 <__ieee754_atan2f+0x10e>
 8004d58:	4b29      	ldr	r3, [pc, #164]	; (8004e00 <__ieee754_atan2f+0x128>)
 8004d5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004d5e:	edd4 7a00 	vldr	s15, [r4]
 8004d62:	e7cc      	b.n	8004cfe <__ieee754_atan2f+0x26>
 8004d64:	2c02      	cmp	r4, #2
 8004d66:	d841      	bhi.n	8004dec <__ieee754_atan2f+0x114>
 8004d68:	4b26      	ldr	r3, [pc, #152]	; (8004e04 <__ieee754_atan2f+0x12c>)
 8004d6a:	e7f6      	b.n	8004d5a <__ieee754_atan2f+0x82>
 8004d6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004d70:	d0df      	beq.n	8004d32 <__ieee754_atan2f+0x5a>
 8004d72:	1a5b      	subs	r3, r3, r1
 8004d74:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8004d78:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8004d7c:	da1a      	bge.n	8004db4 <__ieee754_atan2f+0xdc>
 8004d7e:	2a00      	cmp	r2, #0
 8004d80:	da01      	bge.n	8004d86 <__ieee754_atan2f+0xae>
 8004d82:	313c      	adds	r1, #60	; 0x3c
 8004d84:	db19      	blt.n	8004dba <__ieee754_atan2f+0xe2>
 8004d86:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8004d8a:	f000 fdf9 	bl	8005980 <fabsf>
 8004d8e:	f000 fd23 	bl	80057d8 <atanf>
 8004d92:	eef0 7a40 	vmov.f32	s15, s0
 8004d96:	2c01      	cmp	r4, #1
 8004d98:	d012      	beq.n	8004dc0 <__ieee754_atan2f+0xe8>
 8004d9a:	2c02      	cmp	r4, #2
 8004d9c:	d017      	beq.n	8004dce <__ieee754_atan2f+0xf6>
 8004d9e:	2c00      	cmp	r4, #0
 8004da0:	d0ad      	beq.n	8004cfe <__ieee754_atan2f+0x26>
 8004da2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8004e08 <__ieee754_atan2f+0x130>
 8004da6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004daa:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8004e0c <__ieee754_atan2f+0x134>
 8004dae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004db2:	e7a4      	b.n	8004cfe <__ieee754_atan2f+0x26>
 8004db4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8004df8 <__ieee754_atan2f+0x120>
 8004db8:	e7ed      	b.n	8004d96 <__ieee754_atan2f+0xbe>
 8004dba:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004e10 <__ieee754_atan2f+0x138>
 8004dbe:	e7ea      	b.n	8004d96 <__ieee754_atan2f+0xbe>
 8004dc0:	ee17 3a90 	vmov	r3, s15
 8004dc4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004dc8:	ee07 3a90 	vmov	s15, r3
 8004dcc:	e797      	b.n	8004cfe <__ieee754_atan2f+0x26>
 8004dce:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8004e08 <__ieee754_atan2f+0x130>
 8004dd2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004dd6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8004e0c <__ieee754_atan2f+0x134>
 8004dda:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004dde:	e78e      	b.n	8004cfe <__ieee754_atan2f+0x26>
 8004de0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8004e0c <__ieee754_atan2f+0x134>
 8004de4:	e78b      	b.n	8004cfe <__ieee754_atan2f+0x26>
 8004de6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004e14 <__ieee754_atan2f+0x13c>
 8004dea:	e788      	b.n	8004cfe <__ieee754_atan2f+0x26>
 8004dec:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004e10 <__ieee754_atan2f+0x138>
 8004df0:	e785      	b.n	8004cfe <__ieee754_atan2f+0x26>
 8004df2:	bf00      	nop
 8004df4:	c0490fdb 	.word	0xc0490fdb
 8004df8:	3fc90fdb 	.word	0x3fc90fdb
 8004dfc:	bfc90fdb 	.word	0xbfc90fdb
 8004e00:	08005b20 	.word	0x08005b20
 8004e04:	08005b2c 	.word	0x08005b2c
 8004e08:	33bbbd2e 	.word	0x33bbbd2e
 8004e0c:	40490fdb 	.word	0x40490fdb
 8004e10:	00000000 	.word	0x00000000
 8004e14:	3f490fdb 	.word	0x3f490fdb

08004e18 <__ieee754_fmodf>:
 8004e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e1a:	ee10 5a90 	vmov	r5, s1
 8004e1e:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8004e22:	d009      	beq.n	8004e38 <__ieee754_fmodf+0x20>
 8004e24:	ee10 2a10 	vmov	r2, s0
 8004e28:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8004e2c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004e30:	da02      	bge.n	8004e38 <__ieee754_fmodf+0x20>
 8004e32:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004e36:	dd04      	ble.n	8004e42 <__ieee754_fmodf+0x2a>
 8004e38:	ee60 0a20 	vmul.f32	s1, s0, s1
 8004e3c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8004e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e42:	42a3      	cmp	r3, r4
 8004e44:	dbfc      	blt.n	8004e40 <__ieee754_fmodf+0x28>
 8004e46:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8004e4a:	d105      	bne.n	8004e58 <__ieee754_fmodf+0x40>
 8004e4c:	4b32      	ldr	r3, [pc, #200]	; (8004f18 <__ieee754_fmodf+0x100>)
 8004e4e:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8004e52:	ed93 0a00 	vldr	s0, [r3]
 8004e56:	e7f3      	b.n	8004e40 <__ieee754_fmodf+0x28>
 8004e58:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8004e5c:	d13f      	bne.n	8004ede <__ieee754_fmodf+0xc6>
 8004e5e:	0219      	lsls	r1, r3, #8
 8004e60:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8004e64:	2900      	cmp	r1, #0
 8004e66:	dc37      	bgt.n	8004ed8 <__ieee754_fmodf+0xc0>
 8004e68:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8004e6c:	d13d      	bne.n	8004eea <__ieee754_fmodf+0xd2>
 8004e6e:	0227      	lsls	r7, r4, #8
 8004e70:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8004e74:	2f00      	cmp	r7, #0
 8004e76:	da35      	bge.n	8004ee4 <__ieee754_fmodf+0xcc>
 8004e78:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8004e7c:	bfbb      	ittet	lt
 8004e7e:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8004e82:	1a12      	sublt	r2, r2, r0
 8004e84:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8004e88:	4093      	lsllt	r3, r2
 8004e8a:	bfa8      	it	ge
 8004e8c:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8004e90:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8004e94:	bfb5      	itete	lt
 8004e96:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8004e9a:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8004e9e:	1a52      	sublt	r2, r2, r1
 8004ea0:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8004ea4:	bfb8      	it	lt
 8004ea6:	4094      	lsllt	r4, r2
 8004ea8:	1a40      	subs	r0, r0, r1
 8004eaa:	1b1a      	subs	r2, r3, r4
 8004eac:	bb00      	cbnz	r0, 8004ef0 <__ieee754_fmodf+0xd8>
 8004eae:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8004eb2:	bf38      	it	cc
 8004eb4:	4613      	movcc	r3, r2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0c8      	beq.n	8004e4c <__ieee754_fmodf+0x34>
 8004eba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ebe:	db1f      	blt.n	8004f00 <__ieee754_fmodf+0xe8>
 8004ec0:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8004ec4:	db1f      	blt.n	8004f06 <__ieee754_fmodf+0xee>
 8004ec6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8004eca:	317f      	adds	r1, #127	; 0x7f
 8004ecc:	4333      	orrs	r3, r6
 8004ece:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8004ed2:	ee00 3a10 	vmov	s0, r3
 8004ed6:	e7b3      	b.n	8004e40 <__ieee754_fmodf+0x28>
 8004ed8:	3801      	subs	r0, #1
 8004eda:	0049      	lsls	r1, r1, #1
 8004edc:	e7c2      	b.n	8004e64 <__ieee754_fmodf+0x4c>
 8004ede:	15d8      	asrs	r0, r3, #23
 8004ee0:	387f      	subs	r0, #127	; 0x7f
 8004ee2:	e7c1      	b.n	8004e68 <__ieee754_fmodf+0x50>
 8004ee4:	3901      	subs	r1, #1
 8004ee6:	007f      	lsls	r7, r7, #1
 8004ee8:	e7c4      	b.n	8004e74 <__ieee754_fmodf+0x5c>
 8004eea:	15e1      	asrs	r1, r4, #23
 8004eec:	397f      	subs	r1, #127	; 0x7f
 8004eee:	e7c3      	b.n	8004e78 <__ieee754_fmodf+0x60>
 8004ef0:	2a00      	cmp	r2, #0
 8004ef2:	da02      	bge.n	8004efa <__ieee754_fmodf+0xe2>
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	3801      	subs	r0, #1
 8004ef8:	e7d7      	b.n	8004eaa <__ieee754_fmodf+0x92>
 8004efa:	d0a7      	beq.n	8004e4c <__ieee754_fmodf+0x34>
 8004efc:	0053      	lsls	r3, r2, #1
 8004efe:	e7fa      	b.n	8004ef6 <__ieee754_fmodf+0xde>
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	3901      	subs	r1, #1
 8004f04:	e7d9      	b.n	8004eba <__ieee754_fmodf+0xa2>
 8004f06:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8004f0a:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8004f0e:	3182      	adds	r1, #130	; 0x82
 8004f10:	410b      	asrs	r3, r1
 8004f12:	4333      	orrs	r3, r6
 8004f14:	e7dd      	b.n	8004ed2 <__ieee754_fmodf+0xba>
 8004f16:	bf00      	nop
 8004f18:	08005b38 	.word	0x08005b38

08004f1c <__ieee754_rem_pio2f>:
 8004f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f1e:	ee10 6a10 	vmov	r6, s0
 8004f22:	4b8e      	ldr	r3, [pc, #568]	; (800515c <__ieee754_rem_pio2f+0x240>)
 8004f24:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004f28:	429d      	cmp	r5, r3
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	eef0 7a40 	vmov.f32	s15, s0
 8004f30:	4604      	mov	r4, r0
 8004f32:	dc05      	bgt.n	8004f40 <__ieee754_rem_pio2f+0x24>
 8004f34:	2300      	movs	r3, #0
 8004f36:	ed80 0a00 	vstr	s0, [r0]
 8004f3a:	6043      	str	r3, [r0, #4]
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	e01a      	b.n	8004f76 <__ieee754_rem_pio2f+0x5a>
 8004f40:	4b87      	ldr	r3, [pc, #540]	; (8005160 <__ieee754_rem_pio2f+0x244>)
 8004f42:	429d      	cmp	r5, r3
 8004f44:	dc46      	bgt.n	8004fd4 <__ieee754_rem_pio2f+0xb8>
 8004f46:	2e00      	cmp	r6, #0
 8004f48:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8005164 <__ieee754_rem_pio2f+0x248>
 8004f4c:	4b86      	ldr	r3, [pc, #536]	; (8005168 <__ieee754_rem_pio2f+0x24c>)
 8004f4e:	f025 050f 	bic.w	r5, r5, #15
 8004f52:	dd1f      	ble.n	8004f94 <__ieee754_rem_pio2f+0x78>
 8004f54:	429d      	cmp	r5, r3
 8004f56:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004f5a:	d00e      	beq.n	8004f7a <__ieee754_rem_pio2f+0x5e>
 8004f5c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800516c <__ieee754_rem_pio2f+0x250>
 8004f60:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8004f64:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004f68:	ed80 0a00 	vstr	s0, [r0]
 8004f6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f70:	2001      	movs	r0, #1
 8004f72:	edc4 7a01 	vstr	s15, [r4, #4]
 8004f76:	b007      	add	sp, #28
 8004f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8005170 <__ieee754_rem_pio2f+0x254>
 8004f7e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8005174 <__ieee754_rem_pio2f+0x258>
 8004f82:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004f86:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004f8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004f8e:	edc0 6a00 	vstr	s13, [r0]
 8004f92:	e7eb      	b.n	8004f6c <__ieee754_rem_pio2f+0x50>
 8004f94:	429d      	cmp	r5, r3
 8004f96:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004f9a:	d00e      	beq.n	8004fba <__ieee754_rem_pio2f+0x9e>
 8004f9c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800516c <__ieee754_rem_pio2f+0x250>
 8004fa0:	ee37 0a87 	vadd.f32	s0, s15, s14
 8004fa4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004fa8:	ed80 0a00 	vstr	s0, [r0]
 8004fac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	edc4 7a01 	vstr	s15, [r4, #4]
 8004fb8:	e7dd      	b.n	8004f76 <__ieee754_rem_pio2f+0x5a>
 8004fba:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8005170 <__ieee754_rem_pio2f+0x254>
 8004fbe:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8005174 <__ieee754_rem_pio2f+0x258>
 8004fc2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004fc6:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004fca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004fce:	edc0 6a00 	vstr	s13, [r0]
 8004fd2:	e7eb      	b.n	8004fac <__ieee754_rem_pio2f+0x90>
 8004fd4:	4b68      	ldr	r3, [pc, #416]	; (8005178 <__ieee754_rem_pio2f+0x25c>)
 8004fd6:	429d      	cmp	r5, r3
 8004fd8:	dc72      	bgt.n	80050c0 <__ieee754_rem_pio2f+0x1a4>
 8004fda:	f000 fcd1 	bl	8005980 <fabsf>
 8004fde:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800517c <__ieee754_rem_pio2f+0x260>
 8004fe2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004fe6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ff2:	ee17 0a90 	vmov	r0, s15
 8004ff6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005164 <__ieee754_rem_pio2f+0x248>
 8004ffa:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004ffe:	281f      	cmp	r0, #31
 8005000:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800516c <__ieee754_rem_pio2f+0x250>
 8005004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005008:	eeb1 6a47 	vneg.f32	s12, s14
 800500c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005010:	ee16 2a90 	vmov	r2, s13
 8005014:	dc1c      	bgt.n	8005050 <__ieee754_rem_pio2f+0x134>
 8005016:	495a      	ldr	r1, [pc, #360]	; (8005180 <__ieee754_rem_pio2f+0x264>)
 8005018:	1e47      	subs	r7, r0, #1
 800501a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800501e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8005022:	428b      	cmp	r3, r1
 8005024:	d014      	beq.n	8005050 <__ieee754_rem_pio2f+0x134>
 8005026:	6022      	str	r2, [r4, #0]
 8005028:	ed94 7a00 	vldr	s14, [r4]
 800502c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005030:	2e00      	cmp	r6, #0
 8005032:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005036:	ed84 0a01 	vstr	s0, [r4, #4]
 800503a:	da9c      	bge.n	8004f76 <__ieee754_rem_pio2f+0x5a>
 800503c:	eeb1 7a47 	vneg.f32	s14, s14
 8005040:	eeb1 0a40 	vneg.f32	s0, s0
 8005044:	ed84 7a00 	vstr	s14, [r4]
 8005048:	ed84 0a01 	vstr	s0, [r4, #4]
 800504c:	4240      	negs	r0, r0
 800504e:	e792      	b.n	8004f76 <__ieee754_rem_pio2f+0x5a>
 8005050:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005054:	15eb      	asrs	r3, r5, #23
 8005056:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800505a:	2d08      	cmp	r5, #8
 800505c:	dde3      	ble.n	8005026 <__ieee754_rem_pio2f+0x10a>
 800505e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8005170 <__ieee754_rem_pio2f+0x254>
 8005062:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005174 <__ieee754_rem_pio2f+0x258>
 8005066:	eef0 6a40 	vmov.f32	s13, s0
 800506a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800506e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005072:	eea6 0a27 	vfma.f32	s0, s12, s15
 8005076:	eef0 7a40 	vmov.f32	s15, s0
 800507a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800507e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005082:	ee15 2a90 	vmov	r2, s11
 8005086:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800508a:	1a5b      	subs	r3, r3, r1
 800508c:	2b19      	cmp	r3, #25
 800508e:	dc04      	bgt.n	800509a <__ieee754_rem_pio2f+0x17e>
 8005090:	edc4 5a00 	vstr	s11, [r4]
 8005094:	eeb0 0a66 	vmov.f32	s0, s13
 8005098:	e7c6      	b.n	8005028 <__ieee754_rem_pio2f+0x10c>
 800509a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005184 <__ieee754_rem_pio2f+0x268>
 800509e:	eeb0 0a66 	vmov.f32	s0, s13
 80050a2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80050a6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80050aa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005188 <__ieee754_rem_pio2f+0x26c>
 80050ae:	eee6 7a25 	vfma.f32	s15, s12, s11
 80050b2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80050b6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80050ba:	ed84 7a00 	vstr	s14, [r4]
 80050be:	e7b3      	b.n	8005028 <__ieee754_rem_pio2f+0x10c>
 80050c0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80050c4:	db06      	blt.n	80050d4 <__ieee754_rem_pio2f+0x1b8>
 80050c6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80050ca:	edc0 7a01 	vstr	s15, [r0, #4]
 80050ce:	edc0 7a00 	vstr	s15, [r0]
 80050d2:	e733      	b.n	8004f3c <__ieee754_rem_pio2f+0x20>
 80050d4:	15ea      	asrs	r2, r5, #23
 80050d6:	3a86      	subs	r2, #134	; 0x86
 80050d8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80050dc:	ee07 3a90 	vmov	s15, r3
 80050e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80050e4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800518c <__ieee754_rem_pio2f+0x270>
 80050e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80050ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050f0:	ed8d 7a03 	vstr	s14, [sp, #12]
 80050f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80050f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80050fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005104:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005108:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800510c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005114:	edcd 7a05 	vstr	s15, [sp, #20]
 8005118:	d11e      	bne.n	8005158 <__ieee754_rem_pio2f+0x23c>
 800511a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800511e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005122:	bf14      	ite	ne
 8005124:	2302      	movne	r3, #2
 8005126:	2301      	moveq	r3, #1
 8005128:	4919      	ldr	r1, [pc, #100]	; (8005190 <__ieee754_rem_pio2f+0x274>)
 800512a:	9101      	str	r1, [sp, #4]
 800512c:	2102      	movs	r1, #2
 800512e:	9100      	str	r1, [sp, #0]
 8005130:	a803      	add	r0, sp, #12
 8005132:	4621      	mov	r1, r4
 8005134:	f000 f892 	bl	800525c <__kernel_rem_pio2f>
 8005138:	2e00      	cmp	r6, #0
 800513a:	f6bf af1c 	bge.w	8004f76 <__ieee754_rem_pio2f+0x5a>
 800513e:	edd4 7a00 	vldr	s15, [r4]
 8005142:	eef1 7a67 	vneg.f32	s15, s15
 8005146:	edc4 7a00 	vstr	s15, [r4]
 800514a:	edd4 7a01 	vldr	s15, [r4, #4]
 800514e:	eef1 7a67 	vneg.f32	s15, s15
 8005152:	edc4 7a01 	vstr	s15, [r4, #4]
 8005156:	e779      	b.n	800504c <__ieee754_rem_pio2f+0x130>
 8005158:	2303      	movs	r3, #3
 800515a:	e7e5      	b.n	8005128 <__ieee754_rem_pio2f+0x20c>
 800515c:	3f490fd8 	.word	0x3f490fd8
 8005160:	4016cbe3 	.word	0x4016cbe3
 8005164:	3fc90f80 	.word	0x3fc90f80
 8005168:	3fc90fd0 	.word	0x3fc90fd0
 800516c:	37354443 	.word	0x37354443
 8005170:	37354400 	.word	0x37354400
 8005174:	2e85a308 	.word	0x2e85a308
 8005178:	43490f80 	.word	0x43490f80
 800517c:	3f22f984 	.word	0x3f22f984
 8005180:	08005b40 	.word	0x08005b40
 8005184:	2e85a300 	.word	0x2e85a300
 8005188:	248d3132 	.word	0x248d3132
 800518c:	43800000 	.word	0x43800000
 8005190:	08005bc0 	.word	0x08005bc0

08005194 <__ieee754_sqrtf>:
 8005194:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005198:	4770      	bx	lr
	...

0800519c <__kernel_cosf>:
 800519c:	ee10 3a10 	vmov	r3, s0
 80051a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051a4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80051a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80051ac:	da05      	bge.n	80051ba <__kernel_cosf+0x1e>
 80051ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80051b2:	ee17 2a90 	vmov	r2, s15
 80051b6:	2a00      	cmp	r2, #0
 80051b8:	d03d      	beq.n	8005236 <__kernel_cosf+0x9a>
 80051ba:	ee60 5a00 	vmul.f32	s11, s0, s0
 80051be:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800523c <__kernel_cosf+0xa0>
 80051c2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005240 <__kernel_cosf+0xa4>
 80051c6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005244 <__kernel_cosf+0xa8>
 80051ca:	4a1f      	ldr	r2, [pc, #124]	; (8005248 <__kernel_cosf+0xac>)
 80051cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80051d0:	4293      	cmp	r3, r2
 80051d2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800524c <__kernel_cosf+0xb0>
 80051d6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80051da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005250 <__kernel_cosf+0xb4>
 80051de:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80051e2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8005254 <__kernel_cosf+0xb8>
 80051e6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80051ea:	eeb0 7a66 	vmov.f32	s14, s13
 80051ee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80051f2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80051f6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80051fa:	ee67 6a25 	vmul.f32	s13, s14, s11
 80051fe:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8005202:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005206:	dc04      	bgt.n	8005212 <__kernel_cosf+0x76>
 8005208:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800520c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8005210:	4770      	bx	lr
 8005212:	4a11      	ldr	r2, [pc, #68]	; (8005258 <__kernel_cosf+0xbc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	bfda      	itte	le
 8005218:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800521c:	ee06 3a90 	vmovle	s13, r3
 8005220:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8005224:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005228:	ee36 0a66 	vsub.f32	s0, s12, s13
 800522c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005230:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005234:	4770      	bx	lr
 8005236:	eeb0 0a46 	vmov.f32	s0, s12
 800523a:	4770      	bx	lr
 800523c:	ad47d74e 	.word	0xad47d74e
 8005240:	310f74f6 	.word	0x310f74f6
 8005244:	3d2aaaab 	.word	0x3d2aaaab
 8005248:	3e999999 	.word	0x3e999999
 800524c:	b493f27c 	.word	0xb493f27c
 8005250:	37d00d01 	.word	0x37d00d01
 8005254:	bab60b61 	.word	0xbab60b61
 8005258:	3f480000 	.word	0x3f480000

0800525c <__kernel_rem_pio2f>:
 800525c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005260:	ed2d 8b04 	vpush	{d8-d9}
 8005264:	b0d9      	sub	sp, #356	; 0x164
 8005266:	4688      	mov	r8, r1
 8005268:	9002      	str	r0, [sp, #8]
 800526a:	49bb      	ldr	r1, [pc, #748]	; (8005558 <__kernel_rem_pio2f+0x2fc>)
 800526c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8005274:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8005278:	1e59      	subs	r1, r3, #1
 800527a:	1d13      	adds	r3, r2, #4
 800527c:	db27      	blt.n	80052ce <__kernel_rem_pio2f+0x72>
 800527e:	f1b2 0b03 	subs.w	fp, r2, #3
 8005282:	bf48      	it	mi
 8005284:	f102 0b04 	addmi.w	fp, r2, #4
 8005288:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800528c:	1c45      	adds	r5, r0, #1
 800528e:	00ec      	lsls	r4, r5, #3
 8005290:	1a47      	subs	r7, r0, r1
 8005292:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8005568 <__kernel_rem_pio2f+0x30c>
 8005296:	9403      	str	r4, [sp, #12]
 8005298:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800529c:	eb0a 0c01 	add.w	ip, sl, r1
 80052a0:	ae1c      	add	r6, sp, #112	; 0x70
 80052a2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80052a6:	2400      	movs	r4, #0
 80052a8:	4564      	cmp	r4, ip
 80052aa:	dd12      	ble.n	80052d2 <__kernel_rem_pio2f+0x76>
 80052ac:	9b01      	ldr	r3, [sp, #4]
 80052ae:	ac1c      	add	r4, sp, #112	; 0x70
 80052b0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80052b4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80052b8:	f04f 0c00 	mov.w	ip, #0
 80052bc:	45d4      	cmp	ip, sl
 80052be:	dc27      	bgt.n	8005310 <__kernel_rem_pio2f+0xb4>
 80052c0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80052c4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8005568 <__kernel_rem_pio2f+0x30c>
 80052c8:	4627      	mov	r7, r4
 80052ca:	2600      	movs	r6, #0
 80052cc:	e016      	b.n	80052fc <__kernel_rem_pio2f+0xa0>
 80052ce:	2000      	movs	r0, #0
 80052d0:	e7dc      	b.n	800528c <__kernel_rem_pio2f+0x30>
 80052d2:	42e7      	cmn	r7, r4
 80052d4:	bf5d      	ittte	pl
 80052d6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80052da:	ee07 3a90 	vmovpl	s15, r3
 80052de:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80052e2:	eef0 7a47 	vmovmi.f32	s15, s14
 80052e6:	ece6 7a01 	vstmia	r6!, {s15}
 80052ea:	3401      	adds	r4, #1
 80052ec:	e7dc      	b.n	80052a8 <__kernel_rem_pio2f+0x4c>
 80052ee:	ecf9 6a01 	vldmia	r9!, {s13}
 80052f2:	ed97 7a00 	vldr	s14, [r7]
 80052f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80052fa:	3601      	adds	r6, #1
 80052fc:	428e      	cmp	r6, r1
 80052fe:	f1a7 0704 	sub.w	r7, r7, #4
 8005302:	ddf4      	ble.n	80052ee <__kernel_rem_pio2f+0x92>
 8005304:	eceb 7a01 	vstmia	fp!, {s15}
 8005308:	f10c 0c01 	add.w	ip, ip, #1
 800530c:	3404      	adds	r4, #4
 800530e:	e7d5      	b.n	80052bc <__kernel_rem_pio2f+0x60>
 8005310:	ab08      	add	r3, sp, #32
 8005312:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005316:	eddf 8a93 	vldr	s17, [pc, #588]	; 8005564 <__kernel_rem_pio2f+0x308>
 800531a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8005560 <__kernel_rem_pio2f+0x304>
 800531e:	9304      	str	r3, [sp, #16]
 8005320:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8005324:	4656      	mov	r6, sl
 8005326:	00b3      	lsls	r3, r6, #2
 8005328:	9305      	str	r3, [sp, #20]
 800532a:	ab58      	add	r3, sp, #352	; 0x160
 800532c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8005330:	ac08      	add	r4, sp, #32
 8005332:	ab44      	add	r3, sp, #272	; 0x110
 8005334:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8005338:	46a4      	mov	ip, r4
 800533a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800533e:	4637      	mov	r7, r6
 8005340:	2f00      	cmp	r7, #0
 8005342:	f1a0 0004 	sub.w	r0, r0, #4
 8005346:	dc4f      	bgt.n	80053e8 <__kernel_rem_pio2f+0x18c>
 8005348:	4628      	mov	r0, r5
 800534a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800534e:	f000 fb61 	bl	8005a14 <scalbnf>
 8005352:	eeb0 8a40 	vmov.f32	s16, s0
 8005356:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800535a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800535e:	f000 fb17 	bl	8005990 <floorf>
 8005362:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8005366:	eea0 8a67 	vfms.f32	s16, s0, s15
 800536a:	2d00      	cmp	r5, #0
 800536c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8005370:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005374:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005378:	ee17 9a90 	vmov	r9, s15
 800537c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005380:	dd44      	ble.n	800540c <__kernel_rem_pio2f+0x1b0>
 8005382:	f106 3cff 	add.w	ip, r6, #4294967295
 8005386:	ab08      	add	r3, sp, #32
 8005388:	f1c5 0e08 	rsb	lr, r5, #8
 800538c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8005390:	fa47 f00e 	asr.w	r0, r7, lr
 8005394:	4481      	add	r9, r0
 8005396:	fa00 f00e 	lsl.w	r0, r0, lr
 800539a:	1a3f      	subs	r7, r7, r0
 800539c:	f1c5 0007 	rsb	r0, r5, #7
 80053a0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80053a4:	4107      	asrs	r7, r0
 80053a6:	2f00      	cmp	r7, #0
 80053a8:	dd3f      	ble.n	800542a <__kernel_rem_pio2f+0x1ce>
 80053aa:	f04f 0e00 	mov.w	lr, #0
 80053ae:	f109 0901 	add.w	r9, r9, #1
 80053b2:	4673      	mov	r3, lr
 80053b4:	4576      	cmp	r6, lr
 80053b6:	dc6b      	bgt.n	8005490 <__kernel_rem_pio2f+0x234>
 80053b8:	2d00      	cmp	r5, #0
 80053ba:	dd04      	ble.n	80053c6 <__kernel_rem_pio2f+0x16a>
 80053bc:	2d01      	cmp	r5, #1
 80053be:	d078      	beq.n	80054b2 <__kernel_rem_pio2f+0x256>
 80053c0:	2d02      	cmp	r5, #2
 80053c2:	f000 8081 	beq.w	80054c8 <__kernel_rem_pio2f+0x26c>
 80053c6:	2f02      	cmp	r7, #2
 80053c8:	d12f      	bne.n	800542a <__kernel_rem_pio2f+0x1ce>
 80053ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80053ce:	ee30 8a48 	vsub.f32	s16, s0, s16
 80053d2:	b353      	cbz	r3, 800542a <__kernel_rem_pio2f+0x1ce>
 80053d4:	4628      	mov	r0, r5
 80053d6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80053da:	f000 fb1b 	bl	8005a14 <scalbnf>
 80053de:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80053e2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80053e6:	e020      	b.n	800542a <__kernel_rem_pio2f+0x1ce>
 80053e8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80053ec:	3f01      	subs	r7, #1
 80053ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053f6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80053fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80053fe:	ecac 0a01 	vstmia	ip!, {s0}
 8005402:	ed90 0a00 	vldr	s0, [r0]
 8005406:	ee37 0a80 	vadd.f32	s0, s15, s0
 800540a:	e799      	b.n	8005340 <__kernel_rem_pio2f+0xe4>
 800540c:	d105      	bne.n	800541a <__kernel_rem_pio2f+0x1be>
 800540e:	1e70      	subs	r0, r6, #1
 8005410:	ab08      	add	r3, sp, #32
 8005412:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8005416:	11ff      	asrs	r7, r7, #7
 8005418:	e7c5      	b.n	80053a6 <__kernel_rem_pio2f+0x14a>
 800541a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800541e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005426:	da31      	bge.n	800548c <__kernel_rem_pio2f+0x230>
 8005428:	2700      	movs	r7, #0
 800542a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800542e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005432:	f040 809b 	bne.w	800556c <__kernel_rem_pio2f+0x310>
 8005436:	1e74      	subs	r4, r6, #1
 8005438:	46a4      	mov	ip, r4
 800543a:	2000      	movs	r0, #0
 800543c:	45d4      	cmp	ip, sl
 800543e:	da4a      	bge.n	80054d6 <__kernel_rem_pio2f+0x27a>
 8005440:	2800      	cmp	r0, #0
 8005442:	d07a      	beq.n	800553a <__kernel_rem_pio2f+0x2de>
 8005444:	ab08      	add	r3, sp, #32
 8005446:	3d08      	subs	r5, #8
 8005448:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8081 	beq.w	8005554 <__kernel_rem_pio2f+0x2f8>
 8005452:	4628      	mov	r0, r5
 8005454:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005458:	00a5      	lsls	r5, r4, #2
 800545a:	f000 fadb 	bl	8005a14 <scalbnf>
 800545e:	aa44      	add	r2, sp, #272	; 0x110
 8005460:	1d2b      	adds	r3, r5, #4
 8005462:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8005564 <__kernel_rem_pio2f+0x308>
 8005466:	18d1      	adds	r1, r2, r3
 8005468:	4622      	mov	r2, r4
 800546a:	2a00      	cmp	r2, #0
 800546c:	f280 80ae 	bge.w	80055cc <__kernel_rem_pio2f+0x370>
 8005470:	4622      	mov	r2, r4
 8005472:	2a00      	cmp	r2, #0
 8005474:	f2c0 80cc 	blt.w	8005610 <__kernel_rem_pio2f+0x3b4>
 8005478:	a944      	add	r1, sp, #272	; 0x110
 800547a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800547e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800555c <__kernel_rem_pio2f+0x300>
 8005482:	eddf 7a39 	vldr	s15, [pc, #228]	; 8005568 <__kernel_rem_pio2f+0x30c>
 8005486:	2000      	movs	r0, #0
 8005488:	1aa1      	subs	r1, r4, r2
 800548a:	e0b6      	b.n	80055fa <__kernel_rem_pio2f+0x39e>
 800548c:	2702      	movs	r7, #2
 800548e:	e78c      	b.n	80053aa <__kernel_rem_pio2f+0x14e>
 8005490:	6820      	ldr	r0, [r4, #0]
 8005492:	b94b      	cbnz	r3, 80054a8 <__kernel_rem_pio2f+0x24c>
 8005494:	b118      	cbz	r0, 800549e <__kernel_rem_pio2f+0x242>
 8005496:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800549a:	6020      	str	r0, [r4, #0]
 800549c:	2001      	movs	r0, #1
 800549e:	f10e 0e01 	add.w	lr, lr, #1
 80054a2:	3404      	adds	r4, #4
 80054a4:	4603      	mov	r3, r0
 80054a6:	e785      	b.n	80053b4 <__kernel_rem_pio2f+0x158>
 80054a8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80054ac:	6020      	str	r0, [r4, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	e7f5      	b.n	800549e <__kernel_rem_pio2f+0x242>
 80054b2:	1e74      	subs	r4, r6, #1
 80054b4:	a808      	add	r0, sp, #32
 80054b6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80054ba:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80054be:	f10d 0c20 	add.w	ip, sp, #32
 80054c2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80054c6:	e77e      	b.n	80053c6 <__kernel_rem_pio2f+0x16a>
 80054c8:	1e74      	subs	r4, r6, #1
 80054ca:	a808      	add	r0, sp, #32
 80054cc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80054d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80054d4:	e7f3      	b.n	80054be <__kernel_rem_pio2f+0x262>
 80054d6:	ab08      	add	r3, sp, #32
 80054d8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80054dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80054e0:	4318      	orrs	r0, r3
 80054e2:	e7ab      	b.n	800543c <__kernel_rem_pio2f+0x1e0>
 80054e4:	f10c 0c01 	add.w	ip, ip, #1
 80054e8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80054ec:	2c00      	cmp	r4, #0
 80054ee:	d0f9      	beq.n	80054e4 <__kernel_rem_pio2f+0x288>
 80054f0:	9b05      	ldr	r3, [sp, #20]
 80054f2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80054f6:	eb0d 0003 	add.w	r0, sp, r3
 80054fa:	9b01      	ldr	r3, [sp, #4]
 80054fc:	18f4      	adds	r4, r6, r3
 80054fe:	ab1c      	add	r3, sp, #112	; 0x70
 8005500:	1c77      	adds	r7, r6, #1
 8005502:	384c      	subs	r0, #76	; 0x4c
 8005504:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005508:	4466      	add	r6, ip
 800550a:	42be      	cmp	r6, r7
 800550c:	f6ff af0b 	blt.w	8005326 <__kernel_rem_pio2f+0xca>
 8005510:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8005514:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005520:	f04f 0c00 	mov.w	ip, #0
 8005524:	ece4 7a01 	vstmia	r4!, {s15}
 8005528:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8005568 <__kernel_rem_pio2f+0x30c>
 800552c:	46a1      	mov	r9, r4
 800552e:	458c      	cmp	ip, r1
 8005530:	dd07      	ble.n	8005542 <__kernel_rem_pio2f+0x2e6>
 8005532:	ece0 7a01 	vstmia	r0!, {s15}
 8005536:	3701      	adds	r7, #1
 8005538:	e7e7      	b.n	800550a <__kernel_rem_pio2f+0x2ae>
 800553a:	9804      	ldr	r0, [sp, #16]
 800553c:	f04f 0c01 	mov.w	ip, #1
 8005540:	e7d2      	b.n	80054e8 <__kernel_rem_pio2f+0x28c>
 8005542:	ecfe 6a01 	vldmia	lr!, {s13}
 8005546:	ed39 7a01 	vldmdb	r9!, {s14}
 800554a:	f10c 0c01 	add.w	ip, ip, #1
 800554e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005552:	e7ec      	b.n	800552e <__kernel_rem_pio2f+0x2d2>
 8005554:	3c01      	subs	r4, #1
 8005556:	e775      	b.n	8005444 <__kernel_rem_pio2f+0x1e8>
 8005558:	08005f04 	.word	0x08005f04
 800555c:	08005ed8 	.word	0x08005ed8
 8005560:	43800000 	.word	0x43800000
 8005564:	3b800000 	.word	0x3b800000
 8005568:	00000000 	.word	0x00000000
 800556c:	9b03      	ldr	r3, [sp, #12]
 800556e:	eeb0 0a48 	vmov.f32	s0, s16
 8005572:	1a98      	subs	r0, r3, r2
 8005574:	f000 fa4e 	bl	8005a14 <scalbnf>
 8005578:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8005560 <__kernel_rem_pio2f+0x304>
 800557c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005584:	db19      	blt.n	80055ba <__kernel_rem_pio2f+0x35e>
 8005586:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8005564 <__kernel_rem_pio2f+0x308>
 800558a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800558e:	aa08      	add	r2, sp, #32
 8005590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005594:	1c74      	adds	r4, r6, #1
 8005596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800559a:	3508      	adds	r5, #8
 800559c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80055a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80055a8:	ee10 3a10 	vmov	r3, s0
 80055ac:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80055b0:	ee17 3a90 	vmov	r3, s15
 80055b4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80055b8:	e74b      	b.n	8005452 <__kernel_rem_pio2f+0x1f6>
 80055ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80055be:	aa08      	add	r2, sp, #32
 80055c0:	ee10 3a10 	vmov	r3, s0
 80055c4:	4634      	mov	r4, r6
 80055c6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80055ca:	e742      	b.n	8005452 <__kernel_rem_pio2f+0x1f6>
 80055cc:	a808      	add	r0, sp, #32
 80055ce:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80055d2:	9001      	str	r0, [sp, #4]
 80055d4:	ee07 0a90 	vmov	s15, r0
 80055d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055dc:	3a01      	subs	r2, #1
 80055de:	ee67 7a80 	vmul.f32	s15, s15, s0
 80055e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80055e6:	ed61 7a01 	vstmdb	r1!, {s15}
 80055ea:	e73e      	b.n	800546a <__kernel_rem_pio2f+0x20e>
 80055ec:	ecfc 6a01 	vldmia	ip!, {s13}
 80055f0:	ecb6 7a01 	vldmia	r6!, {s14}
 80055f4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80055f8:	3001      	adds	r0, #1
 80055fa:	4550      	cmp	r0, sl
 80055fc:	dc01      	bgt.n	8005602 <__kernel_rem_pio2f+0x3a6>
 80055fe:	4288      	cmp	r0, r1
 8005600:	ddf4      	ble.n	80055ec <__kernel_rem_pio2f+0x390>
 8005602:	a858      	add	r0, sp, #352	; 0x160
 8005604:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005608:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800560c:	3a01      	subs	r2, #1
 800560e:	e730      	b.n	8005472 <__kernel_rem_pio2f+0x216>
 8005610:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8005612:	2a02      	cmp	r2, #2
 8005614:	dc09      	bgt.n	800562a <__kernel_rem_pio2f+0x3ce>
 8005616:	2a00      	cmp	r2, #0
 8005618:	dc2a      	bgt.n	8005670 <__kernel_rem_pio2f+0x414>
 800561a:	d043      	beq.n	80056a4 <__kernel_rem_pio2f+0x448>
 800561c:	f009 0007 	and.w	r0, r9, #7
 8005620:	b059      	add	sp, #356	; 0x164
 8005622:	ecbd 8b04 	vpop	{d8-d9}
 8005626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800562c:	2b03      	cmp	r3, #3
 800562e:	d1f5      	bne.n	800561c <__kernel_rem_pio2f+0x3c0>
 8005630:	ab30      	add	r3, sp, #192	; 0xc0
 8005632:	442b      	add	r3, r5
 8005634:	461a      	mov	r2, r3
 8005636:	4619      	mov	r1, r3
 8005638:	4620      	mov	r0, r4
 800563a:	2800      	cmp	r0, #0
 800563c:	f1a1 0104 	sub.w	r1, r1, #4
 8005640:	dc51      	bgt.n	80056e6 <__kernel_rem_pio2f+0x48a>
 8005642:	4621      	mov	r1, r4
 8005644:	2901      	cmp	r1, #1
 8005646:	f1a2 0204 	sub.w	r2, r2, #4
 800564a:	dc5c      	bgt.n	8005706 <__kernel_rem_pio2f+0x4aa>
 800564c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8005568 <__kernel_rem_pio2f+0x30c>
 8005650:	3304      	adds	r3, #4
 8005652:	2c01      	cmp	r4, #1
 8005654:	dc67      	bgt.n	8005726 <__kernel_rem_pio2f+0x4ca>
 8005656:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800565a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800565e:	2f00      	cmp	r7, #0
 8005660:	d167      	bne.n	8005732 <__kernel_rem_pio2f+0x4d6>
 8005662:	edc8 6a00 	vstr	s13, [r8]
 8005666:	ed88 7a01 	vstr	s14, [r8, #4]
 800566a:	edc8 7a02 	vstr	s15, [r8, #8]
 800566e:	e7d5      	b.n	800561c <__kernel_rem_pio2f+0x3c0>
 8005670:	aa30      	add	r2, sp, #192	; 0xc0
 8005672:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8005568 <__kernel_rem_pio2f+0x30c>
 8005676:	4413      	add	r3, r2
 8005678:	4622      	mov	r2, r4
 800567a:	2a00      	cmp	r2, #0
 800567c:	da24      	bge.n	80056c8 <__kernel_rem_pio2f+0x46c>
 800567e:	b34f      	cbz	r7, 80056d4 <__kernel_rem_pio2f+0x478>
 8005680:	eef1 7a47 	vneg.f32	s15, s14
 8005684:	edc8 7a00 	vstr	s15, [r8]
 8005688:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800568c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005690:	aa31      	add	r2, sp, #196	; 0xc4
 8005692:	2301      	movs	r3, #1
 8005694:	429c      	cmp	r4, r3
 8005696:	da20      	bge.n	80056da <__kernel_rem_pio2f+0x47e>
 8005698:	b10f      	cbz	r7, 800569e <__kernel_rem_pio2f+0x442>
 800569a:	eef1 7a67 	vneg.f32	s15, s15
 800569e:	edc8 7a01 	vstr	s15, [r8, #4]
 80056a2:	e7bb      	b.n	800561c <__kernel_rem_pio2f+0x3c0>
 80056a4:	aa30      	add	r2, sp, #192	; 0xc0
 80056a6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8005568 <__kernel_rem_pio2f+0x30c>
 80056aa:	4413      	add	r3, r2
 80056ac:	2c00      	cmp	r4, #0
 80056ae:	da05      	bge.n	80056bc <__kernel_rem_pio2f+0x460>
 80056b0:	b10f      	cbz	r7, 80056b6 <__kernel_rem_pio2f+0x45a>
 80056b2:	eef1 7a67 	vneg.f32	s15, s15
 80056b6:	edc8 7a00 	vstr	s15, [r8]
 80056ba:	e7af      	b.n	800561c <__kernel_rem_pio2f+0x3c0>
 80056bc:	ed33 7a01 	vldmdb	r3!, {s14}
 80056c0:	3c01      	subs	r4, #1
 80056c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056c6:	e7f1      	b.n	80056ac <__kernel_rem_pio2f+0x450>
 80056c8:	ed73 7a01 	vldmdb	r3!, {s15}
 80056cc:	3a01      	subs	r2, #1
 80056ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056d2:	e7d2      	b.n	800567a <__kernel_rem_pio2f+0x41e>
 80056d4:	eef0 7a47 	vmov.f32	s15, s14
 80056d8:	e7d4      	b.n	8005684 <__kernel_rem_pio2f+0x428>
 80056da:	ecb2 7a01 	vldmia	r2!, {s14}
 80056de:	3301      	adds	r3, #1
 80056e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056e4:	e7d6      	b.n	8005694 <__kernel_rem_pio2f+0x438>
 80056e6:	edd1 7a00 	vldr	s15, [r1]
 80056ea:	edd1 6a01 	vldr	s13, [r1, #4]
 80056ee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80056f2:	3801      	subs	r0, #1
 80056f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056f8:	ed81 7a00 	vstr	s14, [r1]
 80056fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005700:	edc1 7a01 	vstr	s15, [r1, #4]
 8005704:	e799      	b.n	800563a <__kernel_rem_pio2f+0x3de>
 8005706:	edd2 7a00 	vldr	s15, [r2]
 800570a:	edd2 6a01 	vldr	s13, [r2, #4]
 800570e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005712:	3901      	subs	r1, #1
 8005714:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005718:	ed82 7a00 	vstr	s14, [r2]
 800571c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005720:	edc2 7a01 	vstr	s15, [r2, #4]
 8005724:	e78e      	b.n	8005644 <__kernel_rem_pio2f+0x3e8>
 8005726:	ed33 7a01 	vldmdb	r3!, {s14}
 800572a:	3c01      	subs	r4, #1
 800572c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005730:	e78f      	b.n	8005652 <__kernel_rem_pio2f+0x3f6>
 8005732:	eef1 6a66 	vneg.f32	s13, s13
 8005736:	eeb1 7a47 	vneg.f32	s14, s14
 800573a:	edc8 6a00 	vstr	s13, [r8]
 800573e:	ed88 7a01 	vstr	s14, [r8, #4]
 8005742:	eef1 7a67 	vneg.f32	s15, s15
 8005746:	e790      	b.n	800566a <__kernel_rem_pio2f+0x40e>

08005748 <__kernel_sinf>:
 8005748:	ee10 3a10 	vmov	r3, s0
 800574c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005750:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005754:	da04      	bge.n	8005760 <__kernel_sinf+0x18>
 8005756:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800575a:	ee17 3a90 	vmov	r3, s15
 800575e:	b35b      	cbz	r3, 80057b8 <__kernel_sinf+0x70>
 8005760:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005764:	eddf 7a15 	vldr	s15, [pc, #84]	; 80057bc <__kernel_sinf+0x74>
 8005768:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80057c0 <__kernel_sinf+0x78>
 800576c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005770:	eddf 7a14 	vldr	s15, [pc, #80]	; 80057c4 <__kernel_sinf+0x7c>
 8005774:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005778:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80057c8 <__kernel_sinf+0x80>
 800577c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005780:	eddf 7a12 	vldr	s15, [pc, #72]	; 80057cc <__kernel_sinf+0x84>
 8005784:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005788:	eee6 7a07 	vfma.f32	s15, s12, s14
 800578c:	b930      	cbnz	r0, 800579c <__kernel_sinf+0x54>
 800578e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80057d0 <__kernel_sinf+0x88>
 8005792:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005796:	eea6 0a26 	vfma.f32	s0, s12, s13
 800579a:	4770      	bx	lr
 800579c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80057a0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80057a4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80057a8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80057ac:	eddf 7a09 	vldr	s15, [pc, #36]	; 80057d4 <__kernel_sinf+0x8c>
 80057b0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80057b4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	2f2ec9d3 	.word	0x2f2ec9d3
 80057c0:	b2d72f34 	.word	0xb2d72f34
 80057c4:	3638ef1b 	.word	0x3638ef1b
 80057c8:	b9500d01 	.word	0xb9500d01
 80057cc:	3c088889 	.word	0x3c088889
 80057d0:	be2aaaab 	.word	0xbe2aaaab
 80057d4:	3e2aaaab 	.word	0x3e2aaaab

080057d8 <atanf>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	ee10 5a10 	vmov	r5, s0
 80057de:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80057e2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80057e6:	eef0 7a40 	vmov.f32	s15, s0
 80057ea:	db10      	blt.n	800580e <atanf+0x36>
 80057ec:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80057f0:	dd04      	ble.n	80057fc <atanf+0x24>
 80057f2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80057f6:	eeb0 0a67 	vmov.f32	s0, s15
 80057fa:	bd38      	pop	{r3, r4, r5, pc}
 80057fc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8005934 <atanf+0x15c>
 8005800:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8005938 <atanf+0x160>
 8005804:	2d00      	cmp	r5, #0
 8005806:	bfd8      	it	le
 8005808:	eef0 7a40 	vmovle.f32	s15, s0
 800580c:	e7f3      	b.n	80057f6 <atanf+0x1e>
 800580e:	4b4b      	ldr	r3, [pc, #300]	; (800593c <atanf+0x164>)
 8005810:	429c      	cmp	r4, r3
 8005812:	dc10      	bgt.n	8005836 <atanf+0x5e>
 8005814:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8005818:	da0a      	bge.n	8005830 <atanf+0x58>
 800581a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005940 <atanf+0x168>
 800581e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8005822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005826:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800582a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800582e:	dce2      	bgt.n	80057f6 <atanf+0x1e>
 8005830:	f04f 33ff 	mov.w	r3, #4294967295
 8005834:	e013      	b.n	800585e <atanf+0x86>
 8005836:	f000 f8a3 	bl	8005980 <fabsf>
 800583a:	4b42      	ldr	r3, [pc, #264]	; (8005944 <atanf+0x16c>)
 800583c:	429c      	cmp	r4, r3
 800583e:	dc4f      	bgt.n	80058e0 <atanf+0x108>
 8005840:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005844:	429c      	cmp	r4, r3
 8005846:	dc41      	bgt.n	80058cc <atanf+0xf4>
 8005848:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800584c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005850:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005854:	2300      	movs	r3, #0
 8005856:	ee30 0a27 	vadd.f32	s0, s0, s15
 800585a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8005864:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005948 <atanf+0x170>
 8005868:	eddf 5a38 	vldr	s11, [pc, #224]	; 800594c <atanf+0x174>
 800586c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8005950 <atanf+0x178>
 8005870:	ee66 6a06 	vmul.f32	s13, s12, s12
 8005874:	eee6 5a87 	vfma.f32	s11, s13, s14
 8005878:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005954 <atanf+0x17c>
 800587c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005880:	eddf 5a35 	vldr	s11, [pc, #212]	; 8005958 <atanf+0x180>
 8005884:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005888:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800595c <atanf+0x184>
 800588c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005890:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005960 <atanf+0x188>
 8005894:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005898:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005964 <atanf+0x18c>
 800589c:	eea6 5a87 	vfma.f32	s10, s13, s14
 80058a0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005968 <atanf+0x190>
 80058a4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80058a8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800596c <atanf+0x194>
 80058ac:	eea7 5a26 	vfma.f32	s10, s14, s13
 80058b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005970 <atanf+0x198>
 80058b4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80058b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80058bc:	eea5 7a86 	vfma.f32	s14, s11, s12
 80058c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80058c4:	d121      	bne.n	800590a <atanf+0x132>
 80058c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058ca:	e794      	b.n	80057f6 <atanf+0x1e>
 80058cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80058d0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80058d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80058d8:	2301      	movs	r3, #1
 80058da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80058de:	e7be      	b.n	800585e <atanf+0x86>
 80058e0:	4b24      	ldr	r3, [pc, #144]	; (8005974 <atanf+0x19c>)
 80058e2:	429c      	cmp	r4, r3
 80058e4:	dc0b      	bgt.n	80058fe <atanf+0x126>
 80058e6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80058ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058ee:	eea0 7a27 	vfma.f32	s14, s0, s15
 80058f2:	2302      	movs	r3, #2
 80058f4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80058f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058fc:	e7af      	b.n	800585e <atanf+0x86>
 80058fe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005902:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005906:	2303      	movs	r3, #3
 8005908:	e7a9      	b.n	800585e <atanf+0x86>
 800590a:	4a1b      	ldr	r2, [pc, #108]	; (8005978 <atanf+0x1a0>)
 800590c:	491b      	ldr	r1, [pc, #108]	; (800597c <atanf+0x1a4>)
 800590e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005912:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005916:	ed93 0a00 	vldr	s0, [r3]
 800591a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800591e:	ed92 0a00 	vldr	s0, [r2]
 8005922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005926:	2d00      	cmp	r5, #0
 8005928:	ee70 7a67 	vsub.f32	s15, s0, s15
 800592c:	bfb8      	it	lt
 800592e:	eef1 7a67 	vneglt.f32	s15, s15
 8005932:	e760      	b.n	80057f6 <atanf+0x1e>
 8005934:	3fc90fdb 	.word	0x3fc90fdb
 8005938:	bfc90fdb 	.word	0xbfc90fdb
 800593c:	3edfffff 	.word	0x3edfffff
 8005940:	7149f2ca 	.word	0x7149f2ca
 8005944:	3f97ffff 	.word	0x3f97ffff
 8005948:	3c8569d7 	.word	0x3c8569d7
 800594c:	3d4bda59 	.word	0x3d4bda59
 8005950:	bd6ef16b 	.word	0xbd6ef16b
 8005954:	3d886b35 	.word	0x3d886b35
 8005958:	3dba2e6e 	.word	0x3dba2e6e
 800595c:	3e124925 	.word	0x3e124925
 8005960:	3eaaaaab 	.word	0x3eaaaaab
 8005964:	bd15a221 	.word	0xbd15a221
 8005968:	bd9d8795 	.word	0xbd9d8795
 800596c:	bde38e38 	.word	0xbde38e38
 8005970:	be4ccccd 	.word	0xbe4ccccd
 8005974:	401bffff 	.word	0x401bffff
 8005978:	08005f10 	.word	0x08005f10
 800597c:	08005f20 	.word	0x08005f20

08005980 <fabsf>:
 8005980:	ee10 3a10 	vmov	r3, s0
 8005984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005988:	ee00 3a10 	vmov	s0, r3
 800598c:	4770      	bx	lr
	...

08005990 <floorf>:
 8005990:	ee10 3a10 	vmov	r3, s0
 8005994:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005998:	3a7f      	subs	r2, #127	; 0x7f
 800599a:	2a16      	cmp	r2, #22
 800599c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80059a0:	dc2a      	bgt.n	80059f8 <floorf+0x68>
 80059a2:	2a00      	cmp	r2, #0
 80059a4:	da11      	bge.n	80059ca <floorf+0x3a>
 80059a6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005a08 <floorf+0x78>
 80059aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80059ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80059b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b6:	dd05      	ble.n	80059c4 <floorf+0x34>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	da23      	bge.n	8005a04 <floorf+0x74>
 80059bc:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <floorf+0x7c>)
 80059be:	2900      	cmp	r1, #0
 80059c0:	bf18      	it	ne
 80059c2:	4613      	movne	r3, r2
 80059c4:	ee00 3a10 	vmov	s0, r3
 80059c8:	4770      	bx	lr
 80059ca:	4911      	ldr	r1, [pc, #68]	; (8005a10 <floorf+0x80>)
 80059cc:	4111      	asrs	r1, r2
 80059ce:	420b      	tst	r3, r1
 80059d0:	d0fa      	beq.n	80059c8 <floorf+0x38>
 80059d2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005a08 <floorf+0x78>
 80059d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80059da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80059de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e2:	ddef      	ble.n	80059c4 <floorf+0x34>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bfbe      	ittt	lt
 80059e8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80059ec:	fa40 f202 	asrlt.w	r2, r0, r2
 80059f0:	189b      	addlt	r3, r3, r2
 80059f2:	ea23 0301 	bic.w	r3, r3, r1
 80059f6:	e7e5      	b.n	80059c4 <floorf+0x34>
 80059f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80059fc:	d3e4      	bcc.n	80059c8 <floorf+0x38>
 80059fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005a02:	4770      	bx	lr
 8005a04:	2300      	movs	r3, #0
 8005a06:	e7dd      	b.n	80059c4 <floorf+0x34>
 8005a08:	7149f2ca 	.word	0x7149f2ca
 8005a0c:	bf800000 	.word	0xbf800000
 8005a10:	007fffff 	.word	0x007fffff

08005a14 <scalbnf>:
 8005a14:	ee10 3a10 	vmov	r3, s0
 8005a18:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005a1c:	d025      	beq.n	8005a6a <scalbnf+0x56>
 8005a1e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005a22:	d302      	bcc.n	8005a2a <scalbnf+0x16>
 8005a24:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005a28:	4770      	bx	lr
 8005a2a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005a2e:	d122      	bne.n	8005a76 <scalbnf+0x62>
 8005a30:	4b2a      	ldr	r3, [pc, #168]	; (8005adc <scalbnf+0xc8>)
 8005a32:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005ae0 <scalbnf+0xcc>
 8005a36:	4298      	cmp	r0, r3
 8005a38:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005a3c:	db16      	blt.n	8005a6c <scalbnf+0x58>
 8005a3e:	ee10 3a10 	vmov	r3, s0
 8005a42:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005a46:	3a19      	subs	r2, #25
 8005a48:	4402      	add	r2, r0
 8005a4a:	2afe      	cmp	r2, #254	; 0xfe
 8005a4c:	dd15      	ble.n	8005a7a <scalbnf+0x66>
 8005a4e:	ee10 3a10 	vmov	r3, s0
 8005a52:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005ae4 <scalbnf+0xd0>
 8005a56:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005ae8 <scalbnf+0xd4>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	eeb0 7a67 	vmov.f32	s14, s15
 8005a60:	bfb8      	it	lt
 8005a62:	eef0 7a66 	vmovlt.f32	s15, s13
 8005a66:	ee27 0a27 	vmul.f32	s0, s14, s15
 8005a6a:	4770      	bx	lr
 8005a6c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005aec <scalbnf+0xd8>
 8005a70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005a74:	4770      	bx	lr
 8005a76:	0dd2      	lsrs	r2, r2, #23
 8005a78:	e7e6      	b.n	8005a48 <scalbnf+0x34>
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	dd06      	ble.n	8005a8c <scalbnf+0x78>
 8005a7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005a82:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005a86:	ee00 3a10 	vmov	s0, r3
 8005a8a:	4770      	bx	lr
 8005a8c:	f112 0f16 	cmn.w	r2, #22
 8005a90:	da1a      	bge.n	8005ac8 <scalbnf+0xb4>
 8005a92:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005a96:	4298      	cmp	r0, r3
 8005a98:	ee10 3a10 	vmov	r3, s0
 8005a9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa0:	dd0a      	ble.n	8005ab8 <scalbnf+0xa4>
 8005aa2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005ae4 <scalbnf+0xd0>
 8005aa6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005ae8 <scalbnf+0xd4>
 8005aaa:	eef0 7a40 	vmov.f32	s15, s0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	bf18      	it	ne
 8005ab2:	eeb0 0a47 	vmovne.f32	s0, s14
 8005ab6:	e7db      	b.n	8005a70 <scalbnf+0x5c>
 8005ab8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005aec <scalbnf+0xd8>
 8005abc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005af0 <scalbnf+0xdc>
 8005ac0:	eef0 7a40 	vmov.f32	s15, s0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	e7f3      	b.n	8005ab0 <scalbnf+0x9c>
 8005ac8:	3219      	adds	r2, #25
 8005aca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ace:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005ad2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005af4 <scalbnf+0xe0>
 8005ad6:	ee07 3a10 	vmov	s14, r3
 8005ada:	e7c4      	b.n	8005a66 <scalbnf+0x52>
 8005adc:	ffff3cb0 	.word	0xffff3cb0
 8005ae0:	4c000000 	.word	0x4c000000
 8005ae4:	7149f2ca 	.word	0x7149f2ca
 8005ae8:	f149f2ca 	.word	0xf149f2ca
 8005aec:	0da24260 	.word	0x0da24260
 8005af0:	8da24260 	.word	0x8da24260
 8005af4:	33000000 	.word	0x33000000

08005af8 <_init>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr

08005b04 <_fini>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr

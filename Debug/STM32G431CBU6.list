
STM32G431CBU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08005590  08005590  00015590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a8  080059a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080059a8  080059a8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059a8  080059a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a8  080059a8  000159a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059ac  080059ac  000159ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080059b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000074  08005a24  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08005a24  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb45  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa8  00000000  00000000  0003bbe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001383d  00000000  00000000  0003eb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  000523d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013a0  00000000  00000000  00053578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000036a4  00000000  00000000  00054918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0b9  00000000  00000000  00057fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7d9f  00000000  00000000  00074075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014be14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003154  00000000  00000000  0014be64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000074 	.word	0x20000074
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005578 	.word	0x08005578

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	08005578 	.word	0x08005578

08000218 <gfDivideAvoidZero>:
#include "GeneralFunctions.h"
#include "GlobalConstants.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
	float result;
	if ( den >= 0 && den < threshold )
 8000218:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800021c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000220:	db04      	blt.n	800022c <gfDivideAvoidZero+0x14>
 8000222:	eef4 0ac1 	vcmpe.f32	s1, s2
 8000226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800022a:	d411      	bmi.n	8000250 <gfDivideAvoidZero+0x38>
		den = threshold;
	else if( den < 0 && den > -threshold)
 800022c:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8000230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000234:	d402      	bmi.n	800023c <gfDivideAvoidZero+0x24>
		den = -threshold;

	result = num / den;
	return result;
}
 8000236:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800023a:	4770      	bx	lr
	else if( den < 0 && den > -threshold)
 800023c:	eeb1 1a41 	vneg.f32	s2, s2
 8000240:	eeb4 1ae0 	vcmpe.f32	s2, s1
 8000244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000248:	d5f5      	bpl.n	8000236 <gfDivideAvoidZero+0x1e>
		den = -threshold;
 800024a:	eef0 0a41 	vmov.f32	s1, s2
 800024e:	e7f2      	b.n	8000236 <gfDivideAvoidZero+0x1e>
		den = threshold;
 8000250:	eef0 0a41 	vmov.f32	s1, s2
 8000254:	e7ef      	b.n	8000236 <gfDivideAvoidZero+0x1e>

08000256 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000256:	eef0 7a40 	vmov.f32	s15, s0
 800025a:	eeb0 0a41 	vmov.f32	s0, s2
	if(input > Upper) input = Upper;
 800025e:	eef4 7ae0 	vcmpe.f32	s15, s1
 8000262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000266:	dc01      	bgt.n	800026c <gUpperLowerLimit+0x16>
 8000268:	eef0 0a67 	vmov.f32	s1, s15
	if(input < Lower) input = Lower;
 800026c:	eef4 0ac0 	vcmpe.f32	s1, s0
 8000270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000274:	d401      	bmi.n	800027a <gUpperLowerLimit+0x24>
 8000276:	eeb0 0a60 	vmov.f32	s0, s1
	return input;
}
 800027a:	4770      	bx	lr

0800027c <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
	*outputMode = OUTPUTMODE_RESET;
 800027c:	2300      	movs	r3, #0
 800027e:	700b      	strb	r3, [r1, #0]
	Duty[0] = 0.0f;
 8000280:	2300      	movs	r3, #0
 8000282:	6003      	str	r3, [r0, #0]
	Duty[1] = 0.0f;
 8000284:	6043      	str	r3, [r0, #4]
	Duty[2] = 0.0f;
 8000286:	6083      	str	r3, [r0, #8]
}
 8000288:	4770      	bx	lr

0800028a <gLPF>:
	// Under approximation  1/wc >> Ts
	// gainLPF = Ts/(tau + Ts) = Ts / tau = wc * Ts;
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 800028a:	ee20 1a81 	vmul.f32	s2, s1, s2
	yn_1 = *y;
 800028e:	ed90 7a00 	vldr	s14, [r0]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 8000292:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000296:	ee77 7ac1 	vsub.f32	s15, s15, s2
 800029a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800029e:	ee21 1a00 	vmul.f32	s2, s2, s0
 80002a2:	ee77 7a81 	vadd.f32	s15, s15, s2
 80002a6:	edc0 7a00 	vstr	s15, [r0]
}
 80002aa:	4770      	bx	lr

080002ac <Sequence_Low_Freq>:
static inline void slctElectAngleFromPosMode(uint8_t posMode, struct SensorData *sensData);
static inline void slctCntlFromDrvMode(uint8_t drvMode, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode);
static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData);


void Sequence_Low_Freq(void){
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ed2d 8b04 	vpush	{d8-d9}
 80002b2:	b08b      	sub	sp, #44	; 0x2c
	float propoDuty2;


	//read IO signals
	//gButton1 = readButton1();
	gVolume = 0; //readVolume();
 80002b4:	4b7b      	ldr	r3, [pc, #492]	; (80004a4 <Sequence_Low_Freq+0x1f8>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]

	propoDuty = readPropoDuty();
 80002ba:	f000 f9b1 	bl	8000620 <readPropoDuty>
 80002be:	eef0 8a40 	vmov.f32	s17, s0
	propoDuty2 = readPropoDuty2();
 80002c2:	f000 fa2d 	bl	8000720 <readPropoDuty2>
 80002c6:	eeb0 8a40 	vmov.f32	s16, s0
	gLPF(propoDuty, ANGULARFREQ2Hz, CARRIERCYCLE, &gPropoDuty);
 80002ca:	eddf 9a77 	vldr	s19, [pc, #476]	; 80004a8 <Sequence_Low_Freq+0x1fc>
 80002ce:	ed9f 9a77 	vldr	s18, [pc, #476]	; 80004ac <Sequence_Low_Freq+0x200>
 80002d2:	4877      	ldr	r0, [pc, #476]	; (80004b0 <Sequence_Low_Freq+0x204>)
 80002d4:	eeb0 1a69 	vmov.f32	s2, s19
 80002d8:	eef0 0a49 	vmov.f32	s1, s18
 80002dc:	eeb0 0a68 	vmov.f32	s0, s17
 80002e0:	f7ff ffd3 	bl	800028a <gLPF>
	gLPF(propoDuty2, ANGULARFREQ2Hz, CARRIERCYCLE, &gPropoDuty2);
 80002e4:	4873      	ldr	r0, [pc, #460]	; (80004b4 <Sequence_Low_Freq+0x208>)
 80002e6:	eeb0 1a69 	vmov.f32	s2, s19
 80002ea:	eef0 0a49 	vmov.f32	s1, s18
 80002ee:	eeb0 0a48 	vmov.f32	s0, s16
 80002f2:	f7ff ffca 	bl	800028a <gLPF>

	sSensData.Vdc = 10.0f;//readVdc();
 80002f6:	4c70      	ldr	r4, [pc, #448]	; (80004b8 <Sequence_Low_Freq+0x20c>)
 80002f8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80002fc:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
	gLPF(sSensData.Vdc, ANGULARFREQ20Hz, LOWSEQUENCEPERIOD, &sSensData.Vdc_LPF);
 8000300:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8000304:	ed9f 1a6d 	vldr	s2, [pc, #436]	; 80004bc <Sequence_Low_Freq+0x210>
 8000308:	eddf 0a6d 	vldr	s1, [pc, #436]	; 80004c0 <Sequence_Low_Freq+0x214>
 800030c:	f7ff ffbd 	bl	800028a <gLPF>
	sSensData.twoDivVdc = gfDivideAvoidZero(2.0f, sSensData.Vdc_LPF, 1.0f);
 8000310:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000314:	edd4 0a0b 	vldr	s1, [r4, #44]	; 0x2c
 8000318:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800031c:	f7ff ff7c 	bl	8000218 <gfDivideAvoidZero>
 8000320:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30

	if(sInitCnt < INITCNTMAX){
 8000324:	4b67      	ldr	r3, [pc, #412]	; (80004c4 <Sequence_Low_Freq+0x218>)
 8000326:	881b      	ldrh	r3, [r3, #0]
 8000328:	2b28      	cmp	r3, #40	; 0x28
 800032a:	d819      	bhi.n	8000360 <Sequence_Low_Freq+0xb4>
		sInitCnt++;
 800032c:	3301      	adds	r3, #1
 800032e:	b29b      	uxth	r3, r3
 8000330:	4a64      	ldr	r2, [pc, #400]	; (80004c4 <Sequence_Low_Freq+0x218>)
 8000332:	8013      	strh	r3, [r2, #0]
		sPosMode = POSMODE_HALL;
 8000334:	4a64      	ldr	r2, [pc, #400]	; (80004c8 <Sequence_Low_Freq+0x21c>)
 8000336:	2102      	movs	r1, #2
 8000338:	7011      	strb	r1, [r2, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 800033a:	4a64      	ldr	r2, [pc, #400]	; (80004cc <Sequence_Low_Freq+0x220>)
 800033c:	2100      	movs	r1, #0
 800033e:	7011      	strb	r1, [r2, #0]
		sElectAngVeloRefRateLimit = 0;
 8000340:	4a63      	ldr	r2, [pc, #396]	; (80004d0 <Sequence_Low_Freq+0x224>)
 8000342:	2100      	movs	r1, #0
 8000344:	6011      	str	r1, [r2, #0]

		// Get Current Sensor Offset
		if( sInitCnt <= INITCNTST1){
 8000346:	2b01      	cmp	r3, #1
 8000348:	d903      	bls.n	8000352 <Sequence_Low_Freq+0xa6>
			InitVectorControl(sSensData, &sVectorControlData);
		}

		calcCurrentRef(sDrvMode, &sVectorControlData);
	}
}
 800034a:	b00b      	add	sp, #44	; 0x2c
 800034c:	ecbd 8b04 	vpop	{d8-d9}
 8000350:	bd30      	pop	{r4, r5, pc}
			sSensData.Iuvw_AD_Offset[0] = 2110.0f;
 8000352:	4a60      	ldr	r2, [pc, #384]	; (80004d4 <Sequence_Low_Freq+0x228>)
 8000354:	61e2      	str	r2, [r4, #28]
			sSensData.Iuvw_AD_Offset[1] = 2019.0f;
 8000356:	4a60      	ldr	r2, [pc, #384]	; (80004d8 <Sequence_Low_Freq+0x22c>)
 8000358:	6222      	str	r2, [r4, #32]
			sSensData.Iuvw_AD_Offset[2] = 2066.0f;
 800035a:	4a60      	ldr	r2, [pc, #384]	; (80004dc <Sequence_Low_Freq+0x230>)
 800035c:	6262      	str	r2, [r4, #36]	; 0x24
 800035e:	e7f4      	b.n	800034a <Sequence_Low_Freq+0x9e>
		posMode_pre = sPosMode;
 8000360:	4b59      	ldr	r3, [pc, #356]	; (80004c8 <Sequence_Low_Freq+0x21c>)
 8000362:	781a      	ldrb	r2, [r3, #0]
		drvMode_pre = sDrvMode;
 8000364:	4b59      	ldr	r3, [pc, #356]	; (80004cc <Sequence_Low_Freq+0x220>)
 8000366:	781b      	ldrb	r3, [r3, #0]
		slctPosMode(gElectFreq, &sPosMode);
 8000368:	495d      	ldr	r1, [pc, #372]	; (80004e0 <Sequence_Low_Freq+0x234>)
 800036a:	edd1 7a00 	vldr	s15, [r1]
	//gFreerunCnt = readFreeRunCnt();
	//gProcessingLoad = (float)gFreerunCnt * ONEDIVCARRIERCNT;
}
void inline slctPosMode(float electFreq, uint8_t* posMode){

	if(*posMode != POSMODE_HALL_PLL){
 800036e:	2a03      	cmp	r2, #3
 8000370:	d02a      	beq.n	80003c8 <Sequence_Low_Freq+0x11c>
		if (electFreq > ELECTFREQ_VALIDPLL)
 8000372:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80004e4 <Sequence_Low_Freq+0x238>
 8000376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800037a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800037e:	dd1f      	ble.n	80003c0 <Sequence_Low_Freq+0x114>
			*posMode = POSMODE_HALL_PLL;
 8000380:	4a51      	ldr	r2, [pc, #324]	; (80004c8 <Sequence_Low_Freq+0x21c>)
 8000382:	2103      	movs	r1, #3
 8000384:	7011      	strb	r1, [r2, #0]

}

void inline slctDrvMode(float electFreq, uint8_t* drvMode){

	if(*drvMode != DRVMODE_VECTORCONTROL){
 8000386:	2b04      	cmp	r3, #4
 8000388:	d031      	beq.n	80003ee <Sequence_Low_Freq+0x142>
		if (electFreq > ELECTFREQ_OPENLOOP2VECTORCONTROL)
 800038a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80004e8 <Sequence_Low_Freq+0x23c>
 800038e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000396:	dd26      	ble.n	80003e6 <Sequence_Low_Freq+0x13a>
			*drvMode = DRVMODE_VECTORCONTROL;
 8000398:	4a4c      	ldr	r2, [pc, #304]	; (80004cc <Sequence_Low_Freq+0x220>)
 800039a:	2104      	movs	r1, #4
 800039c:	7011      	strb	r1, [r2, #0]
		if( drvMode_pre == DRVMODE_OPENLOOP && sDrvMode == DRVMODE_VECTORCONTROL){  // Init for VectorControl
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d034      	beq.n	800040c <Sequence_Low_Freq+0x160>
		calcCurrentRef(sDrvMode, &sVectorControlData);
 80003a2:	4b4a      	ldr	r3, [pc, #296]	; (80004cc <Sequence_Low_Freq+0x220>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
			gOffDuty(Duty, outputMode);
	}
}

static inline void calcCurrentRef(uint8_t drvMode, struct VectorControlData *vectorControlData){
	switch(drvMode){
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d04f      	beq.n	800044a <Sequence_Low_Freq+0x19e>
 80003aa:	2b04      	cmp	r3, #4
 80003ac:	d055      	beq.n	800045a <Sequence_Low_Freq+0x1ae>
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d044      	beq.n	800043c <Sequence_Low_Freq+0x190>
			vectorControlData->Idq_ref[1] = IQREFMAX * gVolume;
			gLPF(vectorControlData->Idq_ref[0], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[0]);
			gLPF(vectorControlData->Idq_ref[1], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[1]);
			break;
		default :
			vectorControlData->Idq_ref[0] = 0.0f;
 80003b2:	4b4e      	ldr	r3, [pc, #312]	; (80004ec <Sequence_Low_Freq+0x240>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
 80003b8:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
 80003ba:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
 80003bc:	60da      	str	r2, [r3, #12]
}
 80003be:	e7c4      	b.n	800034a <Sequence_Low_Freq+0x9e>
			*posMode = POSMODE_HALL;
 80003c0:	4a41      	ldr	r2, [pc, #260]	; (80004c8 <Sequence_Low_Freq+0x21c>)
 80003c2:	2102      	movs	r1, #2
 80003c4:	7011      	strb	r1, [r2, #0]
 80003c6:	e7de      	b.n	8000386 <Sequence_Low_Freq+0xda>
		if (electFreq < ELECTFREQ_INVALIDPLL)
 80003c8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80004f0 <Sequence_Low_Freq+0x244>
 80003cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d4:	d503      	bpl.n	80003de <Sequence_Low_Freq+0x132>
			*posMode = POSMODE_HALL;
 80003d6:	4a3c      	ldr	r2, [pc, #240]	; (80004c8 <Sequence_Low_Freq+0x21c>)
 80003d8:	2102      	movs	r1, #2
 80003da:	7011      	strb	r1, [r2, #0]
 80003dc:	e7d3      	b.n	8000386 <Sequence_Low_Freq+0xda>
			*posMode = POSMODE_HALL_PLL;
 80003de:	4a3a      	ldr	r2, [pc, #232]	; (80004c8 <Sequence_Low_Freq+0x21c>)
 80003e0:	2103      	movs	r1, #3
 80003e2:	7011      	strb	r1, [r2, #0]
 80003e4:	e7cf      	b.n	8000386 <Sequence_Low_Freq+0xda>
			*drvMode = DRVMODE_OPENLOOP;
 80003e6:	4a39      	ldr	r2, [pc, #228]	; (80004cc <Sequence_Low_Freq+0x220>)
 80003e8:	2102      	movs	r1, #2
 80003ea:	7011      	strb	r1, [r2, #0]
 80003ec:	e7d7      	b.n	800039e <Sequence_Low_Freq+0xf2>
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
 80003ee:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80004f4 <Sequence_Low_Freq+0x248>
 80003f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003fa:	d503      	bpl.n	8000404 <Sequence_Low_Freq+0x158>
			*drvMode = DRVMODE_OPENLOOP;
 80003fc:	4a33      	ldr	r2, [pc, #204]	; (80004cc <Sequence_Low_Freq+0x220>)
 80003fe:	2102      	movs	r1, #2
 8000400:	7011      	strb	r1, [r2, #0]
 8000402:	e7cc      	b.n	800039e <Sequence_Low_Freq+0xf2>
			*drvMode = DRVMODE_VECTORCONTROL;
 8000404:	4a31      	ldr	r2, [pc, #196]	; (80004cc <Sequence_Low_Freq+0x220>)
 8000406:	2104      	movs	r1, #4
 8000408:	7011      	strb	r1, [r2, #0]
 800040a:	e7c8      	b.n	800039e <Sequence_Low_Freq+0xf2>
		if( drvMode_pre == DRVMODE_OPENLOOP && sDrvMode == DRVMODE_VECTORCONTROL){  // Init for VectorControl
 800040c:	4b2f      	ldr	r3, [pc, #188]	; (80004cc <Sequence_Low_Freq+0x220>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b04      	cmp	r3, #4
 8000412:	d1c6      	bne.n	80003a2 <Sequence_Low_Freq+0xf6>
			InitVectorControl(sSensData, &sVectorControlData);
 8000414:	4d28      	ldr	r5, [pc, #160]	; (80004b8 <Sequence_Low_Freq+0x20c>)
 8000416:	4b35      	ldr	r3, [pc, #212]	; (80004ec <Sequence_Low_Freq+0x240>)
 8000418:	9309      	str	r3, [sp, #36]	; 0x24
 800041a:	466c      	mov	r4, sp
 800041c:	f105 0c10 	add.w	ip, r5, #16
 8000420:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000426:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800042a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800042c:	f8dc 3000 	ldr.w	r3, [ip]
 8000430:	6023      	str	r3, [r4, #0]
 8000432:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000436:	f000 fc6f 	bl	8000d18 <InitVectorControl>
 800043a:	e7b2      	b.n	80003a2 <Sequence_Low_Freq+0xf6>
			vectorControlData->Idq_ref[0] = 0.0f;
 800043c:	4b2b      	ldr	r3, [pc, #172]	; (80004ec <Sequence_Low_Freq+0x240>)
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
			vectorControlData->Idq_ref[1] = 0.0f;
 8000442:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = 0.0f;
 8000444:	609a      	str	r2, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = 0.0f;
 8000446:	60da      	str	r2, [r3, #12]
			break;
 8000448:	e77f      	b.n	800034a <Sequence_Low_Freq+0x9e>
			vectorControlData->Idq_ref[0] = vectorControlData->Idq_LPF[0];
 800044a:	4b28      	ldr	r3, [pc, #160]	; (80004ec <Sequence_Low_Freq+0x240>)
 800044c:	6999      	ldr	r1, [r3, #24]
 800044e:	6019      	str	r1, [r3, #0]
			vectorControlData->Idq_ref[1] = vectorControlData->Idq_LPF[1];
 8000450:	69da      	ldr	r2, [r3, #28]
 8000452:	605a      	str	r2, [r3, #4]
			vectorControlData->Idq_ref_LPF[0] = vectorControlData->Idq_LPF[0];
 8000454:	6099      	str	r1, [r3, #8]
			vectorControlData->Idq_ref_LPF[1] = vectorControlData->Idq_LPF[1];
 8000456:	60da      	str	r2, [r3, #12]
			break;
 8000458:	e777      	b.n	800034a <Sequence_Low_Freq+0x9e>
			vectorControlData->Idq_ref[0] = 0.0f;
 800045a:	4c24      	ldr	r4, [pc, #144]	; (80004ec <Sequence_Low_Freq+0x240>)
 800045c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80004f8 <Sequence_Low_Freq+0x24c>
 8000460:	ed84 0a00 	vstr	s0, [r4]
			vectorControlData->Idq_ref[1] = IQREFMAX * gVolume;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <Sequence_Low_Freq+0x1f8>)
 8000466:	edd3 7a00 	vldr	s15, [r3]
 800046a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800046e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000472:	edc4 7a01 	vstr	s15, [r4, #4]
			gLPF(vectorControlData->Idq_ref[0], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[0]);
 8000476:	eddf 8a11 	vldr	s17, [pc, #68]	; 80004bc <Sequence_Low_Freq+0x210>
 800047a:	ed9f 8a20 	vldr	s16, [pc, #128]	; 80004fc <Sequence_Low_Freq+0x250>
 800047e:	f104 0008 	add.w	r0, r4, #8
 8000482:	eeb0 1a68 	vmov.f32	s2, s17
 8000486:	eef0 0a48 	vmov.f32	s1, s16
 800048a:	f7ff fefe 	bl	800028a <gLPF>
			gLPF(vectorControlData->Idq_ref[1], ANGULARFREQ5Hz, LOWSEQUENCEPERIOD, &vectorControlData->Idq_ref_LPF[1]);
 800048e:	f104 000c 	add.w	r0, r4, #12
 8000492:	eeb0 1a68 	vmov.f32	s2, s17
 8000496:	eef0 0a48 	vmov.f32	s1, s16
 800049a:	ed94 0a01 	vldr	s0, [r4, #4]
 800049e:	f7ff fef4 	bl	800028a <gLPF>
			break;
 80004a2:	e752      	b.n	800034a <Sequence_Low_Freq+0x9e>
 80004a4:	200000a0 	.word	0x200000a0
 80004a8:	38aec33e 	.word	0x38aec33e
 80004ac:	4148f5c3 	.word	0x4148f5c3
 80004b0:	20000094 	.word	0x20000094
 80004b4:	20000098 	.word	0x20000098
 80004b8:	200000cc 	.word	0x200000cc
 80004bc:	3a83126f 	.word	0x3a83126f
 80004c0:	42fb3333 	.word	0x42fb3333
 80004c4:	200000c8 	.word	0x200000c8
 80004c8:	200000cb 	.word	0x200000cb
 80004cc:	200000a4 	.word	0x200000a4
 80004d0:	200000b4 	.word	0x200000b4
 80004d4:	4503e000 	.word	0x4503e000
 80004d8:	44fc6000 	.word	0x44fc6000
 80004dc:	45012000 	.word	0x45012000
 80004e0:	20000090 	.word	0x20000090
 80004e4:	43480000 	.word	0x43480000
 80004e8:	43960000 	.word	0x43960000
 80004ec:	20000100 	.word	0x20000100
 80004f0:	43160000 	.word	0x43160000
 80004f4:	437a0000 	.word	0x437a0000
 80004f8:	00000000 	.word	0x00000000
 80004fc:	41fb53d1 	.word	0x41fb53d1

08000500 <Sequence_High_Freq>:
void Sequence_High_Freq(void){
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	b09b      	sub	sp, #108	; 0x6c
	SPI_TransmitReceive_lap();
 8000504:	f000 fcc4 	bl	8000e90 <SPI_TransmitReceive_lap>
	readCurrent(sSensData.Iuvw_AD, sSensData.Iuvw_AD_Offset, sSensData.Iuvw);
 8000508:	4c32      	ldr	r4, [pc, #200]	; (80005d4 <Sequence_High_Freq+0xd4>)
 800050a:	f104 0208 	add.w	r2, r4, #8
 800050e:	f104 011c 	add.w	r1, r4, #28
 8000512:	f104 0014 	add.w	r0, r4, #20
 8000516:	f000 f96f 	bl	80007f8 <readCurrent>
	sPosMode = POSMODE_ANGLESENS;//POSMODE_FREERUN;//////
 800051a:	4b2f      	ldr	r3, [pc, #188]	; (80005d8 <Sequence_High_Freq+0xd8>)
 800051c:	2205      	movs	r2, #5
 800051e:	701a      	strb	r2, [r3, #0]
	sDrvMode = DRVMODE_VECTORCONTROL;//DRVMODE_OPENLOOP;//
 8000520:	2504      	movs	r5, #4
 8000522:	4b2e      	ldr	r3, [pc, #184]	; (80005dc <Sequence_High_Freq+0xdc>)
 8000524:	701d      	strb	r5, [r3, #0]
	sElectAngVeloRefRateLimit = TWOPI * 10.0f;
 8000526:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <Sequence_High_Freq+0xe0>)
 8000528:	4a2e      	ldr	r2, [pc, #184]	; (80005e4 <Sequence_High_Freq+0xe4>)
 800052a:	601a      	str	r2, [r3, #0]
		sensData->electAngle = gTheta;
 800052c:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <Sequence_High_Freq+0xe8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	6023      	str	r3, [r4, #0]
		sensData->electAngVelo = sElectAngleEstimateData.electAngVeloEstimate;
 8000532:	4b2e      	ldr	r3, [pc, #184]	; (80005ec <Sequence_High_Freq+0xec>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	6063      	str	r3, [r4, #4]
	slctCntlFromDrvMode(sDrvMode, sSensData, &sVectorControlData, sDuty, &sOutputMode);
 8000538:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 800053c:	46a4      	mov	ip, r4
 800053e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000542:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000546:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800054a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800054e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000552:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000556:	f8dc 3000 	ldr.w	r3, [ip]
 800055a:	f8ce 3000 	str.w	r3, [lr]
	vectorControlData->Idq_ref[0] = 2.0f * gPropoDuty2;
 800055e:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <Sequence_High_Freq+0xf0>)
 8000560:	ed93 7a00 	vldr	s14, [r3]
 8000564:	ee37 7a07 	vadd.f32	s14, s14, s14
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <Sequence_High_Freq+0xf4>)
 800056a:	ed83 7a00 	vstr	s14, [r3]
	vectorControlData->Idq_ref[1] = 2.0f * gPropoDuty;//IQREFMAX * gVolume;
 800056e:	4a22      	ldr	r2, [pc, #136]	; (80005f8 <Sequence_High_Freq+0xf8>)
 8000570:	edd2 7a00 	vldr	s15, [r2]
 8000574:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000578:	edc3 7a01 	vstr	s15, [r3, #4]
	vectorControlData->Idq_ref_LPF[0] = vectorControlData->Idq_ref[0];
 800057c:	ed83 7a02 	vstr	s14, [r3, #8]
	vectorControlData->Idq_ref_LPF[1] = vectorControlData->Idq_ref[1];//IQREFMAX * gVolume;
 8000580:	edc3 7a03 	vstr	s15, [r3, #12]
	switch(drvMode){
 8000584:	b99d      	cbnz	r5, 80005ae <Sequence_High_Freq+0xae>
 8000586:	b125      	cbz	r5, 8000592 <Sequence_High_Freq+0x92>
			gOffDuty(Duty, outputMode);
 8000588:	491c      	ldr	r1, [pc, #112]	; (80005fc <Sequence_High_Freq+0xfc>)
 800058a:	481d      	ldr	r0, [pc, #116]	; (8000600 <Sequence_High_Freq+0x100>)
 800058c:	f7ff fe76 	bl	800027c <gOffDuty>
 8000590:	e003      	b.n	800059a <Sequence_High_Freq+0x9a>
			gOffDuty(Duty, outputMode);
 8000592:	491a      	ldr	r1, [pc, #104]	; (80005fc <Sequence_High_Freq+0xfc>)
 8000594:	481a      	ldr	r0, [pc, #104]	; (8000600 <Sequence_High_Freq+0x100>)
 8000596:	f7ff fe71 	bl	800027c <gOffDuty>
	writeOutputMode(sOutputMode);
 800059a:	4b18      	ldr	r3, [pc, #96]	; (80005fc <Sequence_High_Freq+0xfc>)
 800059c:	f993 0000 	ldrsb.w	r0, [r3]
 80005a0:	f000 f964 	bl	800086c <writeOutputMode>
	writeDuty(sDuty);
 80005a4:	4816      	ldr	r0, [pc, #88]	; (8000600 <Sequence_High_Freq+0x100>)
 80005a6:	f000 f97d 	bl	80008a4 <writeDuty>
}
 80005aa:	b01b      	add	sp, #108	; 0x6c
 80005ac:	bd30      	pop	{r4, r5, pc}
			VectorControlTasks(sensData, vectorControlData, Duty, outputMode);
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <Sequence_High_Freq+0xfc>)
 80005b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <Sequence_High_Freq+0x100>)
 80005b4:	930a      	str	r3, [sp, #40]	; 0x28
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <Sequence_High_Freq+0xf4>)
 80005b8:	9309      	str	r3, [sp, #36]	; 0x24
 80005ba:	466c      	mov	r4, sp
 80005bc:	ad11      	add	r5, sp, #68	; 0x44
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	682b      	ldr	r3, [r5, #0]
 80005c8:	6023      	str	r3, [r4, #0]
 80005ca:	ab0d      	add	r3, sp, #52	; 0x34
 80005cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ce:	f000 f991 	bl	80008f4 <VectorControlTasks>
			break;
 80005d2:	e7e2      	b.n	800059a <Sequence_High_Freq+0x9a>
 80005d4:	200000cc 	.word	0x200000cc
 80005d8:	200000cb 	.word	0x200000cb
 80005dc:	200000a4 	.word	0x200000a4
 80005e0:	200000b4 	.word	0x200000b4
 80005e4:	427b53d2 	.word	0x427b53d2
 80005e8:	2000009c 	.word	0x2000009c
 80005ec:	200000b8 	.word	0x200000b8
 80005f0:	20000098 	.word	0x20000098
 80005f4:	20000100 	.word	0x20000100
 80005f8:	20000094 	.word	0x20000094
 80005fc:	200000ca 	.word	0x200000ca
 8000600:	200000a8 	.word	0x200000a8

08000604 <readPropoInputCaptureCnt>:
	inputCaptureCnt = TIM2 -> CCR1;

	return inputCaptureCnt;
}

uint16_t readPropoInputCaptureCnt(void){
 8000604:	b082      	sub	sp, #8
	// Read Input Capture Count of GPIO
	// CCR1:TIM8 Channel1 = Propo
	volatile uint16_t inputCaptureCnt;

	inputCaptureCnt = TIM8 -> CCR1;
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <readPropoInputCaptureCnt+0x18>)
 8000608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060a:	b29b      	uxth	r3, r3
 800060c:	f8ad 3006 	strh.w	r3, [sp, #6]
	return inputCaptureCnt;
 8000610:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8000614:	b280      	uxth	r0, r0
 8000616:	b002      	add	sp, #8
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40013400 	.word	0x40013400

08000620 <readPropoDuty>:

float readPropoDuty(void){
 8000620:	b510      	push	{r4, lr}

	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;
	float preScaler;

	sPropoState_pre = sPropoState;
 8000622:	4c2c      	ldr	r4, [pc, #176]	; (80006d4 <readPropoDuty+0xb4>)
 8000624:	7822      	ldrb	r2, [r4, #0]
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <readPropoDuty+0xb8>)
 8000628:	701a      	strb	r2, [r3, #0]
	sPropoState = HAL_GPIO_ReadPin(GPIOA, Propo_Pin) & 0b00000001;
 800062a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f002 fb97 	bl	8002d64 <HAL_GPIO_ReadPin>
 8000636:	f000 0001 	and.w	r0, r0, #1
 800063a:	7020      	strb	r0, [r4, #0]

	if(sPropoState) // sPropoState = ON
 800063c:	b138      	cbz	r0, 800064e <readPropoDuty+0x2e>
		sPropoInputCaptureCntRise = readPropoInputCaptureCnt();
 800063e:	f7ff ffe1 	bl	8000604 <readPropoInputCaptureCnt>
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <readPropoDuty+0xbc>)
 8000644:	8018      	strh	r0, [r3, #0]
	}

	propoDuty = sPropoDuty;
	return propoDuty;

}
 8000646:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <readPropoDuty+0xc0>)
 8000648:	ed93 0a00 	vldr	s0, [r3]
 800064c:	bd10      	pop	{r4, pc}
		sPropoInputCaptureCntFall = readPropoInputCaptureCnt();
 800064e:	f7ff ffd9 	bl	8000604 <readPropoInputCaptureCnt>
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <readPropoDuty+0xc4>)
 8000654:	8018      	strh	r0, [r3, #0]
		if(sPropoState == 0 && sPropoState_pre == 1)
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <readPropoDuty+0xb4>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1f3      	bne.n	8000646 <readPropoDuty+0x26>
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <readPropoDuty+0xb8>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d1ef      	bne.n	8000646 <readPropoDuty+0x26>
			inputCaptureCntMax = TIM8 -> ARR;
 8000666:	4920      	ldr	r1, [pc, #128]	; (80006e8 <readPropoDuty+0xc8>)
 8000668:	6aca      	ldr	r2, [r1, #44]	; 0x2c
			inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 800066a:	1c53      	adds	r3, r2, #1
 800066c:	085b      	lsrs	r3, r3, #1
			preScaler = (float)(TIM8 -> PSC);
 800066e:	6a89      	ldr	r1, [r1, #40]	; 0x28
			propoInputCaptureCntDiff = (float)sPropoInputCaptureCntFall - (float)sPropoInputCaptureCntRise;
 8000670:	ee07 0a90 	vmov	s15, r0
 8000674:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000678:	4918      	ldr	r1, [pc, #96]	; (80006dc <readPropoDuty+0xbc>)
 800067a:	8809      	ldrh	r1, [r1, #0]
 800067c:	ee07 1a90 	vmov	s15, r1
 8000680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000684:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000688:	4918      	ldr	r1, [pc, #96]	; (80006ec <readPropoDuty+0xcc>)
 800068a:	edc1 7a00 	vstr	s15, [r1]
			if( propoInputCaptureCntDiff < - (float)inputCaptureCntHalf)
 800068e:	ee07 3a10 	vmov	s14, r3
 8000692:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000696:	eeb1 7a47 	vneg.f32	s14, s14
 800069a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800069e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a2:	d507      	bpl.n	80006b4 <readPropoDuty+0x94>
				propoInputCaptureCntDiff += (float)inputCaptureCntMax;
 80006a4:	ee07 2a10 	vmov	s14, r2
 80006a8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80006ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006b0:	edc1 7a00 	vstr	s15, [r1]
			sPropoDuty = 1.0f *(propoInputCaptureCntDiff - 1489.0f) * 0.0027f;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <readPropoDuty+0xcc>)
 80006b6:	edd3 7a00 	vldr	s15, [r3]
 80006ba:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80006f0 <readPropoDuty+0xd0>
 80006be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006c2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80006f4 <readPropoDuty+0xd4>
 80006c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <readPropoDuty+0xc0>)
 80006cc:	edc3 7a00 	vstr	s15, [r3]
 80006d0:	e7b9      	b.n	8000646 <readPropoDuty+0x26>
 80006d2:	bf00      	nop
 80006d4:	20000168 	.word	0x20000168
 80006d8:	2000016a 	.word	0x2000016a
 80006dc:	20000164 	.word	0x20000164
 80006e0:	20000158 	.word	0x20000158
 80006e4:	20000160 	.word	0x20000160
 80006e8:	40013400 	.word	0x40013400
 80006ec:	20000150 	.word	0x20000150
 80006f0:	44ba2000 	.word	0x44ba2000
 80006f4:	3b30f27c 	.word	0x3b30f27c

080006f8 <readPropoInputCaptureCnt2>:

uint16_t readPropoInputCaptureCnt2(void){
 80006f8:	b082      	sub	sp, #8
	// Read Input Capture Count of GPIO
	// CCR4:TIM3 Channel4 = Propo2
	volatile uint16_t inputCaptureCnt;

	inputCaptureCnt = TIM3 -> CCR4;
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <readPropoInputCaptureCnt2+0x20>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	b29b      	uxth	r3, r3
 8000700:	f8ad 3006 	strh.w	r3, [sp, #6]
	inputCaptureCnt8 = inputCaptureCnt;
 8000704:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <readPropoInputCaptureCnt2+0x24>)
 800070a:	801a      	strh	r2, [r3, #0]
	return inputCaptureCnt;
 800070c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8000710:	b280      	uxth	r0, r0
 8000712:	b002      	add	sp, #8
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40000400 	.word	0x40000400
 800071c:	2000014c 	.word	0x2000014c

08000720 <readPropoDuty2>:

float readPropoDuty2(void){
 8000720:	b510      	push	{r4, lr}

	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;
	float preScaler;

	sPropoState_pre2 = sPropoState2;
 8000722:	4c2b      	ldr	r4, [pc, #172]	; (80007d0 <readPropoDuty2+0xb0>)
 8000724:	7822      	ldrb	r2, [r4, #0]
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <readPropoDuty2+0xb4>)
 8000728:	701a      	strb	r2, [r3, #0]
	sPropoState2 = HAL_GPIO_ReadPin(GPIOB, Propo2_Pin) & 0b00000001;
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	482a      	ldr	r0, [pc, #168]	; (80007d8 <readPropoDuty2+0xb8>)
 800072e:	f002 fb19 	bl	8002d64 <HAL_GPIO_ReadPin>
 8000732:	f000 0001 	and.w	r0, r0, #1
 8000736:	7020      	strb	r0, [r4, #0]

	if(sPropoState2) // sPropoState = ON
 8000738:	b138      	cbz	r0, 800074a <readPropoDuty2+0x2a>
		sPropoInputCaptureCntRise2 = readPropoInputCaptureCnt2();
 800073a:	f7ff ffdd 	bl	80006f8 <readPropoInputCaptureCnt2>
 800073e:	4b27      	ldr	r3, [pc, #156]	; (80007dc <readPropoDuty2+0xbc>)
 8000740:	8018      	strh	r0, [r3, #0]
	}

	propoDuty = sPropoDuty2;
	return propoDuty;

}
 8000742:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <readPropoDuty2+0xc0>)
 8000744:	ed93 0a00 	vldr	s0, [r3]
 8000748:	bd10      	pop	{r4, pc}
		sPropoInputCaptureCntFall2 = readPropoInputCaptureCnt2();
 800074a:	f7ff ffd5 	bl	80006f8 <readPropoInputCaptureCnt2>
 800074e:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <readPropoDuty2+0xc4>)
 8000750:	8018      	strh	r0, [r3, #0]
		if(sPropoState2 == 0 && sPropoState_pre2 == 1)
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <readPropoDuty2+0xb0>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d1f3      	bne.n	8000742 <readPropoDuty2+0x22>
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <readPropoDuty2+0xb4>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d1ef      	bne.n	8000742 <readPropoDuty2+0x22>
			inputCaptureCntMax = TIM3 -> ARR;
 8000762:	4921      	ldr	r1, [pc, #132]	; (80007e8 <readPropoDuty2+0xc8>)
 8000764:	6aca      	ldr	r2, [r1, #44]	; 0x2c
			inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 8000766:	1c53      	adds	r3, r2, #1
 8000768:	085b      	lsrs	r3, r3, #1
			preScaler = (float)(TIM3 -> PSC);
 800076a:	6a89      	ldr	r1, [r1, #40]	; 0x28
			propoInputCaptureCntDiff2 = (float)sPropoInputCaptureCntFall2 - (float)sPropoInputCaptureCntRise2;
 800076c:	ee07 0a90 	vmov	s15, r0
 8000770:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000774:	4919      	ldr	r1, [pc, #100]	; (80007dc <readPropoDuty2+0xbc>)
 8000776:	8809      	ldrh	r1, [r1, #0]
 8000778:	ee07 1a90 	vmov	s15, r1
 800077c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000784:	4919      	ldr	r1, [pc, #100]	; (80007ec <readPropoDuty2+0xcc>)
 8000786:	edc1 7a00 	vstr	s15, [r1]
			if( propoInputCaptureCntDiff2 < - (float)inputCaptureCntHalf)
 800078a:	ee07 3a10 	vmov	s14, r3
 800078e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000792:	eeb1 7a47 	vneg.f32	s14, s14
 8000796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800079a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079e:	d507      	bpl.n	80007b0 <readPropoDuty2+0x90>
				propoInputCaptureCntDiff2 += (float)inputCaptureCntMax;
 80007a0:	ee07 2a10 	vmov	s14, r2
 80007a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80007a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007ac:	edc1 7a00 	vstr	s15, [r1]
			sPropoDuty2 = 1.0f *(propoInputCaptureCntDiff2 - 1489.0f) * 0.0027f;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <readPropoDuty2+0xcc>)
 80007b2:	edd3 7a00 	vldr	s15, [r3]
 80007b6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80007f0 <readPropoDuty2+0xd0>
 80007ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80007be:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80007f4 <readPropoDuty2+0xd4>
 80007c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <readPropoDuty2+0xc0>)
 80007c8:	edc3 7a00 	vstr	s15, [r3]
 80007cc:	e7b9      	b.n	8000742 <readPropoDuty2+0x22>
 80007ce:	bf00      	nop
 80007d0:	20000169 	.word	0x20000169
 80007d4:	2000016b 	.word	0x2000016b
 80007d8:	48000400 	.word	0x48000400
 80007dc:	20000166 	.word	0x20000166
 80007e0:	2000015c 	.word	0x2000015c
 80007e4:	20000162 	.word	0x20000162
 80007e8:	40000400 	.word	0x40000400
 80007ec:	20000154 	.word	0x20000154
 80007f0:	44ba2000 	.word	0x44ba2000
 80007f4:	3b30f27c 	.word	0x3b30f27c

080007f8 <readCurrent>:
	uint16_t Vdc_ad = gAdcValue[0];
	Vdc = Vdc_ad * AD2VOLTAGE;
	return Vdc;
}

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw_AD_Offset, float* Iuvw){
 80007f8:	b410      	push	{r4}
	Iuvw_AD[0] = ADC1 -> JDR2; // Iu
 80007fa:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
 80007fe:	f8dc 3084 	ldr.w	r3, [ip, #132]	; 0x84
 8000802:	b29b      	uxth	r3, r3
 8000804:	8003      	strh	r3, [r0, #0]
	Iuvw_AD[1] = ADC1 -> JDR3; // Iv
 8000806:	f8dc 4088 	ldr.w	r4, [ip, #136]	; 0x88
 800080a:	8044      	strh	r4, [r0, #2]
	Iuvw_AD[2] = ADC1 -> JDR4; // Iw
 800080c:	f8dc 408c 	ldr.w	r4, [ip, #140]	; 0x8c
 8000810:	8084      	strh	r4, [r0, #4]

	Iuvw[0] = ((float)Iuvw_AD[0] - Iuvw_AD_Offset[0]) * AD2CURRENT;
 8000812:	ee07 3a90 	vmov	s15, r3
 8000816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800081a:	ed91 7a00 	vldr	s14, [r1]
 800081e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000822:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000868 <readCurrent+0x70>
 8000826:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800082a:	edc2 7a00 	vstr	s15, [r2]
	Iuvw[1] = ((float)Iuvw_AD[1] - Iuvw_AD_Offset[1]) * AD2CURRENT;
 800082e:	8843      	ldrh	r3, [r0, #2]
 8000830:	ee07 3a10 	vmov	s14, r3
 8000834:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000838:	edd1 7a01 	vldr	s15, [r1, #4]
 800083c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000840:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000844:	ed82 7a01 	vstr	s14, [r2, #4]
	Iuvw[2] = ((float)Iuvw_AD[2] - Iuvw_AD_Offset[2]) * AD2CURRENT;
 8000848:	8883      	ldrh	r3, [r0, #4]
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000852:	ed91 7a02 	vldr	s14, [r1, #8]
 8000856:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800085a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800085e:	edc2 7a02 	vstr	s15, [r2, #8]
}
 8000862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	3b51b717 	.word	0x3b51b717

0800086c <writeOutputMode>:
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
}
*/

void writeOutputMode(int8_t outputMode){
 800086c:	b510      	push	{r4, lr}

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode == OUTPUTMODE_RESET )
 800086e:	b958      	cbnz	r0, 8000888 <writeOutputMode+0x1c>
	{
		HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 8000870:	4c0b      	ldr	r4, [pc, #44]	; (80008a0 <writeOutputMode+0x34>)
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	4620      	mov	r0, r4
 8000878:	f002 fa7b 	bl	8002d72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PWM_EN_GPIO_Port, PWM_EN_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2104      	movs	r1, #4
 8000880:	4620      	mov	r0, r4
 8000882:	f002 fa76 	bl	8002d72 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(PWM_EN_GPIO_Port, PWM_EN_Pin, GPIO_PIN_SET);
	}

}
 8000886:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 8000888:	4c05      	ldr	r4, [pc, #20]	; (80008a0 <writeOutputMode+0x34>)
 800088a:	2201      	movs	r2, #1
 800088c:	2102      	movs	r1, #2
 800088e:	4620      	mov	r0, r4
 8000890:	f002 fa6f 	bl	8002d72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PWM_EN_GPIO_Port, PWM_EN_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2104      	movs	r1, #4
 8000898:	4620      	mov	r0, r4
 800089a:	f002 fa6a 	bl	8002d72 <HAL_GPIO_WritePin>
}
 800089e:	e7f2      	b.n	8000886 <writeOutputMode+0x1a>
 80008a0:	48000400 	.word	0x48000400

080008a4 <writeDuty>:


void writeDuty(float* Duty){
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[2] * (TIM1 -> ARR);
 80008a4:	ed90 7a02 	vldr	s14, [r0, #8]
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <writeDuty+0x4c>)
 80008aa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80008ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008ba:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 80008be:	ed90 7a01 	vldr	s14, [r0, #4]
 80008c2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80008c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008d2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[0] * (TIM1 -> ARR);
 80008d6:	ed90 7a00 	vldr	s14, [r0]
 80008da:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80008de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008ea:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

}
 80008ee:	4770      	bx	lr
 80008f0:	40012c00 	.word	0x40012c00

080008f4 <VectorControlTasks>:
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo);

void VectorControlTasks(struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 80008f4:	b084      	sub	sp, #16
 80008f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f8:	ed2d 8b06 	vpush	{d8-d10}
 80008fc:	b09d      	sub	sp, #116	; 0x74
 80008fe:	ac28      	add	r4, sp, #160	; 0xa0
 8000900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000904:	9c35      	ldr	r4, [sp, #212]	; 0xd4
 8000906:	9d36      	ldr	r5, [sp, #216]	; 0xd8

	*outputMode = OUTPUTMODE_SET;
 8000908:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
}

static inline void uvw2ab(float* uvw, float* ab){
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 800090e:	eddd 7a2a 	vldr	s15, [sp, #168]	; 0xa8
 8000912:	ed9d 6a2b 	vldr	s12, [sp, #172]	; 0xac
 8000916:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800091a:	ee26 8a07 	vmul.f32	s16, s12, s14
 800091e:	ee37 8ac8 	vsub.f32	s16, s15, s16
 8000922:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 8000926:	ee26 7a87 	vmul.f32	s14, s13, s14
 800092a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800092e:	eddf 8aea 	vldr	s17, [pc, #936]	; 8000cd8 <VectorControlTasks+0x3e4>
 8000932:	ee28 8a28 	vmul.f32	s16, s16, s17
 8000936:	4ee9      	ldr	r6, [pc, #932]	; (8000cdc <VectorControlTasks+0x3e8>)
 8000938:	ed86 8a00 	vstr	s16, [r6]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV2 * uvw[1] - SQRT3_DIV2 * uvw[2] );
 800093c:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 8000ce0 <VectorControlTasks+0x3ec>
 8000940:	ee26 9a07 	vmul.f32	s18, s12, s14
 8000944:	ee26 7a87 	vmul.f32	s14, s13, s14
 8000948:	ee39 9a47 	vsub.f32	s18, s18, s14
 800094c:	ee29 9a28 	vmul.f32	s18, s18, s17
 8000950:	ed86 9a01 	vstr	s18, [r6, #4]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 8000954:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800095c:	ed9f 7ae1 	vldr	s14, [pc, #900]	; 8000ce4 <VectorControlTasks+0x3f0>
 8000960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000964:	edc6 7a02 	vstr	s15, [r6, #8]
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8000968:	ed9d aa28 	vldr	s20, [sp, #160]	; 0xa0
}

static inline void ab2dq(float theta, float* ab, float* dq){
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 800096c:	eeb0 0a4a 	vmov.f32	s0, s20
 8000970:	f003 ff0e 	bl	8004790 <sinf>
 8000974:	eef0 9a40 	vmov.f32	s19, s0
	cosTheta = cosf(theta);
 8000978:	eeb0 0a4a 	vmov.f32	s0, s20
 800097c:	f003 fec4 	bl	8004708 <cosf>
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 8000980:	ee20 8a08 	vmul.f32	s16, s0, s16
 8000984:	ee29 9a89 	vmul.f32	s18, s19, s18
 8000988:	ee38 9a09 	vadd.f32	s18, s16, s18
 800098c:	ed84 9a04 	vstr	s18, [r4, #16]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8000990:	edd6 7a00 	vldr	s15, [r6]
 8000994:	ee67 7ae9 	vnmul.f32	s15, s15, s19
 8000998:	ed96 7a01 	vldr	s14, [r6, #4]
 800099c:	ee20 0a07 	vmul.f32	s0, s0, s14
 80009a0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80009a4:	ed84 0a05 	vstr	s0, [r4, #20]
	gLPF(vectorControlData->Idq[0], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[0]);
 80009a8:	ed9f 9acf 	vldr	s18, [pc, #828]	; 8000ce8 <VectorControlTasks+0x3f4>
 80009ac:	ed9f 8acf 	vldr	s16, [pc, #828]	; 8000cec <VectorControlTasks+0x3f8>
 80009b0:	f104 0018 	add.w	r0, r4, #24
 80009b4:	eeb0 1a49 	vmov.f32	s2, s18
 80009b8:	eef0 0a48 	vmov.f32	s1, s16
 80009bc:	ed94 0a04 	vldr	s0, [r4, #16]
 80009c0:	f7ff fc63 	bl	800028a <gLPF>
	gLPF(vectorControlData->Idq[1], ANGULARFREQ20Hz, CARRIERCYCLE, &vectorControlData->Idq_LPF[1]);
 80009c4:	f104 001c 	add.w	r0, r4, #28
 80009c8:	eeb0 1a49 	vmov.f32	s2, s18
 80009cc:	eef0 0a48 	vmov.f32	s1, s16
 80009d0:	ed94 0a05 	vldr	s0, [r4, #20]
 80009d4:	f7ff fc59 	bl	800028a <gLPF>
	CurrentFbControl(sensData, vectorControlData);
 80009d8:	f10d 0c08 	add.w	ip, sp, #8
 80009dc:	f10d 0ea0 	add.w	lr, sp, #160	; 0xa0
 80009e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80009e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80009e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80009ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80009f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80009f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80009f8:	f8de 3000 	ldr.w	r3, [lr]
 80009fc:	f8cc 3000 	str.w	r3, [ip]

	Kp = 0;//La * wc;//La * wc;//2 * wc - Ra/La;
	Kig = 0.001;//Ra * wc * CARRIERCYCLE;//La * wc * wc * CARRIERCYCLE;
	Kid = Kig;

	Ierr[0] = vectorControlData->Idq_ref_LPF[0] - vectorControlData->Idq[0];
 8000a00:	ed94 7a02 	vldr	s14, [r4, #8]
 8000a04:	ed94 6a04 	vldr	s12, [r4, #16]
 8000a08:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000a0c:	ed8d 7a00 	vstr	s14, [sp]
	Ierr[1] = vectorControlData->Idq_ref_LPF[1] - vectorControlData->Idq[1];
 8000a10:	edd4 7a03 	vldr	s15, [r4, #12]
 8000a14:	edd4 0a05 	vldr	s1, [r4, #20]
 8000a18:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8000a1c:	edcd 7a01 	vstr	s15, [sp, #4]

	vectorControlData->Vdq_p[0] = Kp * Ierr[0];
 8000a20:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8000cf0 <VectorControlTasks+0x3fc>
 8000a24:	ee27 5a26 	vmul.f32	s10, s14, s13
 8000a28:	ed84 5a0a 	vstr	s10, [r4, #40]	; 0x28
	vectorControlData->Vdq_p[1] = Kp * Ierr[1];
 8000a2c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000a30:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c

	vectorControlData->Vdq_i[0] += Kig * Ierr[0];
 8000a34:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8000cf4 <VectorControlTasks+0x400>
 8000a38:	ee27 7a00 	vmul.f32	s14, s14, s0
 8000a3c:	edd4 5a0c 	vldr	s11, [r4, #48]	; 0x30
 8000a40:	ee37 7a25 	vadd.f32	s14, s14, s11
 8000a44:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
	vectorControlData->Vdq_i[1] += Kid * Ierr[1];
 8000a48:	ee67 7a80 	vmul.f32	s15, s15, s0
 8000a4c:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8000a50:	ee77 7a80 	vadd.f32	s15, s15, s0
 8000a54:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34

	calcVdqFeedForword(sensData, vectorControlData);
 8000a58:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8000a5c:	f10d 0e08 	add.w	lr, sp, #8
 8000a60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000a64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000a68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000a6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000a70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000a74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000a78:	f8de 3000 	ldr.w	r3, [lr]
 8000a7c:	f8cc 3000 	str.w	r3, [ip]
	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0] + vectorControlData->Vdq_FF[0];
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1] + vectorControlData->Vdq_FF[1];
}

static inline void calcVdqFeedForword(struct SensorData sensData, struct VectorControlData *vectorControlData){
	vectorControlData->Vdq_FF[0] = -1.0f *sensData.electAngVelo * La * vectorControlData->Idq[1];
 8000a80:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
 8000a84:	eddf 5a9c 	vldr	s11, [pc, #624]	; 8000cf8 <VectorControlTasks+0x404>
 8000a88:	ee60 5a65 	vnmul.f32	s11, s0, s11
 8000a8c:	eddf 4a9b 	vldr	s9, [pc, #620]	; 8000cfc <VectorControlTasks+0x408>
 8000a90:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8000a94:	ee60 0aa5 	vmul.f32	s1, s1, s11
 8000a98:	edc4 0a0e 	vstr	s1, [r4, #56]	; 0x38
	vectorControlData->Vdq_FF[1] = sensData.electAngVelo * ( Ke + La * vectorControlData->Idq[0]);
 8000a9c:	eddf 5a98 	vldr	s11, [pc, #608]	; 8000d00 <VectorControlTasks+0x40c>
 8000aa0:	ee26 6a25 	vmul.f32	s12, s12, s11
 8000aa4:	eddf 5a97 	vldr	s11, [pc, #604]	; 8000d04 <VectorControlTasks+0x410>
 8000aa8:	ee36 6a25 	vadd.f32	s12, s12, s11
 8000aac:	ee20 0a06 	vmul.f32	s0, s0, s12
 8000ab0:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0] + vectorControlData->Vdq_FF[0];
 8000ab4:	ee35 7a07 	vadd.f32	s14, s10, s14
 8000ab8:	ee70 0a87 	vadd.f32	s1, s1, s14
 8000abc:	edc4 0a08 	vstr	s1, [r4, #32]
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1] + vectorControlData->Vdq_FF[1];
 8000ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000ac4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000ac8:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	calcAmpPhaseModFromVoltVect(sensData, vectorControlData);
 8000acc:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8000ad0:	f10d 0ea0 	add.w	lr, sp, #160	; 0xa0
 8000ad4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000ad8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000adc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000ae0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000ae4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000ae8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000aec:	f8de 3000 	ldr.w	r3, [lr]
 8000af0:	f8cc 3000 	str.w	r3, [ip]
	vectorControlData->Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 8000af4:	f003 fe92 	bl	800481c <atan2f>
 8000af8:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8000afc:	ed94 0a08 	vldr	s0, [r4, #32]
 8000b00:	ee20 0a00 	vmul.f32	s0, s0, s0
 8000b04:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8000b08:	ee67 7aa7 	vmul.f32	s15, s15, s15
	amp = sqrtf(sumOfSquares);
 8000b0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000b10:	f003 fe86 	bl	8004820 <sqrtf>
	vectorControlData->Vamp = calcAmpFromVect(vectorControlData->Vdq);
 8000b14:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8000b18:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 8000b1c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000b20:	ee60 8a28 	vmul.f32	s17, s0, s17
	vectorControlData->Mod = calcModFromVamp(vectorControlData->Vamp, sensData.twoDivVdc);
 8000b24:	edc4 8a12 	vstr	s17, [r4, #72]	; 0x48
	limitVoltVectAmp(sensData, vectorControlData);
 8000b28:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8000b2c:	f10d 0ea0 	add.w	lr, sp, #160	; 0xa0
 8000b30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000b34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000b38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000b3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000b40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000b44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000b48:	f8de 3000 	ldr.w	r3, [lr]
 8000b4c:	f8cc 3000 	str.w	r3, [ip]
	if( vectorControlData->Mod > MODLIMIT ){
 8000b50:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8000d08 <VectorControlTasks+0x414>
 8000b54:	eef4 8ae7 	vcmpe.f32	s17, s15
 8000b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b5c:	dd31      	ble.n	8000bc2 <VectorControlTasks+0x2ce>
		VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * MODLIMIT;
 8000b5e:	ed9d 8a19 	vldr	s16, [sp, #100]	; 0x64
 8000b62:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8000d0c <VectorControlTasks+0x418>
 8000b66:	ee28 8a27 	vmul.f32	s16, s16, s15
 8000b6a:	eddf 8a67 	vldr	s17, [pc, #412]	; 8000d08 <VectorControlTasks+0x414>
 8000b6e:	ee28 8a28 	vmul.f32	s16, s16, s17
		vectorControlData->Vdq[0] = VampLimit * cosf(vectorControlData->Vphase);
 8000b72:	ed94 9a11 	vldr	s18, [r4, #68]	; 0x44
 8000b76:	eeb0 0a49 	vmov.f32	s0, s18
 8000b7a:	f003 fdc5 	bl	8004708 <cosf>
 8000b7e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8000b82:	ed84 0a08 	vstr	s0, [r4, #32]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_p[0] - vectorControlData->Vdq_FF[0];
 8000b86:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8000b8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000b8e:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8000b92:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000b96:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
		vectorControlData->Vdq[1] = VampLimit * sinf(vectorControlData->Vphase);
 8000b9a:	eeb0 0a49 	vmov.f32	s0, s18
 8000b9e:	f003 fdf7 	bl	8004790 <sinf>
 8000ba2:	ee28 8a00 	vmul.f32	s16, s16, s0
 8000ba6:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_p[1] - vectorControlData->Vdq_FF[1];
 8000baa:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8000bae:	ee38 8a40 	vsub.f32	s16, s16, s0
 8000bb2:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8000bb6:	ee38 8a40 	vsub.f32	s16, s16, s0
 8000bba:	ed84 8a0d 	vstr	s16, [r4, #52]	; 0x34
		vectorControlData->Mod = MODLIMIT;
 8000bbe:	edc4 8a12 	vstr	s17, [r4, #72]	; 0x48
	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8000bc2:	eddd 8a28 	vldr	s17, [sp, #160]	; 0xa0
	sinTheta = sinf(theta);
 8000bc6:	eeb0 0a68 	vmov.f32	s0, s17
 8000bca:	f003 fde1 	bl	8004790 <sinf>
 8000bce:	eeb0 8a40 	vmov.f32	s16, s0
	cosTheta = cosf(theta);
 8000bd2:	eeb0 0a68 	vmov.f32	s0, s17
 8000bd6:	f003 fd97 	bl	8004708 <cosf>
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8000bda:	edd4 7a08 	vldr	s15, [r4, #32]
 8000bde:	ee60 7a27 	vmul.f32	s15, s0, s15
 8000be2:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 8000be6:	ee68 6a07 	vmul.f32	s13, s16, s14
 8000bea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000bee:	4b48      	ldr	r3, [pc, #288]	; (8000d10 <VectorControlTasks+0x41c>)
 8000bf0:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8000bf4:	edd4 6a08 	vldr	s13, [r4, #32]
 8000bf8:	ee28 8a26 	vmul.f32	s16, s16, s13
 8000bfc:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000c00:	ee38 8a00 	vadd.f32	s16, s16, s0
 8000c04:	ed83 8a01 	vstr	s16, [r3, #4]
	uvw[0] = SQRT_2DIV3 * ab[0];
 8000c08:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000cd8 <VectorControlTasks+0x3e4>
 8000c0c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8000c10:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <VectorControlTasks+0x420>)
 8000c12:	ed83 0a00 	vstr	s0, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV2 * ab[1] );
 8000c16:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8000c1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c1e:	eddf 6a30 	vldr	s13, [pc, #192]	; 8000ce0 <VectorControlTasks+0x3ec>
 8000c22:	ee28 8a26 	vmul.f32	s16, s16, s13
 8000c26:	ee77 7a88 	vadd.f32	s15, s15, s16
 8000c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c2e:	edc3 7a01 	vstr	s15, [r3, #4]
	uvw[2] = - uvw[0] - uvw[1];
 8000c32:	eeb1 7a40 	vneg.f32	s14, s0
 8000c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c3a:	edc3 7a02 	vstr	s15, [r3, #8]
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 8000c3e:	eddd 7a34 	vldr	s15, [sp, #208]	; 0xd0
	Duty[0] = (Vuvw[0] * twoDivVdc);
 8000c42:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000c46:	ed85 0a00 	vstr	s0, [r5]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8000c4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c52:	ed85 7a01 	vstr	s14, [r5, #4]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8000c56:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c5e:	edc5 7a02 	vstr	s15, [r5, #8]
	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8000c62:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000c66:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c6a:	f7ff faf4 	bl	8000256 <gUpperLowerLimit>
 8000c6e:	ed85 0a00 	vstr	s0, [r5]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8000c72:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000c76:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c7a:	ed95 0a01 	vldr	s0, [r5, #4]
 8000c7e:	f7ff faea 	bl	8000256 <gUpperLowerLimit>
 8000c82:	ed85 0a01 	vstr	s0, [r5, #4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8000c86:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000c8a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c8e:	ed95 0a02 	vldr	s0, [r5, #8]
 8000c92:	f7ff fae0 	bl	8000256 <gUpperLowerLimit>
 8000c96:	ed85 0a02 	vstr	s0, [r5, #8]
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8000c9a:	ed95 7a00 	vldr	s14, [r5]
 8000c9e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8000ca2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000caa:	ed85 7a00 	vstr	s14, [r5]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8000cae:	ed95 7a01 	vldr	s14, [r5, #4]
 8000cb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cba:	ed85 7a01 	vstr	s14, [r5, #4]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8000cbe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000cc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000cc6:	ed85 0a02 	vstr	s0, [r5, #8]
}
 8000cca:	b01d      	add	sp, #116	; 0x74
 8000ccc:	ecbd 8b06 	vpop	{d8-d10}
 8000cd0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr
 8000cd8:	3f5105ec 	.word	0x3f5105ec
 8000cdc:	2000016c 	.word	0x2000016c
 8000ce0:	3f5db3d7 	.word	0x3f5db3d7
 8000ce4:	3f13cd3a 	.word	0x3f13cd3a
 8000ce8:	38aec33e 	.word	0x38aec33e
 8000cec:	42fb3333 	.word	0x42fb3333
 8000cf0:	00000000 	.word	0x00000000
 8000cf4:	3a83126f 	.word	0x3a83126f
 8000cf8:	39fba882 	.word	0x39fba882
 8000cfc:	3ecccccd 	.word	0x3ecccccd
 8000d00:	3949539b 	.word	0x3949539b
 8000d04:	3a870111 	.word	0x3a870111
 8000d08:	3f933333 	.word	0x3f933333
 8000d0c:	3f1cc471 	.word	0x3f1cc471
 8000d10:	20000178 	.word	0x20000178
 8000d14:	20000180 	.word	0x20000180

08000d18 <InitVectorControl>:
void InitVectorControl(struct SensorData sensData, struct VectorControlData *vectorControlData){
 8000d18:	b084      	sub	sp, #16
 8000d1a:	b510      	push	{r4, lr}
 8000d1c:	b08e      	sub	sp, #56	; 0x38
 8000d1e:	ac10      	add	r4, sp, #64	; 0x40
 8000d20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d24:	9c1d      	ldr	r4, [sp, #116]	; 0x74
	calcVdqFeedForword(sensData, vectorControlData);
 8000d26:	f10d 0c04 	add.w	ip, sp, #4
 8000d2a:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
 8000d2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000d32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000d3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8000d42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000d46:	f8de 3000 	ldr.w	r3, [lr]
 8000d4a:	f8cc 3000 	str.w	r3, [ip]
	vectorControlData->Vdq_FF[0] = -1.0f *sensData.electAngVelo * La * vectorControlData->Idq[1];
 8000d4e:	ed9d 7a02 	vldr	s14, [sp, #8]
 8000d52:	eddf 7a16 	vldr	s15, [pc, #88]	; 8000dac <InitVectorControl+0x94>
 8000d56:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8000d5a:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000db0 <InitVectorControl+0x98>
 8000d5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d62:	edd4 6a05 	vldr	s13, [r4, #20]
 8000d66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d6a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
	vectorControlData->Vdq_FF[1] = sensData.electAngVelo * ( Ke + La * vectorControlData->Idq[0]);
 8000d6e:	edd4 6a04 	vldr	s13, [r4, #16]
 8000d72:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8000db4 <InitVectorControl+0x9c>
 8000d76:	ee66 6a86 	vmul.f32	s13, s13, s12
 8000d7a:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 8000db8 <InitVectorControl+0xa0>
 8000d7e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8000d82:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000d86:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0] - vectorControlData->Vdq_FF[0];
 8000d8a:	edd4 6a08 	vldr	s13, [r4, #32]
 8000d8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d92:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1] - vectorControlData->Vdq_FF[1];
 8000d96:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8000d9a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000d9e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
}
 8000da2:	b00e      	add	sp, #56	; 0x38
 8000da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000da8:	b004      	add	sp, #16
 8000daa:	4770      	bx	lr
 8000dac:	39fba882 	.word	0x39fba882
 8000db0:	3ecccccd 	.word	0x3ecccccd
 8000db4:	3949539b 	.word	0x3949539b
 8000db8:	3a870111 	.word	0x3a870111

08000dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dbc:	b570      	push	{r4, r5, r6, lr}
 8000dbe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	2400      	movs	r4, #0
 8000dc2:	9403      	str	r4, [sp, #12]
 8000dc4:	9404      	str	r4, [sp, #16]
 8000dc6:	9405      	str	r4, [sp, #20]
 8000dc8:	9406      	str	r4, [sp, #24]
 8000dca:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_GPIO_Init+0x8c>)
 8000dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dd0:	f042 0201 	orr.w	r2, r2, #1
 8000dd4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dd8:	f002 0201 	and.w	r2, r2, #1
 8000ddc:	9201      	str	r2, [sp, #4]
 8000dde:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000de2:	f042 0202 	orr.w	r2, r2, #2
 8000de6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|SYS_SW_Pin, GPIO_PIN_RESET);
 8000df2:	4622      	mov	r2, r4
 8000df4:	f241 0110 	movw	r1, #4112	; 0x1010
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f001 ffb9 	bl	8002d72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DRV_EN_Pin|PWM_EN_Pin, GPIO_PIN_RESET);
 8000e00:	4d12      	ldr	r5, [pc, #72]	; (8000e4c <MX_GPIO_Init+0x90>)
 8000e02:	4622      	mov	r2, r4
 8000e04:	2106      	movs	r1, #6
 8000e06:	4628      	mov	r0, r5
 8000e08:	f001 ffb3 	bl	8002d72 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_CS_Pin SYS_SW_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|SYS_SW_Pin;
 8000e0c:	f241 0310 	movw	r3, #4112	; 0x1010
 8000e10:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2601      	movs	r6, #1
 8000e14:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	a903      	add	r1, sp, #12
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f001 feb6 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e24:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	a903      	add	r1, sp, #12
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	f001 feaf 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV_EN_Pin PWM_EN_Pin */
  GPIO_InitStruct.Pin = DRV_EN_Pin|PWM_EN_Pin;
 8000e32:	2306      	movs	r3, #6
 8000e34:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	a903      	add	r1, sp, #12
 8000e3e:	4628      	mov	r0, r5
 8000e40:	f001 fea6 	bl	8002b90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e44:	b008      	add	sp, #32
 8000e46:	bd70      	pop	{r4, r5, r6, pc}
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	48000400 	.word	0x48000400

08000e50 <SPI_TransmitReceive>:


}

uint8_t SPI_TransmitReceive(SPI_HandleTypeDef * hspi, uint16_t TxData, uint16_t *RxData)
{
 8000e50:	b410      	push	{r4}
 8000e52:	b083      	sub	sp, #12
  volatile uint32_t cnt = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	9301      	str	r3, [sp, #4]

   while ((hspi->Instance->SR & SPI_SR_TXE) == 0)
 8000e58:	6803      	ldr	r3, [r0, #0]
 8000e5a:	689c      	ldr	r4, [r3, #8]
 8000e5c:	f014 0f02 	tst.w	r4, #2
 8000e60:	d0fa      	beq.n	8000e58 <SPI_TransmitReceive+0x8>
   {
	;
   }
    hspi->Instance->DR = TxData;
 8000e62:	60d9      	str	r1, [r3, #12]

    while ((hspi->Instance->SR & SPI_SR_RXNE)==0)
 8000e64:	6803      	ldr	r3, [r0, #0]
 8000e66:	6899      	ldr	r1, [r3, #8]
 8000e68:	f011 0f01 	tst.w	r1, #1
 8000e6c:	d0fa      	beq.n	8000e64 <SPI_TransmitReceive+0x14>
     {
	;
   	}
        if((hspi->Instance->SR & SPI_SR_RXNE))
 8000e6e:	6899      	ldr	r1, [r3, #8]
 8000e70:	f011 0f01 	tst.w	r1, #1
 8000e74:	d107      	bne.n	8000e86 <SPI_TransmitReceive+0x36>
        {
            *RxData = hspi->Instance->DR;
            return 0;
        }
        cnt++;
 8000e76:	9b01      	ldr	r3, [sp, #4]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	9301      	str	r3, [sp, #4]


    return 1;
 8000e7c:	2001      	movs	r0, #1
	while ((hspi->Instance->SR & SPI_SR_TXE) == 0);
}
 8000e7e:	b003      	add	sp, #12
 8000e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e84:	4770      	bx	lr
            *RxData = hspi->Instance->DR;
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	8013      	strh	r3, [r2, #0]
            return 0;
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	e7f7      	b.n	8000e7e <SPI_TransmitReceive+0x2e>
	...

08000e90 <SPI_TransmitReceive_lap>:
void SPI_TransmitReceive_lap(void){
 8000e90:	b570      	push	{r4, r5, r6, lr}
	data_t[0] = 0x8021;
 8000e92:	4c34      	ldr	r4, [pc, #208]	; (8000f64 <SPI_TransmitReceive_lap+0xd4>)
 8000e94:	f248 0321 	movw	r3, #32801	; 0x8021
 8000e98:	8023      	strh	r3, [r4, #0]
	data_t[1] = 0xffff;
 8000e9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e9e:	8063      	strh	r3, [r4, #2]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f001 ff63 	bl	8002d72 <HAL_GPIO_WritePin>
	__HAL_SPI_ENABLE(&hspi1);
 8000eac:	4e2e      	ldr	r6, [pc, #184]	; (8000f68 <SPI_TransmitReceive_lap+0xd8>)
 8000eae:	6832      	ldr	r2, [r6, #0]
 8000eb0:	6813      	ldr	r3, [r2, #0]
 8000eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb6:	6013      	str	r3, [r2, #0]
	SPI_TransmitReceive(&hspi1, data_t[0],&data_r[0]);
 8000eb8:	4d2c      	ldr	r5, [pc, #176]	; (8000f6c <SPI_TransmitReceive_lap+0xdc>)
 8000eba:	462a      	mov	r2, r5
 8000ebc:	8821      	ldrh	r1, [r4, #0]
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	f7ff ffc6 	bl	8000e50 <SPI_TransmitReceive>
	SPI_TransmitReceive(&hspi1, data_t[1],&data_r[1]);
 8000ec4:	1caa      	adds	r2, r5, #2
 8000ec6:	8861      	ldrh	r1, [r4, #2]
 8000ec8:	4630      	mov	r0, r6
 8000eca:	f7ff ffc1 	bl	8000e50 <SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed6:	f001 ff4c 	bl	8002d72 <HAL_GPIO_WritePin>
	angle = (((data_r[1] & 0x7fff) << 1) >> 2);
 8000eda:	886b      	ldrh	r3, [r5, #2]
 8000edc:	f3c3 034d 	ubfx	r3, r3, #1, #14
 8000ee0:	ee07 3a90 	vmov	s15, r3
	angle_get = 16383.0f - angle;//(float)(~(16383 - angle));
 8000ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee8:	eddf 7a21 	vldr	s15, [pc, #132]	; 8000f70 <SPI_TransmitReceive_lap+0xe0>
 8000eec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <SPI_TransmitReceive_lap+0xe4>)
 8000ef2:	edc3 7a00 	vstr	s15, [r3]
    if( angle_get > angle_offset )
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <SPI_TransmitReceive_lap+0xe8>)
 8000ef8:	ed93 7a00 	vldr	s14, [r3]
 8000efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f04:	dd23      	ble.n	8000f4e <SPI_TransmitReceive_lap+0xbe>
        angle_corrected = angle_get - angle_offset;
 8000f06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <SPI_TransmitReceive_lap+0xec>)
 8000f0c:	edc3 7a00 	vstr	s15, [r3]
    angle_corrected_16bit = (((uint16_t)angle_corrected) << 2 ) * 7;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <SPI_TransmitReceive_lap+0xec>)
 8000f12:	edd3 7a00 	vldr	s15, [r3]
 8000f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1a:	ee17 3a90 	vmov	r3, s15
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	0153      	lsls	r3, r2, #5
 8000f22:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	ee07 3a90 	vmov	s15, r3
    eangle_get = angle_corrected_16bit * TWOPIDIVBITMAX16;
 8000f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f30:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000f80 <SPI_TransmitReceive_lap+0xf0>
 8000f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f38:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000f84 <SPI_TransmitReceive_lap+0xf4>
 8000f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <SPI_TransmitReceive_lap+0xf8>)
 8000f42:	edc3 7a00 	vstr	s15, [r3]
    gTheta = eangle_get;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <SPI_TransmitReceive_lap+0xfc>)
 8000f48:	edc3 7a00 	vstr	s15, [r3]
}
 8000f4c:	bd70      	pop	{r4, r5, r6, pc}
        angle_corrected = 16383.0f - (angle_offset - angle_get);
 8000f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f52:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000f70 <SPI_TransmitReceive_lap+0xe0>
 8000f56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <SPI_TransmitReceive_lap+0xec>)
 8000f5c:	edc3 7a00 	vstr	s15, [r3]
 8000f60:	e7d6      	b.n	8000f10 <SPI_TransmitReceive_lap+0x80>
 8000f62:	bf00      	nop
 8000f64:	20000198 	.word	0x20000198
 8000f68:	2000020c 	.word	0x2000020c
 8000f6c:	20000194 	.word	0x20000194
 8000f70:	467ffc00 	.word	0x467ffc00
 8000f74:	20000190 	.word	0x20000190
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	2000018c 	.word	0x2000018c
 8000f80:	40c90fdb 	.word	0x40c90fdb
 8000f84:	37800000 	.word	0x37800000
 8000f88:	2000019c 	.word	0x2000019c
 8000f8c:	2000009c 	.word	0x2000009c

08000f90 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <Error_Handler+0x2>

08000f94 <MX_TIM1_Init>:
{
 8000f94:	b510      	push	{r4, lr}
 8000f96:	b098      	sub	sp, #96	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	2400      	movs	r4, #0
 8000f9a:	9415      	str	r4, [sp, #84]	; 0x54
 8000f9c:	9416      	str	r4, [sp, #88]	; 0x58
 8000f9e:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa0:	940e      	str	r4, [sp, #56]	; 0x38
 8000fa2:	940f      	str	r4, [sp, #60]	; 0x3c
 8000fa4:	9410      	str	r4, [sp, #64]	; 0x40
 8000fa6:	9411      	str	r4, [sp, #68]	; 0x44
 8000fa8:	9412      	str	r4, [sp, #72]	; 0x48
 8000faa:	9413      	str	r4, [sp, #76]	; 0x4c
 8000fac:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fae:	2234      	movs	r2, #52	; 0x34
 8000fb0:	4621      	mov	r1, r4
 8000fb2:	a801      	add	r0, sp, #4
 8000fb4:	f003 fba0 	bl	80046f8 <memset>
  htim1.Instance = TIM1;
 8000fb8:	4834      	ldr	r0, [pc, #208]	; (800108c <MX_TIM1_Init+0xf8>)
 8000fba:	4b35      	ldr	r3, [pc, #212]	; (8001090 <MX_TIM1_Init+0xfc>)
 8000fbc:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8000fbe:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000fc0:	2320      	movs	r3, #32
 8000fc2:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 4000;
 8000fc4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000fc8:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fca:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fcc:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fd0:	f002 ff64 	bl	8003e9c <HAL_TIM_PWM_Init>
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	d14a      	bne.n	800106e <MX_TIM1_Init+0xda>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000fd8:	2370      	movs	r3, #112	; 0x70
 8000fda:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fe2:	a915      	add	r1, sp, #84	; 0x54
 8000fe4:	4829      	ldr	r0, [pc, #164]	; (800108c <MX_TIM1_Init+0xf8>)
 8000fe6:	f003 fac3 	bl	8004570 <HAL_TIMEx_MasterConfigSynchronization>
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d141      	bne.n	8001072 <MX_TIM1_Init+0xde>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fee:	2360      	movs	r3, #96	; 0x60
 8000ff0:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff6:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ff8:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffa:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ffc:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ffe:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001000:	a90e      	add	r1, sp, #56	; 0x38
 8001002:	4822      	ldr	r0, [pc, #136]	; (800108c <MX_TIM1_Init+0xf8>)
 8001004:	f002 fff0 	bl	8003fe8 <HAL_TIM_PWM_ConfigChannel>
 8001008:	2800      	cmp	r0, #0
 800100a:	d134      	bne.n	8001076 <MX_TIM1_Init+0xe2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800100c:	2204      	movs	r2, #4
 800100e:	a90e      	add	r1, sp, #56	; 0x38
 8001010:	481e      	ldr	r0, [pc, #120]	; (800108c <MX_TIM1_Init+0xf8>)
 8001012:	f002 ffe9 	bl	8003fe8 <HAL_TIM_PWM_ConfigChannel>
 8001016:	2800      	cmp	r0, #0
 8001018:	d12f      	bne.n	800107a <MX_TIM1_Init+0xe6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800101a:	2208      	movs	r2, #8
 800101c:	a90e      	add	r1, sp, #56	; 0x38
 800101e:	481b      	ldr	r0, [pc, #108]	; (800108c <MX_TIM1_Init+0xf8>)
 8001020:	f002 ffe2 	bl	8003fe8 <HAL_TIM_PWM_ConfigChannel>
 8001024:	bb58      	cbnz	r0, 800107e <MX_TIM1_Init+0xea>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001026:	2370      	movs	r3, #112	; 0x70
 8001028:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800102a:	220c      	movs	r2, #12
 800102c:	a90e      	add	r1, sp, #56	; 0x38
 800102e:	4817      	ldr	r0, [pc, #92]	; (800108c <MX_TIM1_Init+0xf8>)
 8001030:	f002 ffda 	bl	8003fe8 <HAL_TIM_PWM_ConfigChannel>
 8001034:	bb28      	cbnz	r0, 8001082 <MX_TIM1_Init+0xee>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800103a:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800103c:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800103e:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001040:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001046:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001048:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800104a:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800104c:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800104e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001052:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001054:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001056:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001058:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800105a:	a901      	add	r1, sp, #4
 800105c:	480b      	ldr	r0, [pc, #44]	; (800108c <MX_TIM1_Init+0xf8>)
 800105e:	f003 fad1 	bl	8004604 <HAL_TIMEx_ConfigBreakDeadTime>
 8001062:	b980      	cbnz	r0, 8001086 <MX_TIM1_Init+0xf2>
  HAL_TIM_MspPostInit(&htim1);
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <MX_TIM1_Init+0xf8>)
 8001066:	f000 fae5 	bl	8001634 <HAL_TIM_MspPostInit>
}
 800106a:	b018      	add	sp, #96	; 0x60
 800106c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800106e:	f7ff ff8f 	bl	8000f90 <Error_Handler>
    Error_Handler();
 8001072:	f7ff ff8d 	bl	8000f90 <Error_Handler>
    Error_Handler();
 8001076:	f7ff ff8b 	bl	8000f90 <Error_Handler>
    Error_Handler();
 800107a:	f7ff ff89 	bl	8000f90 <Error_Handler>
    Error_Handler();
 800107e:	f7ff ff87 	bl	8000f90 <Error_Handler>
    Error_Handler();
 8001082:	f7ff ff85 	bl	8000f90 <Error_Handler>
    Error_Handler();
 8001086:	f7ff ff83 	bl	8000f90 <Error_Handler>
 800108a:	bf00      	nop
 800108c:	20000270 	.word	0x20000270
 8001090:	40012c00 	.word	0x40012c00

08001094 <MX_ADC1_Init>:
{
 8001094:	b510      	push	{r4, lr}
 8001096:	b09a      	sub	sp, #104	; 0x68
  ADC_MultiModeTypeDef multimode = {0};
 8001098:	2400      	movs	r4, #0
 800109a:	9417      	str	r4, [sp, #92]	; 0x5c
 800109c:	9418      	str	r4, [sp, #96]	; 0x60
 800109e:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_ChannelConfTypeDef sConfig = {0};
 80010a0:	2220      	movs	r2, #32
 80010a2:	4621      	mov	r1, r4
 80010a4:	a80f      	add	r0, sp, #60	; 0x3c
 80010a6:	f003 fb27 	bl	80046f8 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80010aa:	223c      	movs	r2, #60	; 0x3c
 80010ac:	4621      	mov	r1, r4
 80010ae:	4668      	mov	r0, sp
 80010b0:	f003 fb22 	bl	80046f8 <memset>
  hadc1.Instance = ADC1;
 80010b4:	4840      	ldr	r0, [pc, #256]	; (80011b8 <MX_ADC1_Init+0x124>)
 80010b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010ba:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010bc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80010c0:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010c2:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c4:	60c4      	str	r4, [r0, #12]
  hadc1.Init.GainCompensation = 0;
 80010c6:	6104      	str	r4, [r0, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010c8:	2301      	movs	r3, #1
 80010ca:	6143      	str	r3, [r0, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010cc:	2204      	movs	r2, #4
 80010ce:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010d0:	7704      	strb	r4, [r0, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010d2:	7744      	strb	r4, [r0, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010d4:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d6:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010da:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010dc:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010de:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e2:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010e4:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e8:	f000 fb64 	bl	80017b4 <HAL_ADC_Init>
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d154      	bne.n	800119a <MX_ADC1_Init+0x106>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f4:	a917      	add	r1, sp, #92	; 0x5c
 80010f6:	4830      	ldr	r0, [pc, #192]	; (80011b8 <MX_ADC1_Init+0x124>)
 80010f8:	f001 fc54 	bl	80029a4 <HAL_ADCEx_MultiModeConfigChannel>
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d14e      	bne.n	800119e <MX_ADC1_Init+0x10a>
  sConfig.Channel = ADC_CHANNEL_1;
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <MX_ADC1_Init+0x128>)
 8001102:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001104:	2306      	movs	r3, #6
 8001106:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001108:	2300      	movs	r3, #0
 800110a:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800110c:	227f      	movs	r2, #127	; 0x7f
 800110e:	9212      	str	r2, [sp, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001110:	2204      	movs	r2, #4
 8001112:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfig.Offset = 0;
 8001114:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001116:	a90f      	add	r1, sp, #60	; 0x3c
 8001118:	4827      	ldr	r0, [pc, #156]	; (80011b8 <MX_ADC1_Init+0x124>)
 800111a:	f000 fdb3 	bl	8001c84 <HAL_ADC_ConfigChannel>
 800111e:	2800      	cmp	r0, #0
 8001120:	d13f      	bne.n	80011a2 <MX_ADC1_Init+0x10e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <MX_ADC1_Init+0x128>)
 8001124:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001126:	2309      	movs	r3, #9
 8001128:	9301      	str	r3, [sp, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800112a:	2300      	movs	r3, #0
 800112c:	9302      	str	r3, [sp, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800112e:	227f      	movs	r2, #127	; 0x7f
 8001130:	9203      	str	r2, [sp, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001132:	2204      	movs	r2, #4
 8001134:	9204      	str	r2, [sp, #16]
  sConfigInjected.InjectedOffset = 0;
 8001136:	9305      	str	r3, [sp, #20]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8001138:	9208      	str	r2, [sp, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800113a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 800113e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001142:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800114a:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800114c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001150:	4669      	mov	r1, sp
 8001152:	4819      	ldr	r0, [pc, #100]	; (80011b8 <MX_ADC1_Init+0x124>)
 8001154:	f001 f916 	bl	8002384 <HAL_ADCEx_InjectedConfigChannel>
 8001158:	bb28      	cbnz	r0, 80011a6 <MX_ADC1_Init+0x112>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_ADC1_Init+0x12c>)
 800115c:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800115e:	f240 130f 	movw	r3, #271	; 0x10f
 8001162:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001164:	4669      	mov	r1, sp
 8001166:	4814      	ldr	r0, [pc, #80]	; (80011b8 <MX_ADC1_Init+0x124>)
 8001168:	f001 f90c 	bl	8002384 <HAL_ADCEx_InjectedConfigChannel>
 800116c:	b9e8      	cbnz	r0, 80011aa <MX_ADC1_Init+0x116>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <MX_ADC1_Init+0x130>)
 8001170:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001172:	f240 2315 	movw	r3, #533	; 0x215
 8001176:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001178:	4669      	mov	r1, sp
 800117a:	480f      	ldr	r0, [pc, #60]	; (80011b8 <MX_ADC1_Init+0x124>)
 800117c:	f001 f902 	bl	8002384 <HAL_ADCEx_InjectedConfigChannel>
 8001180:	b9a8      	cbnz	r0, 80011ae <MX_ADC1_Init+0x11a>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_ADC1_Init+0x134>)
 8001184:	9300      	str	r3, [sp, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8001186:	f240 331b 	movw	r3, #795	; 0x31b
 800118a:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800118c:	4669      	mov	r1, sp
 800118e:	480a      	ldr	r0, [pc, #40]	; (80011b8 <MX_ADC1_Init+0x124>)
 8001190:	f001 f8f8 	bl	8002384 <HAL_ADCEx_InjectedConfigChannel>
 8001194:	b968      	cbnz	r0, 80011b2 <MX_ADC1_Init+0x11e>
}
 8001196:	b01a      	add	sp, #104	; 0x68
 8001198:	bd10      	pop	{r4, pc}
    Error_Handler();
 800119a:	f7ff fef9 	bl	8000f90 <Error_Handler>
    Error_Handler();
 800119e:	f7ff fef7 	bl	8000f90 <Error_Handler>
    Error_Handler();
 80011a2:	f7ff fef5 	bl	8000f90 <Error_Handler>
    Error_Handler();
 80011a6:	f7ff fef3 	bl	8000f90 <Error_Handler>
    Error_Handler();
 80011aa:	f7ff fef1 	bl	8000f90 <Error_Handler>
    Error_Handler();
 80011ae:	f7ff feef 	bl	8000f90 <Error_Handler>
    Error_Handler();
 80011b2:	f7ff feed 	bl	8000f90 <Error_Handler>
 80011b6:	bf00      	nop
 80011b8:	200001a0 	.word	0x200001a0
 80011bc:	04300002 	.word	0x04300002
 80011c0:	08600004 	.word	0x08600004
 80011c4:	0c900008 	.word	0x0c900008
 80011c8:	10c00010 	.word	0x10c00010

080011cc <MX_SPI1_Init>:
{
 80011cc:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80011ce:	4810      	ldr	r0, [pc, #64]	; (8001210 <MX_SPI1_Init+0x44>)
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_SPI1_Init+0x48>)
 80011d2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011d4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80011d8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011da:	2300      	movs	r3, #0
 80011dc:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80011de:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80011e2:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e4:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011e6:	2201      	movs	r2, #1
 80011e8:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ee:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011f0:	2220      	movs	r2, #32
 80011f2:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f4:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011fa:	2207      	movs	r2, #7
 80011fc:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011fe:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001200:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001202:	f002 fb99 	bl	8003938 <HAL_SPI_Init>
 8001206:	b900      	cbnz	r0, 800120a <MX_SPI1_Init+0x3e>
}
 8001208:	bd08      	pop	{r3, pc}
    Error_Handler();
 800120a:	f7ff fec1 	bl	8000f90 <Error_Handler>
 800120e:	bf00      	nop
 8001210:	2000020c 	.word	0x2000020c
 8001214:	40013000 	.word	0x40013000

08001218 <MX_TIM8_Init>:
{
 8001218:	b500      	push	{lr}
 800121a:	b089      	sub	sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	2300      	movs	r3, #0
 800121e:	9305      	str	r3, [sp, #20]
 8001220:	9306      	str	r3, [sp, #24]
 8001222:	9307      	str	r3, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	9302      	str	r3, [sp, #8]
 8001228:	9303      	str	r3, [sp, #12]
 800122a:	9304      	str	r3, [sp, #16]
  htim8.Instance = TIM8;
 800122c:	4816      	ldr	r0, [pc, #88]	; (8001288 <MX_TIM8_Init+0x70>)
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <MX_TIM8_Init+0x74>)
 8001230:	6002      	str	r2, [r0, #0]
  htim8.Init.Prescaler = 170;
 8001232:	22aa      	movs	r2, #170	; 0xaa
 8001234:	6042      	str	r2, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 60000;
 8001238:	f64e 2260 	movw	r2, #60000	; 0xea60
 800123c:	60c2      	str	r2, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123e:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 8001240:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001242:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001244:	f002 fe5a 	bl	8003efc <HAL_TIM_IC_Init>
 8001248:	b9b8      	cbnz	r0, 800127a <MX_TIM8_Init+0x62>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800124e:	9306      	str	r3, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001250:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001252:	a905      	add	r1, sp, #20
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_TIM8_Init+0x70>)
 8001256:	f003 f98b 	bl	8004570 <HAL_TIMEx_MasterConfigSynchronization>
 800125a:	b980      	cbnz	r0, 800127e <MX_TIM8_Init+0x66>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800125c:	230a      	movs	r3, #10
 800125e:	9301      	str	r3, [sp, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001260:	2301      	movs	r3, #1
 8001262:	9302      	str	r3, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001264:	2200      	movs	r2, #0
 8001266:	9203      	str	r2, [sp, #12]
  sConfigIC.ICFilter = 0;
 8001268:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800126a:	a901      	add	r1, sp, #4
 800126c:	4806      	ldr	r0, [pc, #24]	; (8001288 <MX_TIM8_Init+0x70>)
 800126e:	f002 ff8d 	bl	800418c <HAL_TIM_IC_ConfigChannel>
 8001272:	b930      	cbnz	r0, 8001282 <MX_TIM8_Init+0x6a>
}
 8001274:	b009      	add	sp, #36	; 0x24
 8001276:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800127a:	f7ff fe89 	bl	8000f90 <Error_Handler>
    Error_Handler();
 800127e:	f7ff fe87 	bl	8000f90 <Error_Handler>
    Error_Handler();
 8001282:	f7ff fe85 	bl	8000f90 <Error_Handler>
 8001286:	bf00      	nop
 8001288:	20000308 	.word	0x20000308
 800128c:	40013400 	.word	0x40013400

08001290 <MX_TIM3_Init>:
{
 8001290:	b500      	push	{lr}
 8001292:	b089      	sub	sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	2300      	movs	r3, #0
 8001296:	9305      	str	r3, [sp, #20]
 8001298:	9306      	str	r3, [sp, #24]
 800129a:	9307      	str	r3, [sp, #28]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	9303      	str	r3, [sp, #12]
 80012a2:	9304      	str	r3, [sp, #16]
  htim3.Instance = TIM3;
 80012a4:	4815      	ldr	r0, [pc, #84]	; (80012fc <MX_TIM3_Init+0x6c>)
 80012a6:	4a16      	ldr	r2, [pc, #88]	; (8001300 <MX_TIM3_Init+0x70>)
 80012a8:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 170;
 80012aa:	22aa      	movs	r2, #170	; 0xaa
 80012ac:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 60000;
 80012b0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80012b4:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012ba:	f002 fe1f 	bl	8003efc <HAL_TIM_IC_Init>
 80012be:	b9b8      	cbnz	r0, 80012f0 <MX_TIM3_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c6:	a905      	add	r1, sp, #20
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <MX_TIM3_Init+0x6c>)
 80012ca:	f003 f951 	bl	8004570 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	b988      	cbnz	r0, 80012f4 <MX_TIM3_Init+0x64>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80012d0:	230a      	movs	r3, #10
 80012d2:	9301      	str	r3, [sp, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012d4:	2301      	movs	r3, #1
 80012d6:	9302      	str	r3, [sp, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	9303      	str	r3, [sp, #12]
  sConfigIC.ICFilter = 0;
 80012dc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80012de:	220c      	movs	r2, #12
 80012e0:	a901      	add	r1, sp, #4
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_TIM3_Init+0x6c>)
 80012e4:	f002 ff52 	bl	800418c <HAL_TIM_IC_ConfigChannel>
 80012e8:	b930      	cbnz	r0, 80012f8 <MX_TIM3_Init+0x68>
}
 80012ea:	b009      	add	sp, #36	; 0x24
 80012ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012f0:	f7ff fe4e 	bl	8000f90 <Error_Handler>
    Error_Handler();
 80012f4:	f7ff fe4c 	bl	8000f90 <Error_Handler>
    Error_Handler();
 80012f8:	f7ff fe4a 	bl	8000f90 <Error_Handler>
 80012fc:	200002bc 	.word	0x200002bc
 8001300:	40000400 	.word	0x40000400

08001304 <SystemClock_Config>:
{
 8001304:	b500      	push	{lr}
 8001306:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001308:	2238      	movs	r2, #56	; 0x38
 800130a:	2100      	movs	r1, #0
 800130c:	a806      	add	r0, sp, #24
 800130e:	f003 f9f3 	bl	80046f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001312:	2000      	movs	r0, #0
 8001314:	9001      	str	r0, [sp, #4]
 8001316:	9002      	str	r0, [sp, #8]
 8001318:	9003      	str	r0, [sp, #12]
 800131a:	9004      	str	r0, [sp, #16]
 800131c:	9005      	str	r0, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800131e:	f001 fd2d 	bl	8002d7c <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001322:	2302      	movs	r3, #2
 8001324:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800132a:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800132c:	2240      	movs	r2, #64	; 0x40
 800132e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001330:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001332:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001334:	2201      	movs	r2, #1
 8001336:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 8001338:	2215      	movs	r2, #21
 800133a:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800133c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800133e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001340:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001342:	a806      	add	r0, sp, #24
 8001344:	f001 fdd4 	bl	8002ef0 <HAL_RCC_OscConfig>
 8001348:	b980      	cbnz	r0, 800136c <SystemClock_Config+0x68>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134a:	230f      	movs	r3, #15
 800134c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134e:	2303      	movs	r3, #3
 8001350:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001356:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001358:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800135a:	2104      	movs	r1, #4
 800135c:	eb0d 0001 	add.w	r0, sp, r1
 8001360:	f002 f87c 	bl	800345c <HAL_RCC_ClockConfig>
 8001364:	b920      	cbnz	r0, 8001370 <SystemClock_Config+0x6c>
}
 8001366:	b015      	add	sp, #84	; 0x54
 8001368:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800136c:	f7ff fe10 	bl	8000f90 <Error_Handler>
    Error_Handler();
 8001370:	f7ff fe0e 	bl	8000f90 <Error_Handler>

08001374 <main>:
{
 8001374:	b508      	push	{r3, lr}
  HAL_Init();
 8001376:	f000 f9fb 	bl	8001770 <HAL_Init>
  SystemClock_Config();
 800137a:	f7ff ffc3 	bl	8001304 <SystemClock_Config>
  MX_GPIO_Init();
 800137e:	f7ff fd1d 	bl	8000dbc <MX_GPIO_Init>
  MX_TIM1_Init();
 8001382:	f7ff fe07 	bl	8000f94 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001386:	f7ff fe85 	bl	8001094 <MX_ADC1_Init>
  MX_SPI1_Init();
 800138a:	f7ff ff1f 	bl	80011cc <MX_SPI1_Init>
  MX_TIM8_Init();
 800138e:	f7ff ff43 	bl	8001218 <MX_TIM8_Init>
  MX_TIM3_Init();
 8001392:	f7ff ff7d 	bl	8001290 <MX_TIM3_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8001396:	4c1f      	ldr	r4, [pc, #124]	; (8001414 <main+0xa0>)
 8001398:	4620      	mov	r0, r4
 800139a:	f002 fcd9 	bl	8003d50 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 800139e:	481e      	ldr	r0, [pc, #120]	; (8001418 <main+0xa4>)
 80013a0:	f000 ff50 	bl	8002244 <HAL_ADCEx_InjectedStart_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013a4:	2100      	movs	r1, #0
 80013a6:	4620      	mov	r0, r4
 80013a8:	f002 ff62 	bl	8004270 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013ac:	2104      	movs	r1, #4
 80013ae:	4620      	mov	r0, r4
 80013b0:	f002 ff5e 	bl	8004270 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013b4:	2108      	movs	r1, #8
 80013b6:	4620      	mov	r0, r4
 80013b8:	f002 ff5a 	bl	8004270 <HAL_TIM_PWM_Start>
  TIM1 -> RCR = 1;
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <main+0xa8>)
 80013be:	2201      	movs	r2, #1
 80013c0:	631a      	str	r2, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 80013c2:	695a      	ldr	r2, [r3, #20]
 80013c4:	f042 0201 	orr.w	r2, r2, #1
 80013c8:	615a      	str	r2, [r3, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 80013ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80013d4:	601a      	str	r2, [r3, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	f042 0210 	orr.w	r2, r2, #16
 80013dc:	601a      	str	r2, [r3, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80013e4:	601a      	str	r2, [r3, #0]
  TIM1 -> ARR = COUNTERPERIOD;
 80013e6:	f641 3257 	movw	r2, #6999	; 0x1b57
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top
 80013ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ee:	3a28      	subs	r2, #40	; 0x28
 80013f0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_Base_Start_IT(&htim3);
 80013f2:	4c0b      	ldr	r4, [pc, #44]	; (8001420 <main+0xac>)
 80013f4:	4620      	mov	r0, r4
 80013f6:	f002 fcab 	bl	8003d50 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_4);
 80013fa:	210c      	movs	r1, #12
 80013fc:	4620      	mov	r0, r4
 80013fe:	f002 ffe3 	bl	80043c8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8001402:	4c08      	ldr	r4, [pc, #32]	; (8001424 <main+0xb0>)
 8001404:	4620      	mov	r0, r4
 8001406:	f002 fca3 	bl	8003d50 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim8,TIM_CHANNEL_1);
 800140a:	2100      	movs	r1, #0
 800140c:	4620      	mov	r0, r4
 800140e:	f002 ffdb 	bl	80043c8 <HAL_TIM_IC_Start_IT>
  while (1)
 8001412:	e7fe      	b.n	8001412 <main+0x9e>
 8001414:	20000270 	.word	0x20000270
 8001418:	200001a0 	.word	0x200001a0
 800141c:	40012c00 	.word	0x40012c00
 8001420:	200002bc 	.word	0x200002bc
 8001424:	20000308 	.word	0x20000308

08001428 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b500      	push	{lr}
 800142a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_MspInit+0x34>)
 800142e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001430:	f042 0201 	orr.w	r2, r2, #1
 8001434:	661a      	str	r2, [r3, #96]	; 0x60
 8001436:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001438:	f002 0201 	and.w	r2, r2, #1
 800143c:	9200      	str	r2, [sp, #0]
 800143e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001442:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001446:	659a      	str	r2, [r3, #88]	; 0x58
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001452:	f001 fd19 	bl	8002e88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	b003      	add	sp, #12
 8001458:	f85d fb04 	ldr.w	pc, [sp], #4
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001460:	b510      	push	{r4, lr}
 8001462:	b098      	sub	sp, #96	; 0x60
 8001464:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	2100      	movs	r1, #0
 8001468:	9113      	str	r1, [sp, #76]	; 0x4c
 800146a:	9114      	str	r1, [sp, #80]	; 0x50
 800146c:	9115      	str	r1, [sp, #84]	; 0x54
 800146e:	9116      	str	r1, [sp, #88]	; 0x58
 8001470:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001472:	2244      	movs	r2, #68	; 0x44
 8001474:	a802      	add	r0, sp, #8
 8001476:	f003 f93f 	bl	80046f8 <memset>
  if(hadc->Instance==ADC1)
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001480:	d001      	beq.n	8001486 <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001482:	b018      	add	sp, #96	; 0x60
 8001484:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800148a:	9302      	str	r3, [sp, #8]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800148c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001490:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001492:	a802      	add	r0, sp, #8
 8001494:	f002 f8de 	bl	8003654 <HAL_RCCEx_PeriphCLKConfig>
 8001498:	bb30      	cbnz	r0, 80014e8 <HAL_ADC_MspInit+0x88>
    __HAL_RCC_ADC12_CLK_ENABLE();
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_ADC_MspInit+0x90>)
 800149c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800149e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80014a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014a6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80014aa:	9200      	str	r2, [sp, #0]
 80014ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014b0:	f042 0201 	orr.w	r2, r2, #1
 80014b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80014c0:	230f      	movs	r3, #15
 80014c2:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c4:	2303      	movs	r3, #3
 80014c6:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2400      	movs	r4, #0
 80014ca:	9415      	str	r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	a913      	add	r1, sp, #76	; 0x4c
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f001 fb5d 	bl	8002b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80014d6:	4622      	mov	r2, r4
 80014d8:	4621      	mov	r1, r4
 80014da:	2012      	movs	r0, #18
 80014dc:	f001 fafe 	bl	8002adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80014e0:	2012      	movs	r0, #18
 80014e2:	f001 fb33 	bl	8002b4c <HAL_NVIC_EnableIRQ>
}
 80014e6:	e7cc      	b.n	8001482 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 80014e8:	f7ff fd52 	bl	8000f90 <Error_Handler>
 80014ec:	e7d5      	b.n	800149a <HAL_ADC_MspInit+0x3a>
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000

080014f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014f4:	b500      	push	{lr}
 80014f6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	2300      	movs	r3, #0
 80014fa:	9303      	str	r3, [sp, #12]
 80014fc:	9304      	str	r3, [sp, #16]
 80014fe:	9305      	str	r3, [sp, #20]
 8001500:	9306      	str	r3, [sp, #24]
 8001502:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8001504:	6802      	ldr	r2, [r0, #0]
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_SPI_MspInit+0x60>)
 8001508:	429a      	cmp	r2, r3
 800150a:	d002      	beq.n	8001512 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800150c:	b009      	add	sp, #36	; 0x24
 800150e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001512:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001516:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001518:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800151c:	661a      	str	r2, [r3, #96]	; 0x60
 800151e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001520:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001524:	9201      	str	r2, [sp, #4]
 8001526:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800153a:	23e0      	movs	r3, #224	; 0xe0
 800153c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001542:	2305      	movs	r3, #5
 8001544:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	a903      	add	r1, sp, #12
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f001 fb20 	bl	8002b90 <HAL_GPIO_Init>
}
 8001550:	e7dc      	b.n	800150c <HAL_SPI_MspInit+0x18>
 8001552:	bf00      	nop
 8001554:	40013000 	.word	0x40013000

08001558 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8001558:	6802      	ldr	r2, [r0, #0]
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_TIM_PWM_MspInit+0x28>)
 800155c:	429a      	cmp	r2, r3
 800155e:	d000      	beq.n	8001562 <HAL_TIM_PWM_MspInit+0xa>
 8001560:	4770      	bx	lr
{
 8001562:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001564:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001568:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800156a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800156e:	661a      	str	r2, [r3, #96]	; 0x60
 8001570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800157a:	b002      	add	sp, #8
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40012c00 	.word	0x40012c00

08001584 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001584:	b500      	push	{lr}
 8001586:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	2300      	movs	r3, #0
 800158a:	9305      	str	r3, [sp, #20]
 800158c:	9306      	str	r3, [sp, #24]
 800158e:	9307      	str	r3, [sp, #28]
 8001590:	9308      	str	r3, [sp, #32]
 8001592:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim_ic->Instance==TIM3)
 8001594:	6803      	ldr	r3, [r0, #0]
 8001596:	4a23      	ldr	r2, [pc, #140]	; (8001624 <HAL_TIM_IC_MspInit+0xa0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d005      	beq.n	80015a8 <HAL_TIM_IC_MspInit+0x24>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_ic->Instance==TIM8)
 800159c:	4a22      	ldr	r2, [pc, #136]	; (8001628 <HAL_TIM_IC_MspInit+0xa4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d020      	beq.n	80015e4 <HAL_TIM_IC_MspInit+0x60>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80015a2:	b00b      	add	sp, #44	; 0x2c
 80015a4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015a8:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_TIM_IC_MspInit+0xa8>)
 80015aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015ac:	f042 0202 	orr.w	r2, r2, #2
 80015b0:	659a      	str	r2, [r3, #88]	; 0x58
 80015b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015b4:	f002 0202 	and.w	r2, r2, #2
 80015b8:	9201      	str	r2, [sp, #4]
 80015ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015be:	f042 0202 	orr.w	r2, r2, #2
 80015c2:	64da      	str	r2, [r3, #76]	; 0x4c
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = Propo2_Pin;
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 80015d6:	230a      	movs	r3, #10
 80015d8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(Propo2_GPIO_Port, &GPIO_InitStruct);
 80015da:	a905      	add	r1, sp, #20
 80015dc:	4814      	ldr	r0, [pc, #80]	; (8001630 <HAL_TIM_IC_MspInit+0xac>)
 80015de:	f001 fad7 	bl	8002b90 <HAL_GPIO_Init>
 80015e2:	e7de      	b.n	80015a2 <HAL_TIM_IC_MspInit+0x1e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_TIM_IC_MspInit+0xa8>)
 80015e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015ec:	661a      	str	r2, [r3, #96]	; 0x60
 80015ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80015f4:	9203      	str	r2, [sp, #12]
 80015f6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	9304      	str	r3, [sp, #16]
 8001608:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = Propo_Pin;
 800160a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800160e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001614:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(Propo_GPIO_Port, &GPIO_InitStruct);
 8001616:	a905      	add	r1, sp, #20
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f001 fab8 	bl	8002b90 <HAL_GPIO_Init>
}
 8001620:	e7bf      	b.n	80015a2 <HAL_TIM_IC_MspInit+0x1e>
 8001622:	bf00      	nop
 8001624:	40000400 	.word	0x40000400
 8001628:	40013400 	.word	0x40013400
 800162c:	40021000 	.word	0x40021000
 8001630:	48000400 	.word	0x48000400

08001634 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001634:	b500      	push	{lr}
 8001636:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	2300      	movs	r3, #0
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	9303      	str	r3, [sp, #12]
 8001640:	9304      	str	r3, [sp, #16]
 8001642:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8001644:	6802      	ldr	r2, [r0, #0]
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_TIM_MspPostInit+0x50>)
 8001648:	429a      	cmp	r2, r3
 800164a:	d002      	beq.n	8001652 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800164c:	b007      	add	sp, #28
 800164e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001658:	f042 0201 	orr.w	r2, r2, #1
 800165c:	64da      	str	r2, [r3, #76]	; 0x4c
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001668:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800166c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001672:	2306      	movs	r3, #6
 8001674:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	a901      	add	r1, sp, #4
 8001678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167c:	f001 fa88 	bl	8002b90 <HAL_GPIO_Init>
}
 8001680:	e7e4      	b.n	800164c <HAL_TIM_MspPostInit+0x18>
 8001682:	bf00      	nop
 8001684:	40012c00 	.word	0x40012c00

08001688 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler>

0800168a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <HardFault_Handler>

0800168c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <MemManage_Handler>

0800168e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <BusFault_Handler>

08001690 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler>

08001692 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001692:	4770      	bx	lr

08001694 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001694:	4770      	bx	lr

08001696 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169a:	f000 f879 	bl	8001790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169e:	bd08      	pop	{r3, pc}

080016a0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80016a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016a2:	4804      	ldr	r0, [pc, #16]	; (80016b4 <ADC1_2_IRQHandler+0x14>)
 80016a4:	f000 f9a4 	bl	80019f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

//  HAL_GPIO_TogglePin(SYS_SW2_GPIO_Port, SYS_SW2_Pin);

	// Sequence Control
	Sequence_Low_Freq();
 80016a8:	f7fe fe00 	bl	80002ac <Sequence_Low_Freq>
	Sequence_High_Freq();
 80016ac:	f7fe ff28 	bl	8000500 <Sequence_High_Freq>

//	HAL_GPIO_TogglePin(SYS_SW2_GPIO_Port, SYS_SW2_Pin);

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80016b0:	bd08      	pop	{r3, pc}
 80016b2:	bf00      	nop
 80016b4:	200001a0 	.word	0x200001a0

080016b8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016b8:	4a03      	ldr	r2, [pc, #12]	; (80016c8 <SystemInit+0x10>)
 80016ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80016be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d0:	f7ff fff2 	bl	80016b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <LoopForever+0x6>)
  ldr r1, =_edata
 80016d6:	490d      	ldr	r1, [pc, #52]	; (800170c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <LoopForever+0xe>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016ec:	4c0a      	ldr	r4, [pc, #40]	; (8001718 <LoopForever+0x16>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80016fa:	f002 ffd9 	bl	80046b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fe:	f7ff fe39 	bl	8001374 <main>

08001702 <LoopForever>:

LoopForever:
    b LoopForever
 8001702:	e7fe      	b.n	8001702 <LoopForever>
  ldr   r0, =_estack
 8001704:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001710:	080059b0 	.word	0x080059b0
  ldr r2, =_sbss
 8001714:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001718:	20000358 	.word	0x20000358

0800171c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800171c:	e7fe      	b.n	800171c <COMP1_2_3_IRQHandler>
	...

08001720 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_InitTick+0x44>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	b90b      	cbnz	r3, 800172a <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001726:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001728:	4770      	bx	lr
{
 800172a:	b510      	push	{r4, lr}
 800172c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800172e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001732:	fbb0 f3f3 	udiv	r3, r0, r3
 8001736:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <HAL_InitTick+0x48>)
 8001738:	6810      	ldr	r0, [r2, #0]
 800173a:	fbb0 f0f3 	udiv	r0, r0, r3
 800173e:	f001 fa13 	bl	8002b68 <HAL_SYSTICK_Config>
 8001742:	b968      	cbnz	r0, 8001760 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001744:	2c0f      	cmp	r4, #15
 8001746:	d901      	bls.n	800174c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8001748:	2001      	movs	r0, #1
 800174a:	e00a      	b.n	8001762 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	4621      	mov	r1, r4
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f001 f9c2 	bl	8002adc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <HAL_InitTick+0x4c>)
 800175a:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 800175c:	2000      	movs	r0, #0
 800175e:	e000      	b.n	8001762 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8001760:	2001      	movs	r0, #1
}
 8001762:	bd10      	pop	{r4, pc}
 8001764:	20000008 	.word	0x20000008
 8001768:	20000004 	.word	0x20000004
 800176c:	2000000c 	.word	0x2000000c

08001770 <HAL_Init>:
{
 8001770:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001772:	2003      	movs	r0, #3
 8001774:	f001 f9a0 	bl	8002ab8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001778:	200f      	movs	r0, #15
 800177a:	f7ff ffd1 	bl	8001720 <HAL_InitTick>
 800177e:	b110      	cbz	r0, 8001786 <HAL_Init+0x16>
    status = HAL_ERROR;
 8001780:	2401      	movs	r4, #1
}
 8001782:	4620      	mov	r0, r4
 8001784:	bd10      	pop	{r4, pc}
 8001786:	4604      	mov	r4, r0
    HAL_MspInit();
 8001788:	f7ff fe4e 	bl	8001428 <HAL_MspInit>
 800178c:	e7f9      	b.n	8001782 <HAL_Init+0x12>
	...

08001790 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001790:	4a03      	ldr	r2, [pc, #12]	; (80017a0 <HAL_IncTick+0x10>)
 8001792:	6813      	ldr	r3, [r2, #0]
 8001794:	4903      	ldr	r1, [pc, #12]	; (80017a4 <HAL_IncTick+0x14>)
 8001796:	6809      	ldr	r1, [r1, #0]
 8001798:	440b      	add	r3, r1
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000354 	.word	0x20000354
 80017a4:	20000008 	.word	0x20000008

080017a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017a8:	4b01      	ldr	r3, [pc, #4]	; (80017b0 <HAL_GetTick+0x8>)
 80017aa:	6818      	ldr	r0, [r3, #0]
}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000354 	.word	0x20000354

080017b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017b4:	b530      	push	{r4, r5, lr}
 80017b6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80017bc:	2800      	cmp	r0, #0
 80017be:	f000 8107 	beq.w	80019d0 <HAL_ADC_Init+0x21c>
 80017c2:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017c4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80017c6:	b313      	cbz	r3, 800180e <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017c8:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80017d0:	d005      	beq.n	80017de <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 80017d8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80017dc:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017de:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017e0:	6893      	ldr	r3, [r2, #8]
 80017e2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80017e6:	d11f      	bne.n	8001828 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 80017e8:	6893      	ldr	r3, [r2, #8]
 80017ea:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f6:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017f8:	4b76      	ldr	r3, [pc, #472]	; (80019d4 <HAL_ADC_Init+0x220>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	099b      	lsrs	r3, r3, #6
 80017fe:	4a76      	ldr	r2, [pc, #472]	; (80019d8 <HAL_ADC_Init+0x224>)
 8001800:	fba2 2303 	umull	r2, r3, r2, r3
 8001804:	099b      	lsrs	r3, r3, #6
 8001806:	3301      	adds	r3, #1
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800180c:	e009      	b.n	8001822 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 800180e:	f7ff fe27 	bl	8001460 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001812:	2300      	movs	r3, #0
 8001814:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8001816:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 800181a:	e7d5      	b.n	80017c8 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800181c:	9b01      	ldr	r3, [sp, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001822:	9b01      	ldr	r3, [sp, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f9      	bne.n	800181c <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001828:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800182a:	6893      	ldr	r3, [r2, #8]
 800182c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001830:	f040 8096 	bne.w	8001960 <HAL_ADC_Init+0x1ac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001834:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001844:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001846:	6893      	ldr	r3, [r2, #8]
 8001848:	f013 0304 	ands.w	r3, r3, #4
 800184c:	d000      	beq.n	8001850 <HAL_ADC_Init+0x9c>
 800184e:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001850:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001852:	f011 0f10 	tst.w	r1, #16
 8001856:	f040 80b4 	bne.w	80019c2 <HAL_ADC_Init+0x20e>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 80b1 	bne.w	80019c2 <HAL_ADC_Init+0x20e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001860:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001862:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001866:	f043 0302 	orr.w	r3, r3, #2
 800186a:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800186c:	6893      	ldr	r3, [r2, #8]
 800186e:	f013 0f01 	tst.w	r3, #1
 8001872:	d115      	bne.n	80018a0 <HAL_ADC_Init+0xec>
 8001874:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f013 0301 	ands.w	r3, r3, #1
 800187e:	d000      	beq.n	8001882 <HAL_ADC_Init+0xce>
 8001880:	2301      	movs	r3, #1
 8001882:	4a56      	ldr	r2, [pc, #344]	; (80019dc <HAL_ADC_Init+0x228>)
 8001884:	6892      	ldr	r2, [r2, #8]
 8001886:	f012 0201 	ands.w	r2, r2, #1
 800188a:	d000      	beq.n	800188e <HAL_ADC_Init+0xda>
 800188c:	2201      	movs	r2, #1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800188e:	4313      	orrs	r3, r2
 8001890:	d106      	bne.n	80018a0 <HAL_ADC_Init+0xec>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001892:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001894:	4952      	ldr	r1, [pc, #328]	; (80019e0 <HAL_ADC_Init+0x22c>)
 8001896:	688a      	ldr	r2, [r1, #8]
 8001898:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018a0:	7f62      	ldrb	r2, [r4, #29]
                 hadc->Init.Overrun                                                     |
 80018a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018a4:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 80018a8:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 80018aa:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 80018ac:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 80018ae:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018b0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d053      	beq.n	8001964 <HAL_ADC_Init+0x1b0>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018be:	b122      	cbz	r2, 80018ca <HAL_ADC_Init+0x116>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018c0:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80018c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80018c6:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018c8:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80018ca:	6821      	ldr	r1, [r4, #0]
 80018cc:	68cd      	ldr	r5, [r1, #12]
 80018ce:	4a45      	ldr	r2, [pc, #276]	; (80019e4 <HAL_ADC_Init+0x230>)
 80018d0:	402a      	ands	r2, r5
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80018d6:	6822      	ldr	r2, [r4, #0]
 80018d8:	6913      	ldr	r3, [r2, #16]
 80018da:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80018de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018e0:	430b      	orrs	r3, r1
 80018e2:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018e4:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018e6:	6893      	ldr	r3, [r2, #8]
 80018e8:	f013 0308 	ands.w	r3, r3, #8
 80018ec:	d000      	beq.n	80018f0 <HAL_ADC_Init+0x13c>
 80018ee:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018f0:	bb3b      	cbnz	r3, 8001942 <HAL_ADC_Init+0x18e>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018f2:	7f21      	ldrb	r1, [r4, #28]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80018f8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018fa:	ea43 3181 	orr.w	r1, r3, r1, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018fe:	68d3      	ldr	r3, [r2, #12]
 8001900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001904:	f023 0302 	bic.w	r3, r3, #2
 8001908:	430b      	orrs	r3, r1
 800190a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800190c:	6923      	ldr	r3, [r4, #16]
 800190e:	b373      	cbz	r3, 800196e <HAL_ADC_Init+0x1ba>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001910:	6822      	ldr	r2, [r4, #0]
 8001912:	6913      	ldr	r3, [r2, #16]
 8001914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001918:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800191a:	6822      	ldr	r2, [r4, #0]
 800191c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001920:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001924:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001928:	6921      	ldr	r1, [r4, #16]
 800192a:	430b      	orrs	r3, r1
 800192c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001930:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001934:	2b01      	cmp	r3, #1
 8001936:	d029      	beq.n	800198c <HAL_ADC_Init+0x1d8>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001938:	6822      	ldr	r2, [r4, #0]
 800193a:	6913      	ldr	r3, [r2, #16]
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001942:	6963      	ldr	r3, [r4, #20]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d033      	beq.n	80019b0 <HAL_ADC_Init+0x1fc>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001948:	6822      	ldr	r2, [r4, #0]
 800194a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800194c:	f023 030f 	bic.w	r3, r3, #15
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001952:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001954:	f023 0303 	bic.w	r3, r3, #3
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	65e3      	str	r3, [r4, #92]	; 0x5c
 800195e:	e035      	b.n	80019cc <HAL_ADC_Init+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001960:	2000      	movs	r0, #0
 8001962:	e770      	b.n	8001846 <HAL_ADC_Init+0x92>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001964:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001966:	3a01      	subs	r2, #1
 8001968:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800196c:	e7a6      	b.n	80018bc <HAL_ADC_Init+0x108>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800196e:	6822      	ldr	r2, [r4, #0]
 8001970:	6913      	ldr	r3, [r2, #16]
 8001972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001976:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001978:	6822      	ldr	r2, [r4, #0]
 800197a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800197e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001982:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001986:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800198a:	e7d1      	b.n	8001930 <HAL_ADC_Init+0x17c>
        MODIFY_REG(hadc->Instance->CFGR2,
 800198c:	6821      	ldr	r1, [r4, #0]
 800198e:	690b      	ldr	r3, [r1, #16]
 8001990:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001994:	f023 0304 	bic.w	r3, r3, #4
 8001998:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800199a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800199c:	432a      	orrs	r2, r5
 800199e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80019a0:	432a      	orrs	r2, r5
 80019a2:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80019a4:	432a      	orrs	r2, r5
 80019a6:	4313      	orrs	r3, r2
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	610b      	str	r3, [r1, #16]
 80019ae:	e7c8      	b.n	8001942 <HAL_ADC_Init+0x18e>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019b0:	6821      	ldr	r1, [r4, #0]
 80019b2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80019b4:	f023 030f 	bic.w	r3, r3, #15
 80019b8:	6a22      	ldr	r2, [r4, #32]
 80019ba:	3a01      	subs	r2, #1
 80019bc:	4313      	orrs	r3, r2
 80019be:	630b      	str	r3, [r1, #48]	; 0x30
 80019c0:	e7c7      	b.n	8001952 <HAL_ADC_Init+0x19e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80019c4:	f043 0310 	orr.w	r3, r3, #16
 80019c8:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80019ca:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 80019cc:	b003      	add	sp, #12
 80019ce:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80019d0:	2001      	movs	r0, #1
 80019d2:	e7fb      	b.n	80019cc <HAL_ADC_Init+0x218>
 80019d4:	20000004 	.word	0x20000004
 80019d8:	053e2d63 	.word	0x053e2d63
 80019dc:	50000100 	.word	0x50000100
 80019e0:	50000300 	.word	0x50000300
 80019e4:	fff04007 	.word	0xfff04007

080019e8 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019e8:	4770      	bx	lr

080019ea <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80019ea:	4770      	bx	lr

080019ec <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_ADC_IRQHandler>:
{
 80019f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f2:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 80019f4:	6803      	ldr	r3, [r0, #0]
 80019f6:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 80019f8:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019fa:	4b98      	ldr	r3, [pc, #608]	; (8001c5c <HAL_ADC_IRQHandler+0x26c>)
 80019fc:	689e      	ldr	r6, [r3, #8]
 80019fe:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a02:	f017 0f02 	tst.w	r7, #2
 8001a06:	d010      	beq.n	8001a2a <HAL_ADC_IRQHandler+0x3a>
 8001a08:	f015 0f02 	tst.w	r5, #2
 8001a0c:	d00d      	beq.n	8001a2a <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a0e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001a10:	f013 0f10 	tst.w	r3, #16
 8001a14:	d103      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a16:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001a18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a1c:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f000 fcae 	bl	8002380 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	2202      	movs	r2, #2
 8001a28:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a2a:	f017 0f04 	tst.w	r7, #4
 8001a2e:	d002      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x46>
 8001a30:	f015 0f04 	tst.w	r5, #4
 8001a34:	d105      	bne.n	8001a42 <HAL_ADC_IRQHandler+0x52>
 8001a36:	f017 0f08 	tst.w	r7, #8
 8001a3a:	d04a      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0xe2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a3c:	f015 0f08 	tst.w	r5, #8
 8001a40:	d047      	beq.n	8001ad2 <HAL_ADC_IRQHandler+0xe2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a44:	f013 0f10 	tst.w	r3, #16
 8001a48:	d103      	bne.n	8001a52 <HAL_ADC_IRQHandler+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a4a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a50:	65e3      	str	r3, [r4, #92]	; 0x5c
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a52:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001a5a:	d134      	bne.n	8001ac6 <HAL_ADC_IRQHandler+0xd6>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a5c:	4a80      	ldr	r2, [pc, #512]	; (8001c60 <HAL_ADC_IRQHandler+0x270>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d009      	beq.n	8001a76 <HAL_ADC_IRQHandler+0x86>
 8001a62:	461a      	mov	r2, r3
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d009      	beq.n	8001a7c <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a68:	b146      	cbz	r6, 8001a7c <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a6a:	2e05      	cmp	r6, #5
 8001a6c:	d006      	beq.n	8001a7c <HAL_ADC_IRQHandler+0x8c>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a6e:	2e09      	cmp	r6, #9
 8001a70:	d004      	beq.n	8001a7c <HAL_ADC_IRQHandler+0x8c>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a72:	68d2      	ldr	r2, [r2, #12]
 8001a74:	e003      	b.n	8001a7e <HAL_ADC_IRQHandler+0x8e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a7a:	e7f3      	b.n	8001a64 <HAL_ADC_IRQHandler+0x74>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a7c:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a7e:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001a82:	d120      	bne.n	8001ac6 <HAL_ADC_IRQHandler+0xd6>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	f012 0f08 	tst.w	r2, #8
 8001a8a:	d01c      	beq.n	8001ac6 <HAL_ADC_IRQHandler+0xd6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	f012 0f04 	tst.w	r2, #4
 8001a92:	d110      	bne.n	8001ab6 <HAL_ADC_IRQHandler+0xc6>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	f022 020c 	bic.w	r2, r2, #12
 8001a9a:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a9c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aa2:	65e3      	str	r3, [r4, #92]	; 0x5c
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001aa4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001aa6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001aaa:	d10c      	bne.n	8001ac6 <HAL_ADC_IRQHandler+0xd6>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001ab4:	e007      	b.n	8001ac6 <HAL_ADC_IRQHandler+0xd6>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001ab8:	f043 0310 	orr.w	r3, r3, #16
 8001abc:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADC_ConvCpltCallback(hadc);
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff ff8e 	bl	80019e8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	220c      	movs	r2, #12
 8001ad0:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ad2:	f017 0f20 	tst.w	r7, #32
 8001ad6:	d002      	beq.n	8001ade <HAL_ADC_IRQHandler+0xee>
 8001ad8:	f015 0f20 	tst.w	r5, #32
 8001adc:	d105      	bne.n	8001aea <HAL_ADC_IRQHandler+0xfa>
 8001ade:	f017 0f40 	tst.w	r7, #64	; 0x40
 8001ae2:	d05c      	beq.n	8001b9e <HAL_ADC_IRQHandler+0x1ae>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ae4:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001ae8:	d059      	beq.n	8001b9e <HAL_ADC_IRQHandler+0x1ae>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001aec:	f013 0f10 	tst.w	r3, #16
 8001af0:	d103      	bne.n	8001afa <HAL_ADC_IRQHandler+0x10a>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001af2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001af4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001af8:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001afa:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001afc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001afe:	f412 7fc0 	tst.w	r2, #384	; 0x180
 8001b02:	d112      	bne.n	8001b2a <HAL_ADC_IRQHandler+0x13a>
 8001b04:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001b0c:	d10f      	bne.n	8001b2e <HAL_ADC_IRQHandler+0x13e>
 8001b0e:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b10:	4a53      	ldr	r2, [pc, #332]	; (8001c60 <HAL_ADC_IRQHandler+0x270>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00d      	beq.n	8001b32 <HAL_ADC_IRQHandler+0x142>
 8001b16:	461a      	mov	r2, r3
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00d      	beq.n	8001b38 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b1c:	b166      	cbz	r6, 8001b38 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b1e:	2e06      	cmp	r6, #6
 8001b20:	d00a      	beq.n	8001b38 <HAL_ADC_IRQHandler+0x148>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b22:	2e07      	cmp	r6, #7
 8001b24:	d008      	beq.n	8001b38 <HAL_ADC_IRQHandler+0x148>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b26:	68d2      	ldr	r2, [r2, #12]
 8001b28:	e007      	b.n	8001b3a <HAL_ADC_IRQHandler+0x14a>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	e7eb      	b.n	8001b06 <HAL_ADC_IRQHandler+0x116>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	e7ee      	b.n	8001b10 <HAL_ADC_IRQHandler+0x120>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b36:	e7ef      	b.n	8001b18 <HAL_ADC_IRQHandler+0x128>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b38:	68da      	ldr	r2, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001b3a:	b351      	cbz	r1, 8001b92 <HAL_ADC_IRQHandler+0x1a2>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001b3c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001b40:	d003      	beq.n	8001b4a <HAL_ADC_IRQHandler+0x15a>
 8001b42:	b330      	cbz	r0, 8001b92 <HAL_ADC_IRQHandler+0x1a2>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001b44:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001b48:	d123      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x1a2>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001b4a:	6819      	ldr	r1, [r3, #0]
 8001b4c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001b50:	d01f      	beq.n	8001b92 <HAL_ADC_IRQHandler+0x1a2>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001b52:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8001b56:	d11c      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x1a2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	f012 0f08 	tst.w	r2, #8
 8001b5e:	d110      	bne.n	8001b82 <HAL_ADC_IRQHandler+0x192>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b66:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b6e:	65e3      	str	r3, [r4, #92]	; 0x5c
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001b70:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b72:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b76:	d10c      	bne.n	8001b92 <HAL_ADC_IRQHandler+0x1a2>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b78:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001b80:	e007      	b.n	8001b92 <HAL_ADC_IRQHandler+0x1a2>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b84:	f043 0310 	orr.w	r3, r3, #16
 8001b88:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6623      	str	r3, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b92:	4620      	mov	r0, r4
 8001b94:	f000 fbf0 	bl	8002378 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	2260      	movs	r2, #96	; 0x60
 8001b9c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b9e:	f017 0f80 	tst.w	r7, #128	; 0x80
 8001ba2:	d002      	beq.n	8001baa <HAL_ADC_IRQHandler+0x1ba>
 8001ba4:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001ba8:	d12f      	bne.n	8001c0a <HAL_ADC_IRQHandler+0x21a>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001baa:	f417 7f80 	tst.w	r7, #256	; 0x100
 8001bae:	d002      	beq.n	8001bb6 <HAL_ADC_IRQHandler+0x1c6>
 8001bb0:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001bb4:	d134      	bne.n	8001c20 <HAL_ADC_IRQHandler+0x230>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001bb6:	f417 7f00 	tst.w	r7, #512	; 0x200
 8001bba:	d002      	beq.n	8001bc2 <HAL_ADC_IRQHandler+0x1d2>
 8001bbc:	f415 7f00 	tst.w	r5, #512	; 0x200
 8001bc0:	d13a      	bne.n	8001c38 <HAL_ADC_IRQHandler+0x248>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001bc2:	f017 0f10 	tst.w	r7, #16
 8001bc6:	d019      	beq.n	8001bfc <HAL_ADC_IRQHandler+0x20c>
 8001bc8:	f015 0f10 	tst.w	r5, #16
 8001bcc:	d016      	beq.n	8001bfc <HAL_ADC_IRQHandler+0x20c>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001bce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001bd0:	b133      	cbz	r3, 8001be0 <HAL_ADC_IRQHandler+0x1f0>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001bd2:	2e00      	cmp	r6, #0
 8001bd4:	d03c      	beq.n	8001c50 <HAL_ADC_IRQHandler+0x260>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001bd6:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <HAL_ADC_IRQHandler+0x26c>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001bda:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8001bde:	d00a      	beq.n	8001bf6 <HAL_ADC_IRQHandler+0x206>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001be0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be6:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001be8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7ff fefb 	bl	80019ec <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001bfc:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8001c00:	d002      	beq.n	8001c08 <HAL_ADC_IRQHandler+0x218>
 8001c02:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8001c06:	d12d      	bne.n	8001c64 <HAL_ADC_IRQHandler+0x274>
}
 8001c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c10:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c12:	4620      	mov	r0, r4
 8001c14:	f7ff fee9 	bl	80019ea <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	e7c4      	b.n	8001baa <HAL_ADC_IRQHandler+0x1ba>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c20:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c26:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f000 fba7 	bl	800237c <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e7be      	b.n	8001bb6 <HAL_ADC_IRQHandler+0x1c6>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c38:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3e:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c40:	4620      	mov	r0, r4
 8001c42:	f000 fb9c 	bl	800237e <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e7b8      	b.n	8001bc2 <HAL_ADC_IRQHandler+0x1d2>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f013 0f01 	tst.w	r3, #1
 8001c58:	d0cd      	beq.n	8001bf6 <HAL_ADC_IRQHandler+0x206>
 8001c5a:	e7c1      	b.n	8001be0 <HAL_ADC_IRQHandler+0x1f0>
 8001c5c:	50000300 	.word	0x50000300
 8001c60:	50000100 	.word	0x50000100
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001c64:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6a:	65e3      	str	r3, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001c6c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c7a:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	f000 fb7c 	bl	800237a <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8001c82:	e7c1      	b.n	8001c08 <HAL_ADC_IRQHandler+0x218>

08001c84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c86:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c88:	2200      	movs	r2, #0
 8001c8a:	9201      	str	r2, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c8c:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8001c90:	2a01      	cmp	r2, #1
 8001c92:	f000 825e 	beq.w	8002152 <HAL_ADC_ConfigChannel+0x4ce>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c9e:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ca0:	68a8      	ldr	r0, [r5, #8]
 8001ca2:	f010 0f04 	tst.w	r0, #4
 8001ca6:	d009      	beq.n	8001cbc <HAL_ADC_ConfigChannel+0x38>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001caa:	f042 0220 	orr.w	r2, r2, #32
 8001cae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cb0:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8001cb8:	b003      	add	sp, #12
 8001cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001cbc:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cbe:	3530      	adds	r5, #48	; 0x30
 8001cc0:	0a22      	lsrs	r2, r4, #8
 8001cc2:	0092      	lsls	r2, r2, #2
 8001cc4:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8001cc8:	58a8      	ldr	r0, [r5, r2]
 8001cca:	f004 0e1f 	and.w	lr, r4, #31
 8001cce:	241f      	movs	r4, #31
 8001cd0:	fa04 f40e 	lsl.w	r4, r4, lr
 8001cd4:	ea20 0004 	bic.w	r0, r0, r4
 8001cd8:	680c      	ldr	r4, [r1, #0]
 8001cda:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8001cde:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001ce2:	ea40 000c 	orr.w	r0, r0, ip
 8001ce6:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ce8:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cea:	6882      	ldr	r2, [r0, #8]
 8001cec:	f012 0204 	ands.w	r2, r2, #4
 8001cf0:	d000      	beq.n	8001cf4 <HAL_ADC_ConfigChannel+0x70>
 8001cf2:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cf4:	6884      	ldr	r4, [r0, #8]
 8001cf6:	f014 0408 	ands.w	r4, r4, #8
 8001cfa:	d000      	beq.n	8001cfe <HAL_ADC_ConfigChannel+0x7a>
 8001cfc:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	d150      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d02:	2c00      	cmp	r4, #0
 8001d04:	d14e      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x120>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d06:	688d      	ldr	r5, [r1, #8]
 8001d08:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8001d0c:	f000 8082 	beq.w	8001e14 <HAL_ADC_ConfigChannel+0x190>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d10:	680f      	ldr	r7, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d12:	3014      	adds	r0, #20
 8001d14:	0e7a      	lsrs	r2, r7, #25
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8001d1c:	5886      	ldr	r6, [r0, r2]
 8001d1e:	f3c7 5e04 	ubfx	lr, r7, #20, #5
 8001d22:	f04f 0c07 	mov.w	ip, #7
 8001d26:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001d2a:	ea26 0c0c 	bic.w	ip, r6, ip
 8001d2e:	fa05 f50e 	lsl.w	r5, r5, lr
 8001d32:	ea4c 0505 	orr.w	r5, ip, r5
 8001d36:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d38:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d3a:	6942      	ldr	r2, [r0, #20]
 8001d3c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d40:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001d42:	694d      	ldr	r5, [r1, #20]
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	68c2      	ldr	r2, [r0, #12]
 8001d48:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001d4c:	0052      	lsls	r2, r2, #1
 8001d4e:	fa05 f202 	lsl.w	r2, r5, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d52:	690e      	ldr	r6, [r1, #16]
 8001d54:	2e04      	cmp	r6, #4
 8001d56:	d075      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0x1c0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d58:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8001d5a:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8001d5e:	4da8      	ldr	r5, [pc, #672]	; (8002000 <HAL_ADC_ConfigChannel+0x37c>)
 8001d60:	403d      	ands	r5, r7
 8001d62:	680f      	ldr	r7, [r1, #0]
 8001d64:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8001d68:	433a      	orrs	r2, r7
 8001d6a:	4315      	orrs	r5, r2
 8001d6c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001d70:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	690e      	ldr	r6, [r1, #16]
 8001d78:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d7a:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8001d7c:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 8001d80:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8001d84:	4328      	orrs	r0, r5
 8001d86:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	690d      	ldr	r5, [r1, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001d8e:	7f08      	ldrb	r0, [r1, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d90:	2801      	cmp	r0, #1
 8001d92:	d054      	beq.n	8001e3e <HAL_ADC_ConfigChannel+0x1ba>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d94:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 8001d96:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8001d9a:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 8001d9e:	4304      	orrs	r4, r0
 8001da0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001da4:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001da6:	6882      	ldr	r2, [r0, #8]
 8001da8:	f012 0f01 	tst.w	r2, #1
 8001dac:	d117      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x15a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001dae:	680a      	ldr	r2, [r1, #0]
 8001db0:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8001db2:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 8001db6:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8001dba:	ea24 040c 	bic.w	r4, r4, ip
 8001dbe:	f005 0c18 	and.w	ip, r5, #24
 8001dc2:	4d90      	ldr	r5, [pc, #576]	; (8002004 <HAL_ADC_ConfigChannel+0x380>)
 8001dc4:	fa25 f50c 	lsr.w	r5, r5, ip
 8001dc8:	402a      	ands	r2, r5
 8001dca:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8001dce:	4322      	orrs	r2, r4
 8001dd0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dd4:	68c8      	ldr	r0, [r1, #12]
 8001dd6:	4a8c      	ldr	r2, [pc, #560]	; (8002008 <HAL_ADC_ConfigChannel+0x384>)
 8001dd8:	4290      	cmp	r0, r2
 8001dda:	f000 809b 	beq.w	8001f14 <HAL_ADC_ConfigChannel+0x290>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dde:	680a      	ldr	r2, [r1, #0]
 8001de0:	498a      	ldr	r1, [pc, #552]	; (800200c <HAL_ADC_ConfigChannel+0x388>)
 8001de2:	420a      	tst	r2, r1
 8001de4:	f000 81ad 	beq.w	8002142 <HAL_ADC_ConfigChannel+0x4be>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001de8:	4989      	ldr	r1, [pc, #548]	; (8002010 <HAL_ADC_ConfigChannel+0x38c>)
 8001dea:	6889      	ldr	r1, [r1, #8]
 8001dec:	f001 70e0 	and.w	r0, r1, #29360128	; 0x1c00000
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001df0:	4c88      	ldr	r4, [pc, #544]	; (8002014 <HAL_ADC_ConfigChannel+0x390>)
 8001df2:	42a2      	cmp	r2, r4
 8001df4:	f000 815c 	beq.w	80020b0 <HAL_ADC_ConfigChannel+0x42c>
 8001df8:	4c87      	ldr	r4, [pc, #540]	; (8002018 <HAL_ADC_ConfigChannel+0x394>)
 8001dfa:	42a2      	cmp	r2, r4
 8001dfc:	f000 8158 	beq.w	80020b0 <HAL_ADC_ConfigChannel+0x42c>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e00:	4c86      	ldr	r4, [pc, #536]	; (800201c <HAL_ADC_ConfigChannel+0x398>)
 8001e02:	42a2      	cmp	r2, r4
 8001e04:	f000 817a 	beq.w	80020fc <HAL_ADC_ConfigChannel+0x478>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e08:	4c85      	ldr	r4, [pc, #532]	; (8002020 <HAL_ADC_ConfigChannel+0x39c>)
 8001e0a:	42a2      	cmp	r2, r4
 8001e0c:	f000 8188 	beq.w	8002120 <HAL_ADC_ConfigChannel+0x49c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e10:	2000      	movs	r0, #0
 8001e12:	e74e      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e14:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e16:	3014      	adds	r0, #20
 8001e18:	0e6a      	lsrs	r2, r5, #25
 8001e1a:	0092      	lsls	r2, r2, #2
 8001e1c:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8001e20:	5886      	ldr	r6, [r0, r2]
 8001e22:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8001e26:	2707      	movs	r7, #7
 8001e28:	fa07 f505 	lsl.w	r5, r7, r5
 8001e2c:	ea26 0505 	bic.w	r5, r6, r5
 8001e30:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e32:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e34:	6942      	ldr	r2, [r0, #20]
 8001e36:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e3a:	6142      	str	r2, [r0, #20]
}
 8001e3c:	e781      	b.n	8001d42 <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e3e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001e42:	e7a7      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e44:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001e46:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e48:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e4c:	680a      	ldr	r2, [r1, #0]
 8001e4e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8001e52:	bb85      	cbnz	r5, 8001eb6 <HAL_ADC_ConfigChannel+0x232>
 8001e54:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e58:	4294      	cmp	r4, r2
 8001e5a:	d034      	beq.n	8001ec6 <HAL_ADC_ConfigChannel+0x242>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e5c:	681c      	ldr	r4, [r3, #0]
 8001e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e60:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001e62:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e66:	680a      	ldr	r2, [r1, #0]
 8001e68:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8001e6c:	bb85      	cbnz	r5, 8001ed0 <HAL_ADC_ConfigChannel+0x24c>
 8001e6e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e72:	4290      	cmp	r0, r2
 8001e74:	d034      	beq.n	8001ee0 <HAL_ADC_ConfigChannel+0x25c>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e76:	681c      	ldr	r4, [r3, #0]
 8001e78:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001e7a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001e7c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e80:	680a      	ldr	r2, [r1, #0]
 8001e82:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8001e86:	bb85      	cbnz	r5, 8001eea <HAL_ADC_ConfigChannel+0x266>
 8001e88:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e8c:	4290      	cmp	r0, r2
 8001e8e:	d034      	beq.n	8001efa <HAL_ADC_ConfigChannel+0x276>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e90:	681c      	ldr	r4, [r3, #0]
 8001e92:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001e94:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001e96:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e9a:	680a      	ldr	r2, [r1, #0]
 8001e9c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8001ea0:	bb85      	cbnz	r5, 8001f04 <HAL_ADC_ConfigChannel+0x280>
 8001ea2:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ea6:	4290      	cmp	r0, r2
 8001ea8:	f47f af7c 	bne.w	8001da4 <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 8001eac:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001eae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eb2:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8001eb4:	e776      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x120>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001eba:	b112      	cbz	r2, 8001ec2 <HAL_ADC_ConfigChannel+0x23e>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001ebc:	fab2 f282 	clz	r2, r2
 8001ec0:	e7ca      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x1d4>
    return 32U;
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	e7c8      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x1d4>
  MODIFY_REG(*preg,
 8001ec6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001ec8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ecc:	6602      	str	r2, [r0, #96]	; 0x60
}
 8001ece:	e7c5      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x1d8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001ed4:	b112      	cbz	r2, 8001edc <HAL_ADC_ConfigChannel+0x258>
  return __builtin_clz(value);
 8001ed6:	fab2 f282 	clz	r2, r2
 8001eda:	e7ca      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x1ee>
    return 32U;
 8001edc:	2220      	movs	r2, #32
 8001ede:	e7c8      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x1ee>
  MODIFY_REG(*preg,
 8001ee0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ee2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ee6:	6662      	str	r2, [r4, #100]	; 0x64
}
 8001ee8:	e7c5      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x1f2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001eee:	b112      	cbz	r2, 8001ef6 <HAL_ADC_ConfigChannel+0x272>
  return __builtin_clz(value);
 8001ef0:	fab2 f282 	clz	r2, r2
 8001ef4:	e7ca      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x208>
    return 32U;
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	e7c8      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x208>
  MODIFY_REG(*preg,
 8001efa:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8001efc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f00:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8001f02:	e7c5      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x20c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001f08:	b112      	cbz	r2, 8001f10 <HAL_ADC_ConfigChannel+0x28c>
  return __builtin_clz(value);
 8001f0a:	fab2 f282 	clz	r2, r2
 8001f0e:	e7ca      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001f10:	2220      	movs	r2, #32
 8001f12:	e7c8      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x222>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f14:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f16:	680a      	ldr	r2, [r1, #0]
 8001f18:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8001f1c:	2d00      	cmp	r5, #0
 8001f1e:	d138      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x30e>
 8001f20:	0e90      	lsrs	r0, r2, #26
 8001f22:	3001      	adds	r0, #1
 8001f24:	f000 001f 	and.w	r0, r0, #31
 8001f28:	2809      	cmp	r0, #9
 8001f2a:	bf8c      	ite	hi
 8001f2c:	2000      	movhi	r0, #0
 8001f2e:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f30:	2800      	cmp	r0, #0
 8001f32:	d077      	beq.n	8002024 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f34:	2d00      	cmp	r5, #0
 8001f36:	d13b      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x32c>
 8001f38:	0e90      	lsrs	r0, r2, #26
 8001f3a:	3001      	adds	r0, #1
 8001f3c:	0680      	lsls	r0, r0, #26
 8001f3e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001f42:	2d00      	cmp	r5, #0
 8001f44:	d140      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x344>
 8001f46:	0e96      	lsrs	r6, r2, #26
 8001f48:	3601      	adds	r6, #1
 8001f4a:	f006 071f 	and.w	r7, r6, #31
 8001f4e:	2601      	movs	r6, #1
 8001f50:	40be      	lsls	r6, r7
 8001f52:	4330      	orrs	r0, r6
 8001f54:	2d00      	cmp	r5, #0
 8001f56:	d145      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x360>
 8001f58:	0e92      	lsrs	r2, r2, #26
 8001f5a:	3201      	adds	r2, #1
 8001f5c:	f002 021f 	and.w	r2, r2, #31
 8001f60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001f64:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f66:	4302      	orrs	r2, r0
 8001f68:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f6a:	f104 0614 	add.w	r6, r4, #20
 8001f6e:	0e55      	lsrs	r5, r2, #25
 8001f70:	00ad      	lsls	r5, r5, #2
 8001f72:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001f76:	5974      	ldr	r4, [r6, r5]
 8001f78:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8001f7c:	f04f 0c07 	mov.w	ip, #7
 8001f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8001f84:	ea24 0c0c 	bic.w	ip, r4, ip
 8001f88:	4090      	lsls	r0, r2
 8001f8a:	ea4c 0000 	orr.w	r0, ip, r0
 8001f8e:	5170      	str	r0, [r6, r5]
}
 8001f90:	e725      	b.n	8001dde <HAL_ADC_ConfigChannel+0x15a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001f96:	b148      	cbz	r0, 8001fac <HAL_ADC_ConfigChannel+0x328>
  return __builtin_clz(value);
 8001f98:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f9c:	3001      	adds	r0, #1
 8001f9e:	f000 001f 	and.w	r0, r0, #31
 8001fa2:	2809      	cmp	r0, #9
 8001fa4:	bf8c      	ite	hi
 8001fa6:	2000      	movhi	r0, #0
 8001fa8:	2001      	movls	r0, #1
 8001faa:	e7c1      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8001fac:	2020      	movs	r0, #32
 8001fae:	e7f5      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x318>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8001fb4:	b130      	cbz	r0, 8001fc4 <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 8001fb6:	fab0 f080 	clz	r0, r0
 8001fba:	3001      	adds	r0, #1
 8001fbc:	0680      	lsls	r0, r0, #26
 8001fbe:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001fc2:	e7be      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x2be>
    return 32U;
 8001fc4:	2020      	movs	r0, #32
 8001fc6:	e7f8      	b.n	8001fba <HAL_ADC_ConfigChannel+0x336>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8001fcc:	b146      	cbz	r6, 8001fe0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001fce:	fab6 f686 	clz	r6, r6
 8001fd2:	3601      	adds	r6, #1
 8001fd4:	f006 061f 	and.w	r6, r6, #31
 8001fd8:	2701      	movs	r7, #1
 8001fda:	fa07 f606 	lsl.w	r6, r7, r6
 8001fde:	e7b8      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x2ce>
    return 32U;
 8001fe0:	2620      	movs	r6, #32
 8001fe2:	e7f6      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8001fe8:	b142      	cbz	r2, 8001ffc <HAL_ADC_ConfigChannel+0x378>
  return __builtin_clz(value);
 8001fea:	fab2 f282 	clz	r2, r2
 8001fee:	3201      	adds	r2, #1
 8001ff0:	f002 021f 	and.w	r2, r2, #31
 8001ff4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ff8:	0512      	lsls	r2, r2, #20
 8001ffa:	e7b4      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x2e2>
    return 32U;
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	e7f6      	b.n	8001fee <HAL_ADC_ConfigChannel+0x36a>
 8002000:	03fff000 	.word	0x03fff000
 8002004:	0007ffff 	.word	0x0007ffff
 8002008:	407f0000 	.word	0x407f0000
 800200c:	80080000 	.word	0x80080000
 8002010:	50000300 	.word	0x50000300
 8002014:	c3210000 	.word	0xc3210000
 8002018:	90c00010 	.word	0x90c00010
 800201c:	c7520000 	.word	0xc7520000
 8002020:	cb840000 	.word	0xcb840000
 8002024:	b9cd      	cbnz	r5, 800205a <HAL_ADC_ConfigChannel+0x3d6>
 8002026:	0e90      	lsrs	r0, r2, #26
 8002028:	3001      	adds	r0, #1
 800202a:	0680      	lsls	r0, r0, #26
 800202c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002030:	b9fd      	cbnz	r5, 8002072 <HAL_ADC_ConfigChannel+0x3ee>
 8002032:	0e96      	lsrs	r6, r2, #26
 8002034:	3601      	adds	r6, #1
 8002036:	f006 071f 	and.w	r7, r6, #31
 800203a:	2601      	movs	r6, #1
 800203c:	40be      	lsls	r6, r7
 800203e:	4330      	orrs	r0, r6
 8002040:	bb2d      	cbnz	r5, 800208e <HAL_ADC_ConfigChannel+0x40a>
 8002042:	0e92      	lsrs	r2, r2, #26
 8002044:	3201      	adds	r2, #1
 8002046:	f002 021f 	and.w	r2, r2, #31
 800204a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800204e:	3a1e      	subs	r2, #30
 8002050:	0512      	lsls	r2, r2, #20
 8002052:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002056:	4302      	orrs	r2, r0
 8002058:	e786      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x2e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800205e:	b130      	cbz	r0, 800206e <HAL_ADC_ConfigChannel+0x3ea>
  return __builtin_clz(value);
 8002060:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002064:	3001      	adds	r0, #1
 8002066:	0680      	lsls	r0, r0, #26
 8002068:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 800206c:	e7e0      	b.n	8002030 <HAL_ADC_ConfigChannel+0x3ac>
    return 32U;
 800206e:	2020      	movs	r0, #32
 8002070:	e7f8      	b.n	8002064 <HAL_ADC_ConfigChannel+0x3e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8002076:	b146      	cbz	r6, 800208a <HAL_ADC_ConfigChannel+0x406>
  return __builtin_clz(value);
 8002078:	fab6 f686 	clz	r6, r6
 800207c:	3601      	adds	r6, #1
 800207e:	f006 061f 	and.w	r6, r6, #31
 8002082:	2701      	movs	r7, #1
 8002084:	fa07 f606 	lsl.w	r6, r7, r6
 8002088:	e7d9      	b.n	800203e <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 800208a:	2620      	movs	r6, #32
 800208c:	e7f6      	b.n	800207c <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002092:	b15a      	cbz	r2, 80020ac <HAL_ADC_ConfigChannel+0x428>
  return __builtin_clz(value);
 8002094:	fab2 f282 	clz	r2, r2
 8002098:	3201      	adds	r2, #1
 800209a:	f002 021f 	and.w	r2, r2, #31
 800209e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80020a2:	3a1e      	subs	r2, #30
 80020a4:	0512      	lsls	r2, r2, #20
 80020a6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80020aa:	e7d4      	b.n	8002056 <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 80020ac:	2220      	movs	r2, #32
 80020ae:	e7f3      	b.n	8002098 <HAL_ADC_ConfigChannel+0x414>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020b0:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 80020b4:	f47f aea4 	bne.w	8001e00 <HAL_ADC_ConfigChannel+0x17c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80020be:	d001      	beq.n	80020c4 <HAL_ADC_ConfigChannel+0x440>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c0:	2000      	movs	r0, #0
 80020c2:	e5f6      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80020c8:	4923      	ldr	r1, [pc, #140]	; (8002158 <HAL_ADC_ConfigChannel+0x4d4>)
 80020ca:	688a      	ldr	r2, [r1, #8]
 80020cc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80020d0:	4310      	orrs	r0, r2
 80020d2:	6088      	str	r0, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020d4:	4a21      	ldr	r2, [pc, #132]	; (800215c <HAL_ADC_ConfigChannel+0x4d8>)
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	0992      	lsrs	r2, r2, #6
 80020da:	4921      	ldr	r1, [pc, #132]	; (8002160 <HAL_ADC_ConfigChannel+0x4dc>)
 80020dc:	fba1 1202 	umull	r1, r2, r1, r2
 80020e0:	0992      	lsrs	r2, r2, #6
 80020e2:	3201      	adds	r2, #1
 80020e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80020e8:	0092      	lsls	r2, r2, #2
 80020ea:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80020ec:	9a01      	ldr	r2, [sp, #4]
 80020ee:	b11a      	cbz	r2, 80020f8 <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 80020f0:	9a01      	ldr	r2, [sp, #4]
 80020f2:	3a01      	subs	r2, #1
 80020f4:	9201      	str	r2, [sp, #4]
 80020f6:	e7f9      	b.n	80020ec <HAL_ADC_ConfigChannel+0x468>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f8:	2000      	movs	r0, #0
 80020fa:	e5da      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x2e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020fc:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8002100:	f47f ae82 	bne.w	8001e08 <HAL_ADC_ConfigChannel+0x184>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002104:	6819      	ldr	r1, [r3, #0]
 8002106:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_ADC_ConfigChannel+0x4e0>)
 8002108:	4291      	cmp	r1, r2
 800210a:	d01c      	beq.n	8002146 <HAL_ADC_ConfigChannel+0x4c2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800210c:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8002110:	4911      	ldr	r1, [pc, #68]	; (8002158 <HAL_ADC_ConfigChannel+0x4d4>)
 8002112:	688a      	ldr	r2, [r1, #8]
 8002114:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002118:	4310      	orrs	r0, r2
 800211a:	6088      	str	r0, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211c:	2000      	movs	r0, #0
}
 800211e:	e5c8      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x2e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002120:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8002124:	d111      	bne.n	800214a <HAL_ADC_ConfigChannel+0x4c6>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002126:	6819      	ldr	r1, [r3, #0]
 8002128:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <HAL_ADC_ConfigChannel+0x4e0>)
 800212a:	4291      	cmp	r1, r2
 800212c:	d00f      	beq.n	800214e <HAL_ADC_ConfigChannel+0x4ca>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800212e:	f440 0280 	orr.w	r2, r0, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002132:	4809      	ldr	r0, [pc, #36]	; (8002158 <HAL_ADC_ConfigChannel+0x4d4>)
 8002134:	6881      	ldr	r1, [r0, #8]
 8002136:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800213a:	430a      	orrs	r2, r1
 800213c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800213e:	2000      	movs	r0, #0
}
 8002140:	e5b7      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x2e>
 8002142:	2000      	movs	r0, #0
 8002144:	e5b5      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x2e>
 8002146:	2000      	movs	r0, #0
 8002148:	e5b3      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x2e>
 800214a:	2000      	movs	r0, #0
 800214c:	e5b1      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x2e>
 800214e:	2000      	movs	r0, #0
 8002150:	e5af      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8002152:	2002      	movs	r0, #2
 8002154:	e5b0      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x34>
 8002156:	bf00      	nop
 8002158:	50000300 	.word	0x50000300
 800215c:	20000004 	.word	0x20000004
 8002160:	053e2d63 	.word	0x053e2d63
 8002164:	50000100 	.word	0x50000100

08002168 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002168:	b530      	push	{r4, r5, lr}
 800216a:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800216c:	2300      	movs	r3, #0
 800216e:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002170:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	f012 0f01 	tst.w	r2, #1
 8002178:	d158      	bne.n	800222c <ADC_Enable+0xc4>
 800217a:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800217c:	6899      	ldr	r1, [r3, #8]
 800217e:	4a2d      	ldr	r2, [pc, #180]	; (8002234 <ADC_Enable+0xcc>)
 8002180:	4211      	tst	r1, r2
 8002182:	d119      	bne.n	80021b8 <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800218a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002194:	4b28      	ldr	r3, [pc, #160]	; (8002238 <ADC_Enable+0xd0>)
 8002196:	689b      	ldr	r3, [r3, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002198:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800219c:	d01c      	beq.n	80021d8 <ADC_Enable+0x70>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800219e:	4b27      	ldr	r3, [pc, #156]	; (800223c <ADC_Enable+0xd4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	099b      	lsrs	r3, r3, #6
 80021a4:	4a26      	ldr	r2, [pc, #152]	; (8002240 <ADC_Enable+0xd8>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	099b      	lsrs	r3, r3, #6
 80021ac:	3301      	adds	r3, #1
 80021ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80021b6:	e00c      	b.n	80021d2 <ADC_Enable+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80021ba:	f043 0310 	orr.w	r3, r3, #16
 80021be:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 80021c8:	2001      	movs	r0, #1
 80021ca:	e030      	b.n	800222e <ADC_Enable+0xc6>
      {
        wait_loop_index--;
 80021cc:	9b01      	ldr	r3, [sp, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80021d2:	9b01      	ldr	r3, [sp, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f9      	bne.n	80021cc <ADC_Enable+0x64>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021d8:	f7ff fae6 	bl	80017a8 <HAL_GetTick>
 80021dc:	4605      	mov	r5, r0

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	f012 0f01 	tst.w	r2, #1
 80021e6:	d11f      	bne.n	8002228 <ADC_Enable+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	f012 0f01 	tst.w	r2, #1
 80021ee:	d107      	bne.n	8002200 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021f6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002200:	f7ff fad2 	bl	80017a8 <HAL_GetTick>
 8002204:	1b43      	subs	r3, r0, r5
 8002206:	2b02      	cmp	r3, #2
 8002208:	d9e9      	bls.n	80021de <ADC_Enable+0x76>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f013 0f01 	tst.w	r3, #1
 8002212:	d1e4      	bne.n	80021de <ADC_Enable+0x76>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002214:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002216:	f043 0310 	orr.w	r3, r3, #16
 800221a:	65e3      	str	r3, [r4, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6623      	str	r3, [r4, #96]	; 0x60

          return HAL_ERROR;
 8002224:	2001      	movs	r0, #1
 8002226:	e002      	b.n	800222e <ADC_Enable+0xc6>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002228:	2000      	movs	r0, #0
 800222a:	e000      	b.n	800222e <ADC_Enable+0xc6>
 800222c:	2000      	movs	r0, #0
}
 800222e:	b003      	add	sp, #12
 8002230:	bd30      	pop	{r4, r5, pc}
 8002232:	bf00      	nop
 8002234:	8000003f 	.word	0x8000003f
 8002238:	50000300 	.word	0x50000300
 800223c:	20000004 	.word	0x20000004
 8002240:	053e2d63 	.word	0x053e2d63

08002244 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8002244:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002246:	4b4a      	ldr	r3, [pc, #296]	; (8002370 <HAL_ADCEx_InjectedStart_IT+0x12c>)
 8002248:	689d      	ldr	r5, [r3, #8]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800224a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	f012 0f08 	tst.w	r2, #8
 8002252:	f040 8089 	bne.w	8002368 <HAL_ADCEx_InjectedStart_IT+0x124>
 8002256:	4604      	mov	r4, r0
 8002258:	f005 051f 	and.w	r5, r5, #31
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 800225c:	68da      	ldr	r2, [r3, #12]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800225e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002260:	f413 7fc0 	tst.w	r3, #384	; 0x180
 8002264:	d101      	bne.n	800226a <HAL_ADCEx_InjectedStart_IT+0x26>
        && (tmp_config_injected_queue == 0UL)
 8002266:	2a00      	cmp	r2, #0
 8002268:	da53      	bge.n	8002312 <HAL_ADCEx_InjectedStart_IT+0xce>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 800226a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800226e:	2b01      	cmp	r3, #1
 8002270:	d07c      	beq.n	800236c <HAL_ADCEx_InjectedStart_IT+0x128>
 8002272:	2301      	movs	r3, #1
 8002274:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002278:	4620      	mov	r0, r4
 800227a:	f7ff ff75 	bl	8002168 <ADC_Enable>

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800227e:	2800      	cmp	r0, #0
 8002280:	d16e      	bne.n	8002360 <HAL_ADCEx_InjectedStart_IT+0x11c>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8002282:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002284:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002288:	d049      	beq.n	800231e <HAL_ADCEx_InjectedStart_IT+0xda>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800228a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800228c:	f023 0308 	bic.w	r3, r3, #8
 8002290:	6623      	str	r3, [r4, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8002292:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002294:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022a0:	65e3      	str	r3, [r4, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	4a33      	ldr	r2, [pc, #204]	; (8002374 <HAL_ADCEx_InjectedStart_IT+0x130>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d03c      	beq.n	8002324 <HAL_ADCEx_InjectedStart_IT+0xe0>
 80022aa:	461a      	mov	r2, r3
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d000      	beq.n	80022b2 <HAL_ADCEx_InjectedStart_IT+0x6e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022b0:	b91d      	cbnz	r5, 80022ba <HAL_ADCEx_InjectedStart_IT+0x76>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022b2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80022b4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80022b8:	65e2      	str	r2, [r4, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80022ba:	2260      	movs	r2, #96	; 0x60
 80022bc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022be:	2300      	movs	r3, #0
 80022c0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80022cc:	d003      	beq.n	80022d6 <HAL_ADCEx_InjectedStart_IT+0x92>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022d4:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80022d6:	69a3      	ldr	r3, [r4, #24]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d026      	beq.n	800232a <HAL_ADCEx_InjectedStart_IT+0xe6>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
          break;
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80022dc:	6822      	ldr	r2, [r4, #0]
 80022de:	6853      	ldr	r3, [r2, #4]
 80022e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022e4:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80022e6:	6822      	ldr	r2, [r4, #0]
 80022e8:	6853      	ldr	r3, [r2, #4]
 80022ea:	f043 0320 	orr.w	r3, r3, #32
 80022ee:	6053      	str	r3, [r2, #4]
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	4a20      	ldr	r2, [pc, #128]	; (8002374 <HAL_ADCEx_InjectedStart_IT+0x130>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d023      	beq.n	8002340 <HAL_ADCEx_InjectedStart_IT+0xfc>
 80022f8:	461a      	mov	r2, r3
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d023      	beq.n	8002346 <HAL_ADCEx_InjectedStart_IT+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022fe:	b315      	cbz	r5, 8002346 <HAL_ADCEx_InjectedStart_IT+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002300:	2d06      	cmp	r5, #6
 8002302:	d020      	beq.n	8002346 <HAL_ADCEx_InjectedStart_IT+0x102>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002304:	2d07      	cmp	r5, #7
 8002306:	d01e      	beq.n	8002346 <HAL_ADCEx_InjectedStart_IT+0x102>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002308:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800230a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800230e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002310:	e02b      	b.n	800236a <HAL_ADCEx_InjectedStart_IT+0x126>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002312:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002314:	f043 0320 	orr.w	r3, r3, #32
 8002318:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 800231a:	2001      	movs	r0, #1
 800231c:	e025      	b.n	800236a <HAL_ADCEx_InjectedStart_IT+0x126>
        ADC_CLEAR_ERRORCODE(hadc);
 800231e:	2300      	movs	r3, #0
 8002320:	6623      	str	r3, [r4, #96]	; 0x60
 8002322:	e7b6      	b.n	8002292 <HAL_ADCEx_InjectedStart_IT+0x4e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002324:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002328:	e7c0      	b.n	80022ac <HAL_ADCEx_InjectedStart_IT+0x68>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800232a:	6822      	ldr	r2, [r4, #0]
 800232c:	6853      	ldr	r3, [r2, #4]
 800232e:	f023 0320 	bic.w	r3, r3, #32
 8002332:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002334:	6822      	ldr	r2, [r4, #0]
 8002336:	6853      	ldr	r3, [r2, #4]
 8002338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800233c:	6053      	str	r3, [r2, #4]
          break;
 800233e:	e7d7      	b.n	80022f0 <HAL_ADCEx_InjectedStart_IT+0xac>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002340:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002344:	e7d9      	b.n	80022fa <HAL_ADCEx_InjectedStart_IT+0xb6>
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8002346:	68da      	ldr	r2, [r3, #12]
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8002348:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800234c:	d10d      	bne.n	800236a <HAL_ADCEx_InjectedStart_IT+0x126>
  MODIFY_REG(ADCx->CR,
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002354:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002358:	f042 0208 	orr.w	r2, r2, #8
 800235c:	609a      	str	r2, [r3, #8]
}
 800235e:	e004      	b.n	800236a <HAL_ADCEx_InjectedStart_IT+0x126>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002360:	2300      	movs	r3, #0
 8002362:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8002366:	e000      	b.n	800236a <HAL_ADCEx_InjectedStart_IT+0x126>
    return HAL_BUSY;
 8002368:	2002      	movs	r0, #2
  }
}
 800236a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 800236c:	2002      	movs	r0, #2
 800236e:	e7fc      	b.n	800236a <HAL_ADCEx_InjectedStart_IT+0x126>
 8002370:	50000300 	.word	0x50000300
 8002374:	50000100 	.word	0x50000100

08002378 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002378:	4770      	bx	lr

0800237a <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800237a:	4770      	bx	lr

0800237c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800237c:	4770      	bx	lr

0800237e <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800237e:	4770      	bx	lr

08002380 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002380:	4770      	bx	lr
	...

08002384 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8002384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002386:	b083      	sub	sp, #12
 8002388:	4603      	mov	r3, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 800238a:	2200      	movs	r2, #0
 800238c:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pConfigInjected->InjectedOffset));
  assert_param(IS_ADC_OFFSET_SIGN(pConfigInjected->InjectedOffsetSign));
  assert_param(IS_FUNCTIONAL_STATE(pConfigInjected->InjectedOffsetSaturation));
  assert_param(IS_FUNCTIONAL_STATE(pConfigInjected->InjecOversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800238e:	6940      	ldr	r0, [r0, #20]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002390:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002394:	2a01      	cmp	r2, #1
 8002396:	f000 82fa 	beq.w	800298e <HAL_ADCEx_InjectedConfigChannel+0x60a>
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80023a0:	b1a8      	cbz	r0, 80023ce <HAL_ADCEx_InjectedConfigChannel+0x4a>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80023a2:	6a0a      	ldr	r2, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80023a4:	2a01      	cmp	r2, #1
 80023a6:	d012      	beq.n	80023ce <HAL_ADCEx_InjectedConfigChannel+0x4a>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80023a8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80023aa:	2800      	cmp	r0, #0
 80023ac:	f040 80cd 	bne.w	800254a <HAL_ADCEx_InjectedConfigChannel+0x1c6>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 80023b0:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80023b2:	2200      	movs	r2, #0
 80023b4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80023b6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	f000 80c3 	beq.w	8002544 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80023be:	6a0a      	ldr	r2, [r1, #32]
 80023c0:	3a01      	subs	r2, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80023c2:	f004 047c 	and.w	r4, r4, #124	; 0x7c
 80023c6:	4322      	orrs	r2, r4
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 80023c8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80023ca:	4314      	orrs	r4, r2
 80023cc:	e0be      	b.n	800254c <HAL_ADCEx_InjectedConfigChannel+0x1c8>
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80023ce:	684a      	ldr	r2, [r1, #4]
 80023d0:	2a09      	cmp	r2, #9
 80023d2:	f000 8097 	beq.w	8002504 <HAL_ADCEx_InjectedConfigChannel+0x180>
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d6:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023d8:	6890      	ldr	r0, [r2, #8]
 80023da:	f010 0f08 	tst.w	r0, #8
 80023de:	d110      	bne.n	8002402 <HAL_ADCEx_InjectedConfigChannel+0x7e>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80023e0:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 80023e4:	2800      	cmp	r0, #0
 80023e6:	f040 80d0 	bne.w	800258a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80023ea:	68d0      	ldr	r0, [r2, #12]
 80023ec:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 80023f0:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 80023f4:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 80023f8:	0524      	lsls	r4, r4, #20
 80023fa:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 80023fe:	4320      	orrs	r0, r4
 8002400:	60d0      	str	r0, [r2, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002402:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002404:	68a2      	ldr	r2, [r4, #8]
 8002406:	f012 0204 	ands.w	r2, r2, #4
 800240a:	d000      	beq.n	800240e <HAL_ADCEx_InjectedConfigChannel+0x8a>
 800240c:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800240e:	68a5      	ldr	r5, [r4, #8]
 8002410:	f015 0508 	ands.w	r5, r5, #8
 8002414:	d000      	beq.n	8002418 <HAL_ADCEx_InjectedConfigChannel+0x94>
 8002416:	2501      	movs	r5, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002418:	2a00      	cmp	r2, #0
 800241a:	f040 8161 	bne.w	80026e0 <HAL_ADCEx_InjectedConfigChannel+0x35c>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800241e:	2d00      	cmp	r5, #0
 8002420:	f040 8199 	bne.w	8002756 <HAL_ADCEx_InjectedConfigChannel+0x3d2>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002424:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002426:	b11a      	cbz	r2, 8002430 <HAL_ADCEx_InjectedConfigChannel+0xac>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8002428:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800242a:	2a00      	cmp	r2, #0
 800242c:	f040 80bc 	bne.w	80025a8 <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8002430:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
 8002434:	2a01      	cmp	r2, #1
 8002436:	f000 80b1 	beq.w	800259c <HAL_ADCEx_InjectedConfigChannel+0x218>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800243a:	68e2      	ldr	r2, [r4, #12]
 800243c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002440:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002442:	2000      	movs	r0, #0
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8002444:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8002448:	2a01      	cmp	r2, #1
 800244a:	f000 80bc 	beq.w	80025c6 <HAL_ADCEx_InjectedConfigChannel+0x242>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800244e:	681c      	ldr	r4, [r3, #0]
 8002450:	6922      	ldr	r2, [r4, #16]
 8002452:	f022 0202 	bic.w	r2, r2, #2
 8002456:	6122      	str	r2, [r4, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002458:	688c      	ldr	r4, [r1, #8]
 800245a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800245e:	f000 80be 	beq.w	80025de <HAL_ADCEx_InjectedConfigChannel+0x25a>
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	680f      	ldr	r7, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002466:	f102 0c14 	add.w	ip, r2, #20
 800246a:	0e7a      	lsrs	r2, r7, #25
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8002472:	f85c 6002 	ldr.w	r6, [ip, r2]
 8002476:	f3c7 5704 	ubfx	r7, r7, #20, #5
 800247a:	f04f 0e07 	mov.w	lr, #7
 800247e:	fa0e fe07 	lsl.w	lr, lr, r7
 8002482:	ea26 060e 	bic.w	r6, r6, lr
 8002486:	40bc      	lsls	r4, r7
 8002488:	4334      	orrs	r4, r6
 800248a:	f84c 4002 	str.w	r4, [ip, r2]
                                    pConfigInjected->InjectedSamplingTime);

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800248e:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002490:	6962      	ldr	r2, [r4, #20]
 8002492:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002496:	6162      	str	r2, [r4, #20]

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8002498:	694c      	ldr	r4, [r1, #20]
 800249a:	681e      	ldr	r6, [r3, #0]
 800249c:	68f2      	ldr	r2, [r6, #12]
 800249e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80024a2:	0052      	lsls	r2, r2, #1
 80024a4:	fa04 f202 	lsl.w	r2, r4, r2

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80024a8:	f8d1 c010 	ldr.w	ip, [r1, #16]
 80024ac:	f1bc 0f04 	cmp.w	ip, #4
 80024b0:	f000 80af 	beq.w	8002612 <HAL_ADCEx_InjectedConfigChannel+0x28e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024b4:	3660      	adds	r6, #96	; 0x60
  MODIFY_REG(*preg,
 80024b6:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80024ba:	4fa8      	ldr	r7, [pc, #672]	; (800275c <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 80024bc:	4027      	ands	r7, r4
 80024be:	680c      	ldr	r4, [r1, #0]
 80024c0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80024c4:	4322      	orrs	r2, r4
 80024c6:	4317      	orrs	r7, r2
 80024c8:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 80024cc:	f846 702c 	str.w	r7, [r6, ip, lsl #2]
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	690f      	ldr	r7, [r1, #16]
 80024d4:	698c      	ldr	r4, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024d6:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80024d8:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 80024dc:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 80024e0:	4334      	orrs	r4, r6
 80024e2:	f842 4027 	str.w	r4, [r2, r7, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	690e      	ldr	r6, [r1, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 80024ea:	7f0c      	ldrb	r4, [r1, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80024ec:	2c01      	cmp	r4, #1
 80024ee:	f000 808d 	beq.w	800260c <HAL_ADCEx_InjectedConfigChannel+0x288>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024f2:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80024f4:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 80024f8:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 80024fc:	4325      	orrs	r5, r4
 80024fe:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
}
 8002502:	e0ee      	b.n	80026e2 <HAL_ADCEx_InjectedConfigChannel+0x35e>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002504:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8002506:	b1bc      	cbz	r4, 8002538 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8002508:	6808      	ldr	r0, [r1, #0]
 800250a:	0e82      	lsrs	r2, r0, #26
 800250c:	0252      	lsls	r2, r2, #9
 800250e:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8002512:	f004 047c 	and.w	r4, r4, #124	; 0x7c
 8002516:	4322      	orrs	r2, r4
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8002518:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800251a:	4302      	orrs	r2, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 800251c:	681c      	ldr	r4, [r3, #0]
 800251e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002520:	f020 407b 	bic.w	r0, r0, #4211081216	; 0xfb000000
 8002524:	f420 006f 	bic.w	r0, r0, #15663104	; 0xef0000
 8002528:	f420 403f 	bic.w	r0, r0, #48896	; 0xbf00
 800252c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002530:	4310      	orrs	r0, r2
 8002532:	64e0      	str	r0, [r4, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8002534:	665a      	str	r2, [r3, #100]	; 0x64
 8002536:	e74e      	b.n	80023d6 <HAL_ADCEx_InjectedConfigChannel+0x52>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8002538:	680a      	ldr	r2, [r1, #0]
 800253a:	0e92      	lsrs	r2, r2, #26
 800253c:	0252      	lsls	r2, r2, #9
 800253e:	f402 5278 	and.w	r2, r2, #15872	; 0x3e00
 8002542:	e7eb      	b.n	800251c <HAL_ADCEx_InjectedConfigChannel+0x198>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8002544:	6a0a      	ldr	r2, [r1, #32]
 8002546:	1e54      	subs	r4, r2, #1
 8002548:	e000      	b.n	800254c <HAL_ADCEx_InjectedConfigChannel+0x1c8>
  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 800254a:	2400      	movs	r4, #0
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 800254c:	6808      	ldr	r0, [r1, #0]
 800254e:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8002552:	684a      	ldr	r2, [r1, #4]
 8002554:	f002 021f 	and.w	r2, r2, #31
 8002558:	fa00 f202 	lsl.w	r2, r0, r2
 800255c:	4322      	orrs	r2, r4
    hadc->InjectionConfig.ChannelCount--;
 800255e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002560:	3801      	subs	r0, #1
 8002562:	6698      	str	r0, [r3, #104]	; 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8002564:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8002566:	4322      	orrs	r2, r4
 8002568:	665a      	str	r2, [r3, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800256a:	2800      	cmp	r0, #0
 800256c:	f47f af33 	bne.w	80023d6 <HAL_ADCEx_InjectedConfigChannel+0x52>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8002570:	681c      	ldr	r4, [r3, #0]
 8002572:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002574:	f020 407b 	bic.w	r0, r0, #4211081216	; 0xfb000000
 8002578:	f420 006f 	bic.w	r0, r0, #15663104	; 0xef0000
 800257c:	f420 403f 	bic.w	r0, r0, #48896	; 0xbf00
 8002580:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002584:	4302      	orrs	r2, r0
 8002586:	64e2      	str	r2, [r4, #76]	; 0x4c
 8002588:	e725      	b.n	80023d6 <HAL_ADCEx_InjectedConfigChannel+0x52>
      MODIFY_REG(hadc->Instance->CFGR,
 800258a:	68d0      	ldr	r0, [r2, #12]
 800258c:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8002590:	f891 4026 	ldrb.w	r4, [r1, #38]	; 0x26
 8002594:	ea40 5044 	orr.w	r0, r0, r4, lsl #21
 8002598:	60d0      	str	r0, [r2, #12]
 800259a:	e732      	b.n	8002402 <HAL_ADCEx_InjectedConfigChannel+0x7e>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800259c:	68e2      	ldr	r2, [r4, #12]
 800259e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80025a2:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a4:	2000      	movs	r0, #0
 80025a6:	e74d      	b.n	8002444 <HAL_ADCEx_InjectedConfigChannel+0xc0>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80025a8:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 80025ac:	2801      	cmp	r0, #1
 80025ae:	d005      	beq.n	80025bc <HAL_ADCEx_InjectedConfigChannel+0x238>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80025b0:	68e2      	ldr	r2, [r4, #12]
 80025b2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80025b6:	60e2      	str	r2, [r4, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b8:	2000      	movs	r0, #0
 80025ba:	e743      	b.n	8002444 <HAL_ADCEx_InjectedConfigChannel+0xc0>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025be:	f042 0220 	orr.w	r2, r2, #32
 80025c2:	65da      	str	r2, [r3, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 80025c4:	e73e      	b.n	8002444 <HAL_ADCEx_InjectedConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->CFGR2,
 80025c6:	681e      	ldr	r6, [r3, #0]
 80025c8:	6932      	ldr	r2, [r6, #16]
 80025ca:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80025ce:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80025d0:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 80025d2:	433c      	orrs	r4, r7
 80025d4:	4322      	orrs	r2, r4
 80025d6:	f042 0202 	orr.w	r2, r2, #2
 80025da:	6132      	str	r2, [r6, #16]
 80025dc:	e73c      	b.n	8002458 <HAL_ADCEx_InjectedConfigChannel+0xd4>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80025de:	681c      	ldr	r4, [r3, #0]
 80025e0:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80025e2:	3414      	adds	r4, #20
 80025e4:	0e72      	lsrs	r2, r6, #25
 80025e6:	0092      	lsls	r2, r2, #2
 80025e8:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80025ec:	58a7      	ldr	r7, [r4, r2]
 80025ee:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80025f2:	f04f 0c07 	mov.w	ip, #7
 80025f6:	fa0c f606 	lsl.w	r6, ip, r6
 80025fa:	ea27 0606 	bic.w	r6, r7, r6
 80025fe:	50a6      	str	r6, [r4, r2]
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002600:	681c      	ldr	r4, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002602:	6962      	ldr	r2, [r4, #20]
 8002604:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002608:	6162      	str	r2, [r4, #20]
}
 800260a:	e745      	b.n	8002498 <HAL_ADCEx_InjectedConfigChannel+0x114>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800260c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8002610:	e76f      	b.n	80024f2 <HAL_ADCEx_InjectedConfigChannel+0x16e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002612:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8002614:	6e34      	ldr	r4, [r6, #96]	; 0x60
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002616:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800261a:	680a      	ldr	r2, [r1, #0]
 800261c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8002620:	bb7d      	cbnz	r5, 8002682 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8002622:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002626:	4294      	cmp	r4, r2
 8002628:	d033      	beq.n	8002692 <HAL_ADCEx_InjectedConfigChannel+0x30e>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800262a:	681d      	ldr	r5, [r3, #0]
 800262c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 800262e:	6e6c      	ldr	r4, [r5, #100]	; 0x64
 8002630:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002634:	680a      	ldr	r2, [r1, #0]
 8002636:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800263a:	bb7e      	cbnz	r6, 800269c <HAL_ADCEx_InjectedConfigChannel+0x318>
 800263c:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002640:	4294      	cmp	r4, r2
 8002642:	d033      	beq.n	80026ac <HAL_ADCEx_InjectedConfigChannel+0x328>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002644:	681d      	ldr	r5, [r3, #0]
 8002646:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8002648:	6eac      	ldr	r4, [r5, #104]	; 0x68
 800264a:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800264e:	680a      	ldr	r2, [r1, #0]
 8002650:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8002654:	bb7e      	cbnz	r6, 80026b6 <HAL_ADCEx_InjectedConfigChannel+0x332>
 8002656:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800265a:	4294      	cmp	r4, r2
 800265c:	d033      	beq.n	80026c6 <HAL_ADCEx_InjectedConfigChannel+0x342>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800265e:	681d      	ldr	r5, [r3, #0]
 8002660:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8002662:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8002664:	f3c4 6484 	ubfx	r4, r4, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8002668:	680a      	ldr	r2, [r1, #0]
 800266a:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800266e:	bb7e      	cbnz	r6, 80026d0 <HAL_ADCEx_InjectedConfigChannel+0x34c>
 8002670:	f3c2 6284 	ubfx	r2, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002674:	4294      	cmp	r4, r2
 8002676:	d134      	bne.n	80026e2 <HAL_ADCEx_InjectedConfigChannel+0x35e>
  MODIFY_REG(*preg,
 8002678:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 800267a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800267e:	66ea      	str	r2, [r5, #108]	; 0x6c
}
 8002680:	e02f      	b.n	80026e2 <HAL_ADCEx_InjectedConfigChannel+0x35e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002686:	b112      	cbz	r2, 800268e <HAL_ADCEx_InjectedConfigChannel+0x30a>
  return __builtin_clz(value);
 8002688:	fab2 f282 	clz	r2, r2
 800268c:	e7cb      	b.n	8002626 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
    return 32U;
 800268e:	2220      	movs	r2, #32
 8002690:	e7c9      	b.n	8002626 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
  MODIFY_REG(*preg,
 8002692:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8002694:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002698:	6632      	str	r2, [r6, #96]	; 0x60
}
 800269a:	e7c6      	b.n	800262a <HAL_ADCEx_InjectedConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80026a0:	b112      	cbz	r2, 80026a8 <HAL_ADCEx_InjectedConfigChannel+0x324>
  return __builtin_clz(value);
 80026a2:	fab2 f282 	clz	r2, r2
 80026a6:	e7cb      	b.n	8002640 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    return 32U;
 80026a8:	2220      	movs	r2, #32
 80026aa:	e7c9      	b.n	8002640 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
  MODIFY_REG(*preg,
 80026ac:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80026ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026b2:	666a      	str	r2, [r5, #100]	; 0x64
}
 80026b4:	e7c6      	b.n	8002644 <HAL_ADCEx_InjectedConfigChannel+0x2c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80026ba:	b112      	cbz	r2, 80026c2 <HAL_ADCEx_InjectedConfigChannel+0x33e>
  return __builtin_clz(value);
 80026bc:	fab2 f282 	clz	r2, r2
 80026c0:	e7cb      	b.n	800265a <HAL_ADCEx_InjectedConfigChannel+0x2d6>
    return 32U;
 80026c2:	2220      	movs	r2, #32
 80026c4:	e7c9      	b.n	800265a <HAL_ADCEx_InjectedConfigChannel+0x2d6>
  MODIFY_REG(*preg,
 80026c6:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 80026c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026cc:	66aa      	str	r2, [r5, #104]	; 0x68
}
 80026ce:	e7c6      	b.n	800265e <HAL_ADCEx_InjectedConfigChannel+0x2da>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80026d4:	b112      	cbz	r2, 80026dc <HAL_ADCEx_InjectedConfigChannel+0x358>
  return __builtin_clz(value);
 80026d6:	fab2 f282 	clz	r2, r2
 80026da:	e7cb      	b.n	8002674 <HAL_ADCEx_InjectedConfigChannel+0x2f0>
    return 32U;
 80026dc:	2220      	movs	r2, #32
 80026de:	e7c9      	b.n	8002674 <HAL_ADCEx_InjectedConfigChannel+0x2f0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e0:	2000      	movs	r0, #0
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e2:	681d      	ldr	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026e4:	68aa      	ldr	r2, [r5, #8]
 80026e6:	f012 0f01 	tst.w	r2, #1
 80026ea:	d117      	bne.n	800271c <HAL_ADCEx_InjectedConfigChannel+0x398>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80026ec:	680a      	ldr	r2, [r1, #0]
 80026ee:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80026f0:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 80026f4:	f3c2 0712 	ubfx	r7, r2, #0, #19
 80026f8:	ea24 0407 	bic.w	r4, r4, r7
 80026fc:	f006 0c18 	and.w	ip, r6, #24
 8002700:	4e17      	ldr	r6, [pc, #92]	; (8002760 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8002702:	fa26 fc0c 	lsr.w	ip, r6, ip
 8002706:	ea02 020c 	and.w	r2, r2, ip
 800270a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800270e:	4322      	orrs	r2, r4
 8002710:	f8c5 20b0 	str.w	r2, [r5, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002714:	68cc      	ldr	r4, [r1, #12]
 8002716:	4a13      	ldr	r2, [pc, #76]	; (8002764 <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8002718:	4294      	cmp	r4, r2
 800271a:	d031      	beq.n	8002780 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 800271c:	680a      	ldr	r2, [r1, #0]
 800271e:	4912      	ldr	r1, [pc, #72]	; (8002768 <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 8002720:	420a      	tst	r2, r1
 8002722:	d013      	beq.n	800274c <HAL_ADCEx_InjectedConfigChannel+0x3c8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002724:	4911      	ldr	r1, [pc, #68]	; (800276c <HAL_ADCEx_InjectedConfigChannel+0x3e8>)
 8002726:	6889      	ldr	r1, [r1, #8]
 8002728:	f001 74e0 	and.w	r4, r1, #29360128	; 0x1c00000
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 800272c:	4d10      	ldr	r5, [pc, #64]	; (8002770 <HAL_ADCEx_InjectedConfigChannel+0x3ec>)
 800272e:	42aa      	cmp	r2, r5
 8002730:	f000 80e4 	beq.w	80028fc <HAL_ADCEx_InjectedConfigChannel+0x578>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002734:	4d0f      	ldr	r5, [pc, #60]	; (8002774 <HAL_ADCEx_InjectedConfigChannel+0x3f0>)
 8002736:	42aa      	cmp	r2, r5
 8002738:	f000 80e0 	beq.w	80028fc <HAL_ADCEx_InjectedConfigChannel+0x578>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800273c:	4d0e      	ldr	r5, [pc, #56]	; (8002778 <HAL_ADCEx_InjectedConfigChannel+0x3f4>)
 800273e:	42aa      	cmp	r2, r5
 8002740:	f000 8101 	beq.w	8002946 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8002744:	4d0d      	ldr	r5, [pc, #52]	; (800277c <HAL_ADCEx_InjectedConfigChannel+0x3f8>)
 8002746:	42aa      	cmp	r2, r5
 8002748:	f000 810f 	beq.w	800296a <HAL_ADCEx_InjectedConfigChannel+0x5e6>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8002752:	b003      	add	sp, #12
 8002754:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002756:	2000      	movs	r0, #0
 8002758:	e7c3      	b.n	80026e2 <HAL_ADCEx_InjectedConfigChannel+0x35e>
 800275a:	bf00      	nop
 800275c:	03fff000 	.word	0x03fff000
 8002760:	0007ffff 	.word	0x0007ffff
 8002764:	407f0000 	.word	0x407f0000
 8002768:	80080000 	.word	0x80080000
 800276c:	50000300 	.word	0x50000300
 8002770:	c3210000 	.word	0xc3210000
 8002774:	90c00010 	.word	0x90c00010
 8002778:	c7520000 	.word	0xc7520000
 800277c:	cb840000 	.word	0xcb840000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002780:	681d      	ldr	r5, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002782:	680a      	ldr	r2, [r1, #0]
 8002784:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8002788:	2e00      	cmp	r6, #0
 800278a:	d137      	bne.n	80027fc <HAL_ADCEx_InjectedConfigChannel+0x478>
 800278c:	0e94      	lsrs	r4, r2, #26
 800278e:	3401      	adds	r4, #1
 8002790:	f004 041f 	and.w	r4, r4, #31
 8002794:	2c09      	cmp	r4, #9
 8002796:	bf8c      	ite	hi
 8002798:	2400      	movhi	r4, #0
 800279a:	2401      	movls	r4, #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800279c:	2c00      	cmp	r4, #0
 800279e:	d065      	beq.n	800286c <HAL_ADCEx_InjectedConfigChannel+0x4e8>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027a0:	2e00      	cmp	r6, #0
 80027a2:	d13a      	bne.n	800281a <HAL_ADCEx_InjectedConfigChannel+0x496>
 80027a4:	0e94      	lsrs	r4, r2, #26
 80027a6:	3401      	adds	r4, #1
 80027a8:	06a4      	lsls	r4, r4, #26
 80027aa:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80027ae:	2e00      	cmp	r6, #0
 80027b0:	d13f      	bne.n	8002832 <HAL_ADCEx_InjectedConfigChannel+0x4ae>
 80027b2:	0e97      	lsrs	r7, r2, #26
 80027b4:	3701      	adds	r7, #1
 80027b6:	f007 0c1f 	and.w	ip, r7, #31
 80027ba:	2701      	movs	r7, #1
 80027bc:	fa07 f70c 	lsl.w	r7, r7, ip
 80027c0:	433c      	orrs	r4, r7
 80027c2:	2e00      	cmp	r6, #0
 80027c4:	d144      	bne.n	8002850 <HAL_ADCEx_InjectedConfigChannel+0x4cc>
 80027c6:	0e92      	lsrs	r2, r2, #26
 80027c8:	3201      	adds	r2, #1
 80027ca:	f002 021f 	and.w	r2, r2, #31
 80027ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80027d2:	0512      	lsls	r2, r2, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027d4:	4322      	orrs	r2, r4
 80027d6:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80027d8:	3514      	adds	r5, #20
 80027da:	0e56      	lsrs	r6, r2, #25
 80027dc:	00b6      	lsls	r6, r6, #2
 80027de:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 80027e2:	59af      	ldr	r7, [r5, r6]
 80027e4:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80027e8:	f04f 0c07 	mov.w	ip, #7
 80027ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80027f0:	ea27 070c 	bic.w	r7, r7, ip
 80027f4:	4094      	lsls	r4, r2
 80027f6:	433c      	orrs	r4, r7
 80027f8:	51ac      	str	r4, [r5, r6]
}
 80027fa:	e78f      	b.n	800271c <HAL_ADCEx_InjectedConfigChannel+0x398>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8002800:	b14c      	cbz	r4, 8002816 <HAL_ADCEx_InjectedConfigChannel+0x492>
  return __builtin_clz(value);
 8002802:	fab4 f484 	clz	r4, r4
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002806:	3401      	adds	r4, #1
 8002808:	f004 041f 	and.w	r4, r4, #31
 800280c:	2c09      	cmp	r4, #9
 800280e:	bf8c      	ite	hi
 8002810:	2400      	movhi	r4, #0
 8002812:	2401      	movls	r4, #1
 8002814:	e7c2      	b.n	800279c <HAL_ADCEx_InjectedConfigChannel+0x418>
    return 32U;
 8002816:	2420      	movs	r4, #32
 8002818:	e7f5      	b.n	8002806 <HAL_ADCEx_InjectedConfigChannel+0x482>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 800281e:	b134      	cbz	r4, 800282e <HAL_ADCEx_InjectedConfigChannel+0x4aa>
  return __builtin_clz(value);
 8002820:	fab4 f484 	clz	r4, r4
 8002824:	3401      	adds	r4, #1
 8002826:	06a4      	lsls	r4, r4, #26
 8002828:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 800282c:	e7bf      	b.n	80027ae <HAL_ADCEx_InjectedConfigChannel+0x42a>
    return 32U;
 800282e:	2420      	movs	r4, #32
 8002830:	e7f8      	b.n	8002824 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8002836:	b14f      	cbz	r7, 800284c <HAL_ADCEx_InjectedConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002838:	fab7 f787 	clz	r7, r7
 800283c:	3701      	adds	r7, #1
 800283e:	f007 071f 	and.w	r7, r7, #31
 8002842:	f04f 0c01 	mov.w	ip, #1
 8002846:	fa0c f707 	lsl.w	r7, ip, r7
 800284a:	e7b9      	b.n	80027c0 <HAL_ADCEx_InjectedConfigChannel+0x43c>
    return 32U;
 800284c:	2720      	movs	r7, #32
 800284e:	e7f5      	b.n	800283c <HAL_ADCEx_InjectedConfigChannel+0x4b8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002854:	b142      	cbz	r2, 8002868 <HAL_ADCEx_InjectedConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002856:	fab2 f282 	clz	r2, r2
 800285a:	3201      	adds	r2, #1
 800285c:	f002 021f 	and.w	r2, r2, #31
 8002860:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002864:	0512      	lsls	r2, r2, #20
 8002866:	e7b5      	b.n	80027d4 <HAL_ADCEx_InjectedConfigChannel+0x450>
    return 32U;
 8002868:	2220      	movs	r2, #32
 800286a:	e7f6      	b.n	800285a <HAL_ADCEx_InjectedConfigChannel+0x4d6>
 800286c:	b9d6      	cbnz	r6, 80028a4 <HAL_ADCEx_InjectedConfigChannel+0x520>
 800286e:	0e94      	lsrs	r4, r2, #26
 8002870:	3401      	adds	r4, #1
 8002872:	06a4      	lsls	r4, r4, #26
 8002874:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8002878:	bb06      	cbnz	r6, 80028bc <HAL_ADCEx_InjectedConfigChannel+0x538>
 800287a:	0e97      	lsrs	r7, r2, #26
 800287c:	3701      	adds	r7, #1
 800287e:	f007 0c1f 	and.w	ip, r7, #31
 8002882:	2701      	movs	r7, #1
 8002884:	fa07 f70c 	lsl.w	r7, r7, ip
 8002888:	433c      	orrs	r4, r7
 800288a:	bb36      	cbnz	r6, 80028da <HAL_ADCEx_InjectedConfigChannel+0x556>
 800288c:	0e92      	lsrs	r2, r2, #26
 800288e:	3201      	adds	r2, #1
 8002890:	f002 021f 	and.w	r2, r2, #31
 8002894:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002898:	3a1e      	subs	r2, #30
 800289a:	0512      	lsls	r2, r2, #20
 800289c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028a0:	4322      	orrs	r2, r4
 80028a2:	e798      	b.n	80027d6 <HAL_ADCEx_InjectedConfigChannel+0x452>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 80028a8:	b134      	cbz	r4, 80028b8 <HAL_ADCEx_InjectedConfigChannel+0x534>
  return __builtin_clz(value);
 80028aa:	fab4 f484 	clz	r4, r4
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028ae:	3401      	adds	r4, #1
 80028b0:	06a4      	lsls	r4, r4, #26
 80028b2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80028b6:	e7df      	b.n	8002878 <HAL_ADCEx_InjectedConfigChannel+0x4f4>
    return 32U;
 80028b8:	2420      	movs	r4, #32
 80028ba:	e7f8      	b.n	80028ae <HAL_ADCEx_InjectedConfigChannel+0x52a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 80028c0:	b14f      	cbz	r7, 80028d6 <HAL_ADCEx_InjectedConfigChannel+0x552>
  return __builtin_clz(value);
 80028c2:	fab7 f787 	clz	r7, r7
 80028c6:	3701      	adds	r7, #1
 80028c8:	f007 071f 	and.w	r7, r7, #31
 80028cc:	f04f 0c01 	mov.w	ip, #1
 80028d0:	fa0c f707 	lsl.w	r7, ip, r7
 80028d4:	e7d8      	b.n	8002888 <HAL_ADCEx_InjectedConfigChannel+0x504>
    return 32U;
 80028d6:	2720      	movs	r7, #32
 80028d8:	e7f5      	b.n	80028c6 <HAL_ADCEx_InjectedConfigChannel+0x542>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80028de:	b15a      	cbz	r2, 80028f8 <HAL_ADCEx_InjectedConfigChannel+0x574>
  return __builtin_clz(value);
 80028e0:	fab2 f282 	clz	r2, r2
 80028e4:	3201      	adds	r2, #1
 80028e6:	f002 021f 	and.w	r2, r2, #31
 80028ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80028ee:	3a1e      	subs	r2, #30
 80028f0:	0512      	lsls	r2, r2, #20
 80028f2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80028f6:	e7d3      	b.n	80028a0 <HAL_ADCEx_InjectedConfigChannel+0x51c>
    return 32U;
 80028f8:	2220      	movs	r2, #32
 80028fa:	e7f3      	b.n	80028e4 <HAL_ADCEx_InjectedConfigChannel+0x560>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028fc:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8002900:	f47f af1c 	bne.w	800273c <HAL_ADCEx_InjectedConfigChannel+0x3b8>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800290a:	f47f af1f 	bne.w	800274c <HAL_ADCEx_InjectedConfigChannel+0x3c8>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800290e:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002912:	4920      	ldr	r1, [pc, #128]	; (8002994 <HAL_ADCEx_InjectedConfigChannel+0x610>)
 8002914:	688a      	ldr	r2, [r1, #8]
 8002916:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800291a:	4314      	orrs	r4, r2
 800291c:	608c      	str	r4, [r1, #8]
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 800291e:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <HAL_ADCEx_InjectedConfigChannel+0x614>)
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	0992      	lsrs	r2, r2, #6
 8002924:	491d      	ldr	r1, [pc, #116]	; (800299c <HAL_ADCEx_InjectedConfigChannel+0x618>)
 8002926:	fba1 1202 	umull	r1, r2, r1, r2
 800292a:	0992      	lsrs	r2, r2, #6
 800292c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002930:	0092      	lsls	r2, r2, #2
 8002932:	3218      	adds	r2, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002934:	9201      	str	r2, [sp, #4]
        while (wait_loop_index != 0UL)
 8002936:	e002      	b.n	800293e <HAL_ADCEx_InjectedConfigChannel+0x5ba>
          wait_loop_index--;
 8002938:	9a01      	ldr	r2, [sp, #4]
 800293a:	3a01      	subs	r2, #1
 800293c:	9201      	str	r2, [sp, #4]
        while (wait_loop_index != 0UL)
 800293e:	9a01      	ldr	r2, [sp, #4]
 8002940:	2a00      	cmp	r2, #0
 8002942:	d1f9      	bne.n	8002938 <HAL_ADCEx_InjectedConfigChannel+0x5b4>
 8002944:	e702      	b.n	800274c <HAL_ADCEx_InjectedConfigChannel+0x3c8>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002946:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 800294a:	f47f aefb 	bne.w	8002744 <HAL_ADCEx_InjectedConfigChannel+0x3c0>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <HAL_ADCEx_InjectedConfigChannel+0x61c>)
 8002952:	4291      	cmp	r1, r2
 8002954:	f43f aefa 	beq.w	800274c <HAL_ADCEx_InjectedConfigChannel+0x3c8>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002958:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800295c:	490d      	ldr	r1, [pc, #52]	; (8002994 <HAL_ADCEx_InjectedConfigChannel+0x610>)
 800295e:	688a      	ldr	r2, [r1, #8]
 8002960:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002964:	4314      	orrs	r4, r2
 8002966:	608c      	str	r4, [r1, #8]
}
 8002968:	e6f0      	b.n	800274c <HAL_ADCEx_InjectedConfigChannel+0x3c8>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800296a:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 800296e:	f47f aeed 	bne.w	800274c <HAL_ADCEx_InjectedConfigChannel+0x3c8>
      if (ADC_VREFINT_INSTANCE(hadc))
 8002972:	6819      	ldr	r1, [r3, #0]
 8002974:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <HAL_ADCEx_InjectedConfigChannel+0x61c>)
 8002976:	4291      	cmp	r1, r2
 8002978:	f43f aee8 	beq.w	800274c <HAL_ADCEx_InjectedConfigChannel+0x3c8>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800297c:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002980:	4904      	ldr	r1, [pc, #16]	; (8002994 <HAL_ADCEx_InjectedConfigChannel+0x610>)
 8002982:	688a      	ldr	r2, [r1, #8]
 8002984:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002988:	4314      	orrs	r4, r2
 800298a:	608c      	str	r4, [r1, #8]
}
 800298c:	e6de      	b.n	800274c <HAL_ADCEx_InjectedConfigChannel+0x3c8>
  __HAL_LOCK(hadc);
 800298e:	2002      	movs	r0, #2
 8002990:	e6df      	b.n	8002752 <HAL_ADCEx_InjectedConfigChannel+0x3ce>
 8002992:	bf00      	nop
 8002994:	50000300 	.word	0x50000300
 8002998:	20000004 	.word	0x20000004
 800299c:	053e2d63 	.word	0x053e2d63
 80029a0:	50000100 	.word	0x50000100

080029a4 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029a4:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80029a8:	2a01      	cmp	r2, #1
 80029aa:	d07f      	beq.n	8002aac <HAL_ADCEx_MultiModeConfigChannel+0x108>
{
 80029ac:	b410      	push	{r4}
 80029ae:	b09d      	sub	sp, #116	; 0x74
 80029b0:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80029b2:	2201      	movs	r2, #1
 80029b4:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80029b8:	2200      	movs	r2, #0
 80029ba:	9218      	str	r2, [sp, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80029bc:	9219      	str	r2, [sp, #100]	; 0x64

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80029be:	6800      	ldr	r0, [r0, #0]
 80029c0:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80029c4:	d039      	beq.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x96>
 80029c6:	2200      	movs	r2, #0
 80029c8:	9201      	str	r2, [sp, #4]

  if (tmp_hadc_slave.Instance == NULL)
 80029ca:	9a01      	ldr	r2, [sp, #4]
 80029cc:	2a00      	cmp	r2, #0
 80029ce:	d037      	beq.n	8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029d0:	6892      	ldr	r2, [r2, #8]
 80029d2:	f012 0204 	ands.w	r2, r2, #4
 80029d6:	d000      	beq.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80029d8:	2201      	movs	r2, #1
 80029da:	6880      	ldr	r0, [r0, #8]
 80029dc:	f010 0f04 	tst.w	r0, #4
 80029e0:	d154      	bne.n	8002a8c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80029e2:	2a00      	cmp	r2, #0
 80029e4:	d152      	bne.n	8002a8c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029e6:	680a      	ldr	r2, [r1, #0]
 80029e8:	2a00      	cmp	r2, #0
 80029ea:	d032      	beq.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0xae>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029ec:	4c30      	ldr	r4, [pc, #192]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 80029ee:	68a2      	ldr	r2, [r4, #8]
 80029f0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029f4:	6848      	ldr	r0, [r1, #4]
 80029f6:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80029fa:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80029fe:	4302      	orrs	r2, r0
 8002a00:	60a2      	str	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002a06:	6892      	ldr	r2, [r2, #8]
 8002a08:	f012 0201 	ands.w	r2, r2, #1
 8002a0c:	d000      	beq.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x6c>
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4828      	ldr	r0, [pc, #160]	; (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002a12:	6880      	ldr	r0, [r0, #8]
 8002a14:	f010 0001 	ands.w	r0, r0, #1
 8002a18:	d000      	beq.n	8002a1c <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8002a1a:	2001      	movs	r0, #1
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a1c:	4302      	orrs	r2, r0
 8002a1e:	d141      	bne.n	8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a20:	4c23      	ldr	r4, [pc, #140]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8002a22:	68a2      	ldr	r2, [r4, #8]
 8002a24:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002a28:	f022 020f 	bic.w	r2, r2, #15
 8002a2c:	6808      	ldr	r0, [r1, #0]
 8002a2e:	6889      	ldr	r1, [r1, #8]
 8002a30:	4301      	orrs	r1, r0
 8002a32:	430a      	orrs	r2, r1
 8002a34:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a36:	2000      	movs	r0, #0
 8002a38:	e02d      	b.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002a3c:	9201      	str	r2, [sp, #4]
 8002a3e:	e7c4      	b.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a42:	f042 0220 	orr.w	r2, r2, #32
 8002a46:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_UNLOCK(hadc);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8002a4e:	2001      	movs	r0, #1
 8002a50:	e024      	b.n	8002a9c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a52:	4917      	ldr	r1, [pc, #92]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8002a54:	688a      	ldr	r2, [r1, #8]
 8002a56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a5a:	608a      	str	r2, [r1, #8]
 8002a5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002a60:	6892      	ldr	r2, [r2, #8]
 8002a62:	f012 0201 	ands.w	r2, r2, #1
 8002a66:	d000      	beq.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0xc6>
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4912      	ldr	r1, [pc, #72]	; (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8002a6c:	6889      	ldr	r1, [r1, #8]
 8002a6e:	f011 0101 	ands.w	r1, r1, #1
 8002a72:	d000      	beq.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
 8002a74:	2101      	movs	r1, #1

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a76:	430a      	orrs	r2, r1
 8002a78:	d116      	bne.n	8002aa8 <HAL_ADCEx_MultiModeConfigChannel+0x104>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a7a:	490d      	ldr	r1, [pc, #52]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8002a7c:	688a      	ldr	r2, [r1, #8]
 8002a7e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002a82:	f022 020f 	bic.w	r2, r2, #15
 8002a86:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a88:	2000      	movs	r0, #0
 8002a8a:	e004      	b.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a8e:	f042 0220 	orr.w	r2, r2, #32
 8002a92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a94:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8002a9c:	b01d      	add	sp, #116	; 0x74
 8002a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002aa2:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	e7f6      	b.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	e7f4      	b.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
  __HAL_LOCK(hadc);
 8002aac:	2002      	movs	r0, #2
}
 8002aae:	4770      	bx	lr
 8002ab0:	50000300 	.word	0x50000300
 8002ab4:	50000100 	.word	0x50000100

08002ab8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab8:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002aba:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002abc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ac0:	041b      	lsls	r3, r3, #16
 8002ac2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac4:	0200      	lsls	r0, r0, #8
 8002ac6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aca:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002ad4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002ad6:	4770      	bx	lr
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_NVIC_SetPriority+0x68>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae6:	f1c3 0c07 	rsb	ip, r3, #7
 8002aea:	f1bc 0f04 	cmp.w	ip, #4
 8002aee:	bf28      	it	cs
 8002af0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af4:	f103 0e04 	add.w	lr, r3, #4
 8002af8:	f1be 0f06 	cmp.w	lr, #6
 8002afc:	d918      	bls.n	8002b30 <HAL_NVIC_SetPriority+0x54>
 8002afe:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	f04f 3eff 	mov.w	lr, #4294967295
 8002b04:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b08:	ea21 010c 	bic.w	r1, r1, ip
 8002b0c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b0e:	fa0e f303 	lsl.w	r3, lr, r3
 8002b12:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b16:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	db0b      	blt.n	8002b34 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1c:	0109      	lsls	r1, r1, #4
 8002b1e:	b2c9      	uxtb	r1, r1
 8002b20:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002b24:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002b28:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b2c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b30:	2300      	movs	r3, #0
 8002b32:	e7e5      	b.n	8002b00 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	f000 000f 	and.w	r0, r0, #15
 8002b38:	0109      	lsls	r1, r1, #4
 8002b3a:	b2c9      	uxtb	r1, r1
 8002b3c:	4b02      	ldr	r3, [pc, #8]	; (8002b48 <HAL_NVIC_SetPriority+0x6c>)
 8002b3e:	5419      	strb	r1, [r3, r0]
 8002b40:	e7f4      	b.n	8002b2c <HAL_NVIC_SetPriority+0x50>
 8002b42:	bf00      	nop
 8002b44:	e000ed00 	.word	0xe000ed00
 8002b48:	e000ed14 	.word	0xe000ed14

08002b4c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	db07      	blt.n	8002b60 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b50:	f000 021f 	and.w	r2, r0, #31
 8002b54:	0940      	lsrs	r0, r0, #5
 8002b56:	2301      	movs	r3, #1
 8002b58:	4093      	lsls	r3, r2
 8002b5a:	4a02      	ldr	r2, [pc, #8]	; (8002b64 <HAL_NVIC_EnableIRQ+0x18>)
 8002b5c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000e100 	.word	0xe000e100

08002b68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b68:	3801      	subs	r0, #1
 8002b6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002b6e:	d20b      	bcs.n	8002b88 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002b74:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b76:	4a05      	ldr	r2, [pc, #20]	; (8002b8c <HAL_SYSTICK_Config+0x24>)
 8002b78:	21f0      	movs	r1, #240	; 0xf0
 8002b7a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b7e:	2000      	movs	r0, #0
 8002b80:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b82:	2207      	movs	r2, #7
 8002b84:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b86:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002b88:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002b8a:	4770      	bx	lr
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b92:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8002b94:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b96:	e062      	b.n	8002c5e <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b98:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b9a:	005e      	lsls	r6, r3, #1
 8002b9c:	2403      	movs	r4, #3
 8002b9e:	40b4      	lsls	r4, r6
 8002ba0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ba4:	68cc      	ldr	r4, [r1, #12]
 8002ba6:	40b4      	lsls	r4, r6
 8002ba8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002baa:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bac:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bae:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb2:	684c      	ldr	r4, [r1, #4]
 8002bb4:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002bb8:	409c      	lsls	r4, r3
 8002bba:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8002bbe:	6044      	str	r4, [r0, #4]
 8002bc0:	e05e      	b.n	8002c80 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc2:	08dd      	lsrs	r5, r3, #3
 8002bc4:	3508      	adds	r5, #8
 8002bc6:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bca:	f003 0407 	and.w	r4, r3, #7
 8002bce:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002bd2:	240f      	movs	r4, #15
 8002bd4:	fa04 f40c 	lsl.w	r4, r4, ip
 8002bd8:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bdc:	690c      	ldr	r4, [r1, #16]
 8002bde:	fa04 f40c 	lsl.w	r4, r4, ip
 8002be2:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002be6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8002bea:	e060      	b.n	8002cae <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bec:	2405      	movs	r4, #5
 8002bee:	e000      	b.n	8002bf2 <HAL_GPIO_Init+0x62>
 8002bf0:	2400      	movs	r4, #0
 8002bf2:	fa04 f40e 	lsl.w	r4, r4, lr
 8002bf6:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bf8:	f10c 0c02 	add.w	ip, ip, #2
 8002bfc:	4d55      	ldr	r5, [pc, #340]	; (8002d54 <HAL_GPIO_Init+0x1c4>)
 8002bfe:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c02:	4c55      	ldr	r4, [pc, #340]	; (8002d58 <HAL_GPIO_Init+0x1c8>)
 8002c04:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8002c06:	43d4      	mvns	r4, r2
 8002c08:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c0c:	684f      	ldr	r7, [r1, #4]
 8002c0e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002c12:	d001      	beq.n	8002c18 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8002c14:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002c18:	4d4f      	ldr	r5, [pc, #316]	; (8002d58 <HAL_GPIO_Init+0x1c8>)
 8002c1a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8002c1c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002c1e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c22:	684f      	ldr	r7, [r1, #4]
 8002c24:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8002c28:	d001      	beq.n	8002c2e <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8002c2a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002c2e:	4d4a      	ldr	r5, [pc, #296]	; (8002d58 <HAL_GPIO_Init+0x1c8>)
 8002c30:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 8002c32:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002c34:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c38:	684f      	ldr	r7, [r1, #4]
 8002c3a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002c3e:	d001      	beq.n	8002c44 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8002c40:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8002c44:	4d44      	ldr	r5, [pc, #272]	; (8002d58 <HAL_GPIO_Init+0x1c8>)
 8002c46:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c48:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8002c4a:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c4c:	684e      	ldr	r6, [r1, #4]
 8002c4e:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002c52:	d001      	beq.n	8002c58 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8002c54:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8002c58:	4a3f      	ldr	r2, [pc, #252]	; (8002d58 <HAL_GPIO_Init+0x1c8>)
 8002c5a:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8002c5c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c5e:	680a      	ldr	r2, [r1, #0]
 8002c60:	fa32 f403 	lsrs.w	r4, r2, r3
 8002c64:	d074      	beq.n	8002d50 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c66:	f04f 0c01 	mov.w	ip, #1
 8002c6a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8002c6e:	ea1c 0202 	ands.w	r2, ip, r2
 8002c72:	d0f3      	beq.n	8002c5c <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002c74:	684c      	ldr	r4, [r1, #4]
 8002c76:	f004 0403 	and.w	r4, r4, #3
 8002c7a:	3c01      	subs	r4, #1
 8002c7c:	2c01      	cmp	r4, #1
 8002c7e:	d98b      	bls.n	8002b98 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c80:	684c      	ldr	r4, [r1, #4]
 8002c82:	f004 0403 	and.w	r4, r4, #3
 8002c86:	2c03      	cmp	r4, #3
 8002c88:	d00c      	beq.n	8002ca4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8002c8a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c8c:	005d      	lsls	r5, r3, #1
 8002c8e:	f04f 0c03 	mov.w	ip, #3
 8002c92:	fa0c fc05 	lsl.w	ip, ip, r5
 8002c96:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c9a:	688c      	ldr	r4, [r1, #8]
 8002c9c:	40ac      	lsls	r4, r5
 8002c9e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8002ca2:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca4:	684c      	ldr	r4, [r1, #4]
 8002ca6:	f004 0403 	and.w	r4, r4, #3
 8002caa:	2c02      	cmp	r4, #2
 8002cac:	d089      	beq.n	8002bc2 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8002cae:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cb0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002cb4:	f04f 0c03 	mov.w	ip, #3
 8002cb8:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002cbc:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cc0:	684c      	ldr	r4, [r1, #4]
 8002cc2:	f004 0403 	and.w	r4, r4, #3
 8002cc6:	fa04 f40e 	lsl.w	r4, r4, lr
 8002cca:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002cce:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cd0:	684c      	ldr	r4, [r1, #4]
 8002cd2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002cd6:	d0c1      	beq.n	8002c5c <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd8:	4c20      	ldr	r4, [pc, #128]	; (8002d5c <HAL_GPIO_Init+0x1cc>)
 8002cda:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002cdc:	f045 0501 	orr.w	r5, r5, #1
 8002ce0:	6625      	str	r5, [r4, #96]	; 0x60
 8002ce2:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8002ce4:	f004 0401 	and.w	r4, r4, #1
 8002ce8:	9401      	str	r4, [sp, #4]
 8002cea:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002cec:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002cf0:	f10c 0502 	add.w	r5, ip, #2
 8002cf4:	4c17      	ldr	r4, [pc, #92]	; (8002d54 <HAL_GPIO_Init+0x1c4>)
 8002cf6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cfa:	f003 0403 	and.w	r4, r3, #3
 8002cfe:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002d02:	240f      	movs	r4, #15
 8002d04:	fa04 f40e 	lsl.w	r4, r4, lr
 8002d08:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d0c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002d10:	f43f af6e 	beq.w	8002bf0 <HAL_GPIO_Init+0x60>
 8002d14:	4c12      	ldr	r4, [pc, #72]	; (8002d60 <HAL_GPIO_Init+0x1d0>)
 8002d16:	42a0      	cmp	r0, r4
 8002d18:	d012      	beq.n	8002d40 <HAL_GPIO_Init+0x1b0>
 8002d1a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d1e:	42a0      	cmp	r0, r4
 8002d20:	d010      	beq.n	8002d44 <HAL_GPIO_Init+0x1b4>
 8002d22:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d26:	42a0      	cmp	r0, r4
 8002d28:	d00e      	beq.n	8002d48 <HAL_GPIO_Init+0x1b8>
 8002d2a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d2e:	42a0      	cmp	r0, r4
 8002d30:	d00c      	beq.n	8002d4c <HAL_GPIO_Init+0x1bc>
 8002d32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d36:	42a0      	cmp	r0, r4
 8002d38:	f43f af58 	beq.w	8002bec <HAL_GPIO_Init+0x5c>
 8002d3c:	2406      	movs	r4, #6
 8002d3e:	e758      	b.n	8002bf2 <HAL_GPIO_Init+0x62>
 8002d40:	2401      	movs	r4, #1
 8002d42:	e756      	b.n	8002bf2 <HAL_GPIO_Init+0x62>
 8002d44:	2402      	movs	r4, #2
 8002d46:	e754      	b.n	8002bf2 <HAL_GPIO_Init+0x62>
 8002d48:	2403      	movs	r4, #3
 8002d4a:	e752      	b.n	8002bf2 <HAL_GPIO_Init+0x62>
 8002d4c:	2404      	movs	r4, #4
 8002d4e:	e750      	b.n	8002bf2 <HAL_GPIO_Init+0x62>
  }
}
 8002d50:	b003      	add	sp, #12
 8002d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d54:	40010000 	.word	0x40010000
 8002d58:	40010400 	.word	0x40010400
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	48000400 	.word	0x48000400

08002d64 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002d64:	6903      	ldr	r3, [r0, #16]
 8002d66:	4219      	tst	r1, r3
 8002d68:	d001      	beq.n	8002d6e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d6e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002d70:	4770      	bx	lr

08002d72 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d72:	b10a      	cbz	r2, 8002d78 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d74:	6181      	str	r1, [r0, #24]
 8002d76:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d78:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002d7a:	4770      	bx	lr

08002d7c <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	d136      	bne.n	8002dee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d80:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8c:	d008      	beq.n	8002da0 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d8e:	4a3b      	ldr	r2, [pc, #236]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002d90:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002da0:	4a36      	ldr	r2, [pc, #216]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002da2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002da6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002daa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dae:	6813      	ldr	r3, [r2, #0]
 8002db0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002db4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002db8:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2232      	movs	r2, #50	; 0x32
 8002dc0:	fb02 f303 	mul.w	r3, r2, r3
 8002dc4:	4a2f      	ldr	r2, [pc, #188]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	0c9b      	lsrs	r3, r3, #18
 8002dcc:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dce:	e000      	b.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8002dd0:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dd2:	4a2a      	ldr	r2, [pc, #168]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002dd4:	6952      	ldr	r2, [r2, #20]
 8002dd6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002dda:	d001      	beq.n	8002de0 <HAL_PWREx_ControlVoltageScaling+0x64>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f7      	bne.n	8002dd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002de0:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002de8:	d144      	bne.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8002dea:	2000      	movs	r0, #0
 8002dec:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dee:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002df2:	d008      	beq.n	8002e06 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002df4:	4a21      	ldr	r2, [pc, #132]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002df6:	6813      	ldr	r3, [r2, #0]
 8002df8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e00:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002e02:	2000      	movs	r0, #0
 8002e04:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e12:	d008      	beq.n	8002e26 <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002e16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8002e22:	2000      	movs	r0, #0
 8002e24:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e26:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002e28:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e34:	6813      	ldr	r3, [r2, #0]
 8002e36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e3e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2232      	movs	r2, #50	; 0x32
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	0c9b      	lsrs	r3, r3, #18
 8002e52:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e54:	e000      	b.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8002e56:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e58:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002e5a:	6952      	ldr	r2, [r2, #20]
 8002e5c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002e60:	d001      	beq.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0xea>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f7      	bne.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002e6e:	d103      	bne.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8002e70:	2000      	movs	r0, #0
 8002e72:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002e74:	2003      	movs	r0, #3
 8002e76:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002e78:	2003      	movs	r0, #3
}
 8002e7a:	4770      	bx	lr
 8002e7c:	40007000 	.word	0x40007000
 8002e80:	20000004 	.word	0x20000004
 8002e84:	431bde83 	.word	0x431bde83

08002e88 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e88:	4a02      	ldr	r2, [pc, #8]	; (8002e94 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8002e8a:	6893      	ldr	r3, [r2, #8]
 8002e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e90:	6093      	str	r3, [r2, #8]
}
 8002e92:	4770      	bx	lr
 8002e94:	40007000 	.word	0x40007000

08002e98 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e98:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ea0:	68d8      	ldr	r0, [r3, #12]
 8002ea2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002ea6:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 8002ea8:	2a03      	cmp	r2, #3
 8002eaa:	d011      	beq.n	8002ed0 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002eac:	480e      	ldr	r0, [pc, #56]	; (8002ee8 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8002eae:	fbb0 f0f3 	udiv	r0, r0, r3
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8002eba:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8002eca:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ece:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ed0:	4806      	ldr	r0, [pc, #24]	; (8002eec <RCC_GetSysClockFreqFromPLLSource+0x54>)
 8002ed2:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ed6:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8002ede:	fb03 f000 	mul.w	r0, r3, r0
    break;
 8002ee2:	e7ec      	b.n	8002ebe <RCC_GetSysClockFreqFromPLLSource+0x26>
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	00f42400 	.word	0x00f42400
 8002eec:	007a1200 	.word	0x007a1200

08002ef0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	f000 824f 	beq.w	8003394 <HAL_RCC_OscConfig+0x4a4>
{
 8002ef6:	b570      	push	{r4, r5, r6, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efc:	6803      	ldr	r3, [r0, #0]
 8002efe:	f013 0f01 	tst.w	r3, #1
 8002f02:	d037      	beq.n	8002f74 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f04:	4aa4      	ldr	r2, [pc, #656]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 8002f06:	6893      	ldr	r3, [r2, #8]
 8002f08:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f0c:	68d2      	ldr	r2, [r2, #12]
 8002f0e:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f12:	2b0c      	cmp	r3, #12
 8002f14:	d023      	beq.n	8002f5e <HAL_RCC_OscConfig+0x6e>
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d023      	beq.n	8002f62 <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f1a:	6863      	ldr	r3, [r4, #4]
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f20:	d04e      	beq.n	8002fc0 <HAL_RCC_OscConfig+0xd0>
 8002f22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f26:	d051      	beq.n	8002fcc <HAL_RCC_OscConfig+0xdc>
 8002f28:	4b9b      	ldr	r3, [pc, #620]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f38:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f3a:	6863      	ldr	r3, [r4, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d052      	beq.n	8002fe6 <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8002f40:	f7fe fc32 	bl	80017a8 <HAL_GetTick>
 8002f44:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f46:	4b94      	ldr	r3, [pc, #592]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f4e:	d111      	bne.n	8002f74 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7fe fc2a 	bl	80017a8 <HAL_GetTick>
 8002f54:	1b40      	subs	r0, r0, r5
 8002f56:	2864      	cmp	r0, #100	; 0x64
 8002f58:	d9f5      	bls.n	8002f46 <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8002f5a:	2003      	movs	r0, #3
 8002f5c:	e223      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f5e:	2a03      	cmp	r2, #3
 8002f60:	d1d9      	bne.n	8002f16 <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f62:	4b8d      	ldr	r3, [pc, #564]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f6a:	d003      	beq.n	8002f74 <HAL_RCC_OscConfig+0x84>
 8002f6c:	6863      	ldr	r3, [r4, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8212 	beq.w	8003398 <HAL_RCC_OscConfig+0x4a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f74:	6823      	ldr	r3, [r4, #0]
 8002f76:	f013 0f02 	tst.w	r3, #2
 8002f7a:	d05d      	beq.n	8003038 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7c:	4a86      	ldr	r2, [pc, #536]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 8002f7e:	6893      	ldr	r3, [r2, #8]
 8002f80:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f84:	68d2      	ldr	r2, [r2, #12]
 8002f86:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d03a      	beq.n	8003004 <HAL_RCC_OscConfig+0x114>
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d03a      	beq.n	8003008 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f92:	68e3      	ldr	r3, [r4, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d075      	beq.n	8003084 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8002f98:	4a7f      	ldr	r2, [pc, #508]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 8002f9a:	6813      	ldr	r3, [r2, #0]
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fc01 	bl	80017a8 <HAL_GetTick>
 8002fa6:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa8:	4b7b      	ldr	r3, [pc, #492]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002fb0:	d15f      	bne.n	8003072 <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb2:	f7fe fbf9 	bl	80017a8 <HAL_GetTick>
 8002fb6:	1b40      	subs	r0, r0, r5
 8002fb8:	2802      	cmp	r0, #2
 8002fba:	d9f5      	bls.n	8002fa8 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	e1f2      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc0:	4a75      	ldr	r2, [pc, #468]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 8002fc2:	6813      	ldr	r3, [r2, #0]
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e7b6      	b.n	8002f3a <HAL_RCC_OscConfig+0x4a>
 8002fcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fd0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e7a9      	b.n	8002f3a <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fbdf 	bl	80017a8 <HAL_GetTick>
 8002fea:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fec:	4b6a      	ldr	r3, [pc, #424]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ff4:	d0be      	beq.n	8002f74 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff6:	f7fe fbd7 	bl	80017a8 <HAL_GetTick>
 8002ffa:	1b40      	subs	r0, r0, r5
 8002ffc:	2864      	cmp	r0, #100	; 0x64
 8002ffe:	d9f5      	bls.n	8002fec <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8003000:	2003      	movs	r0, #3
 8003002:	e1d0      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003004:	2a02      	cmp	r2, #2
 8003006:	d1c2      	bne.n	8002f8e <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003008:	4b63      	ldr	r3, [pc, #396]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003010:	d003      	beq.n	800301a <HAL_RCC_OscConfig+0x12a>
 8003012:	68e3      	ldr	r3, [r4, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 81c1 	beq.w	800339c <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301a:	4a5f      	ldr	r2, [pc, #380]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 800301c:	6853      	ldr	r3, [r2, #4]
 800301e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003022:	6921      	ldr	r1, [r4, #16]
 8003024:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003028:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800302a:	4b5c      	ldr	r3, [pc, #368]	; (800319c <HAL_RCC_OscConfig+0x2ac>)
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	f7fe fb77 	bl	8001720 <HAL_InitTick>
 8003032:	2800      	cmp	r0, #0
 8003034:	f040 81b4 	bne.w	80033a0 <HAL_RCC_OscConfig+0x4b0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	f013 0f08 	tst.w	r3, #8
 800303e:	d04c      	beq.n	80030da <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003040:	6963      	ldr	r3, [r4, #20]
 8003042:	b39b      	cbz	r3, 80030ac <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 8003044:	4a54      	ldr	r2, [pc, #336]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 8003046:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003052:	f7fe fba9 	bl	80017a8 <HAL_GetTick>
 8003056:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003058:	4b4f      	ldr	r3, [pc, #316]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 800305a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305e:	f013 0f02 	tst.w	r3, #2
 8003062:	d13a      	bne.n	80030da <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003064:	f7fe fba0 	bl	80017a8 <HAL_GetTick>
 8003068:	1b40      	subs	r0, r0, r5
 800306a:	2802      	cmp	r0, #2
 800306c:	d9f4      	bls.n	8003058 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 800306e:	2003      	movs	r0, #3
 8003070:	e199      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003072:	4a49      	ldr	r2, [pc, #292]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 8003074:	6853      	ldr	r3, [r2, #4]
 8003076:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800307a:	6921      	ldr	r1, [r4, #16]
 800307c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003080:	6053      	str	r3, [r2, #4]
 8003082:	e7d9      	b.n	8003038 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8003084:	4a44      	ldr	r2, [pc, #272]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 8003086:	6813      	ldr	r3, [r2, #0]
 8003088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800308c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800308e:	f7fe fb8b 	bl	80017a8 <HAL_GetTick>
 8003092:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003094:	4b40      	ldr	r3, [pc, #256]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800309c:	d0cc      	beq.n	8003038 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309e:	f7fe fb83 	bl	80017a8 <HAL_GetTick>
 80030a2:	1b40      	subs	r0, r0, r5
 80030a4:	2802      	cmp	r0, #2
 80030a6:	d9f5      	bls.n	8003094 <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 80030a8:	2003      	movs	r0, #3
 80030aa:	e17c      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_LSI_DISABLE();
 80030ac:	4a3a      	ldr	r2, [pc, #232]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 80030ae:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80030ba:	f7fe fb75 	bl	80017a8 <HAL_GetTick>
 80030be:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c0:	4b35      	ldr	r3, [pc, #212]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 80030c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c6:	f013 0f02 	tst.w	r3, #2
 80030ca:	d006      	beq.n	80030da <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030cc:	f7fe fb6c 	bl	80017a8 <HAL_GetTick>
 80030d0:	1b40      	subs	r0, r0, r5
 80030d2:	2802      	cmp	r0, #2
 80030d4:	d9f4      	bls.n	80030c0 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 80030d6:	2003      	movs	r0, #3
 80030d8:	e165      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	f013 0f04 	tst.w	r3, #4
 80030e0:	f000 8081 	beq.w	80031e6 <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030e4:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80030ec:	d136      	bne.n	800315c <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 80030f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030f6:	659a      	str	r2, [r3, #88]	; 0x58
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003102:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003104:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <HAL_RCC_OscConfig+0x2b0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f413 7f80 	tst.w	r3, #256	; 0x100
 800310c:	d028      	beq.n	8003160 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310e:	68a3      	ldr	r3, [r4, #8]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d039      	beq.n	8003188 <HAL_RCC_OscConfig+0x298>
 8003114:	2b05      	cmp	r3, #5
 8003116:	d045      	beq.n	80031a4 <HAL_RCC_OscConfig+0x2b4>
 8003118:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 800311a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003126:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800312a:	f022 0204 	bic.w	r2, r2, #4
 800312e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003132:	68a3      	ldr	r3, [r4, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d043      	beq.n	80031c0 <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 8003138:	f7fe fb36 	bl	80017a8 <HAL_GetTick>
 800313c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313e:	4b16      	ldr	r3, [pc, #88]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003144:	f013 0f02 	tst.w	r3, #2
 8003148:	d14c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314a:	f7fe fb2d 	bl	80017a8 <HAL_GetTick>
 800314e:	1b80      	subs	r0, r0, r6
 8003150:	f241 3388 	movw	r3, #5000	; 0x1388
 8003154:	4298      	cmp	r0, r3
 8003156:	d9f2      	bls.n	800313e <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 8003158:	2003      	movs	r0, #3
 800315a:	e124      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
    FlagStatus       pwrclkchanged = RESET;
 800315c:	2500      	movs	r5, #0
 800315e:	e7d1      	b.n	8003104 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003160:	4a0f      	ldr	r2, [pc, #60]	; (80031a0 <HAL_RCC_OscConfig+0x2b0>)
 8003162:	6813      	ldr	r3, [r2, #0]
 8003164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003168:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800316a:	f7fe fb1d 	bl	80017a8 <HAL_GetTick>
 800316e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_OscConfig+0x2b0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003178:	d1c9      	bne.n	800310e <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317a:	f7fe fb15 	bl	80017a8 <HAL_GetTick>
 800317e:	1b80      	subs	r0, r0, r6
 8003180:	2802      	cmp	r0, #2
 8003182:	d9f5      	bls.n	8003170 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 8003184:	2003      	movs	r0, #3
 8003186:	e10e      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003188:	4a03      	ldr	r2, [pc, #12]	; (8003198 <HAL_RCC_OscConfig+0x2a8>)
 800318a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003196:	e7cc      	b.n	8003132 <HAL_RCC_OscConfig+0x242>
 8003198:	40021000 	.word	0x40021000
 800319c:	2000000c 	.word	0x2000000c
 80031a0:	40007000 	.word	0x40007000
 80031a4:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 80031a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031aa:	f042 0204 	orr.w	r2, r2, #4
 80031ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80031b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80031be:	e7b8      	b.n	8003132 <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 80031c0:	f7fe faf2 	bl	80017a8 <HAL_GetTick>
 80031c4:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031c6:	4b80      	ldr	r3, [pc, #512]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	f013 0f02 	tst.w	r3, #2
 80031d0:	d008      	beq.n	80031e4 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fe fae9 	bl	80017a8 <HAL_GetTick>
 80031d6:	1b80      	subs	r0, r0, r6
 80031d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80031dc:	4298      	cmp	r0, r3
 80031de:	d9f2      	bls.n	80031c6 <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 80031e0:	2003      	movs	r0, #3
 80031e2:	e0e0      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
    if (pwrclkchanged == SET)
 80031e4:	b9e5      	cbnz	r5, 8003220 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	f013 0f20 	tst.w	r3, #32
 80031ec:	d035      	beq.n	800325a <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031ee:	69a3      	ldr	r3, [r4, #24]
 80031f0:	b1e3      	cbz	r3, 800322c <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 80031f2:	4a75      	ldr	r2, [pc, #468]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 80031f4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003200:	f7fe fad2 	bl	80017a8 <HAL_GetTick>
 8003204:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003206:	4b70      	ldr	r3, [pc, #448]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 8003208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800320c:	f013 0f02 	tst.w	r3, #2
 8003210:	d123      	bne.n	800325a <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003212:	f7fe fac9 	bl	80017a8 <HAL_GetTick>
 8003216:	1b40      	subs	r0, r0, r5
 8003218:	2802      	cmp	r0, #2
 800321a:	d9f4      	bls.n	8003206 <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 800321c:	2003      	movs	r0, #3
 800321e:	e0c2      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003220:	4a69      	ldr	r2, [pc, #420]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 8003222:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003228:	6593      	str	r3, [r2, #88]	; 0x58
 800322a:	e7dc      	b.n	80031e6 <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 800322c:	4a66      	ldr	r2, [pc, #408]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 800322e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800323a:	f7fe fab5 	bl	80017a8 <HAL_GetTick>
 800323e:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003240:	4b61      	ldr	r3, [pc, #388]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 8003242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003246:	f013 0f02 	tst.w	r3, #2
 800324a:	d006      	beq.n	800325a <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800324c:	f7fe faac 	bl	80017a8 <HAL_GetTick>
 8003250:	1b40      	subs	r0, r0, r5
 8003252:	2802      	cmp	r0, #2
 8003254:	d9f4      	bls.n	8003240 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 8003256:	2003      	movs	r0, #3
 8003258:	e0a5      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800325a:	69e3      	ldr	r3, [r4, #28]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80a1 	beq.w	80033a4 <HAL_RCC_OscConfig+0x4b4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003262:	4a59      	ldr	r2, [pc, #356]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 8003264:	6892      	ldr	r2, [r2, #8]
 8003266:	f002 020c 	and.w	r2, r2, #12
 800326a:	2a0c      	cmp	r2, #12
 800326c:	d064      	beq.n	8003338 <HAL_RCC_OscConfig+0x448>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800326e:	2b02      	cmp	r3, #2
 8003270:	d013      	beq.n	800329a <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_PLL_DISABLE();
 8003272:	4a55      	ldr	r2, [pc, #340]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 8003274:	6813      	ldr	r3, [r2, #0]
 8003276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800327a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800327c:	f7fe fa94 	bl	80017a8 <HAL_GetTick>
 8003280:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003282:	4b51      	ldr	r3, [pc, #324]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800328a:	d04e      	beq.n	800332a <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7fe fa8c 	bl	80017a8 <HAL_GetTick>
 8003290:	1b00      	subs	r0, r0, r4
 8003292:	2802      	cmp	r0, #2
 8003294:	d9f5      	bls.n	8003282 <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8003296:	2003      	movs	r0, #3
 8003298:	e085      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_DISABLE();
 800329a:	4a4b      	ldr	r2, [pc, #300]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 800329c:	6813      	ldr	r3, [r2, #0]
 800329e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80032a4:	f7fe fa80 	bl	80017a8 <HAL_GetTick>
 80032a8:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032aa:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80032b2:	d006      	beq.n	80032c2 <HAL_RCC_OscConfig+0x3d2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fe fa78 	bl	80017a8 <HAL_GetTick>
 80032b8:	1b40      	subs	r0, r0, r5
 80032ba:	2802      	cmp	r0, #2
 80032bc:	d9f5      	bls.n	80032aa <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 80032be:	2003      	movs	r0, #3
 80032c0:	e071      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c2:	4a41      	ldr	r2, [pc, #260]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 80032c4:	68d3      	ldr	r3, [r2, #12]
 80032c6:	4941      	ldr	r1, [pc, #260]	; (80033cc <HAL_RCC_OscConfig+0x4dc>)
 80032c8:	4019      	ands	r1, r3
 80032ca:	6a23      	ldr	r3, [r4, #32]
 80032cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80032ce:	3801      	subs	r0, #1
 80032d0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80032d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80032d6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80032da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80032dc:	0840      	lsrs	r0, r0, #1
 80032de:	3801      	subs	r0, #1
 80032e0:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80032e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80032e6:	0840      	lsrs	r0, r0, #1
 80032e8:	3801      	subs	r0, #1
 80032ea:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80032ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80032f0:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 80032f4:	430b      	orrs	r3, r1
 80032f6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80032f8:	6813      	ldr	r3, [r2, #0]
 80032fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fe:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003300:	68d3      	ldr	r3, [r2, #12]
 8003302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003306:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003308:	f7fe fa4e 	bl	80017a8 <HAL_GetTick>
 800330c:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330e:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x436>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003318:	f7fe fa46 	bl	80017a8 <HAL_GetTick>
 800331c:	1b00      	subs	r0, r0, r4
 800331e:	2802      	cmp	r0, #2
 8003320:	d9f5      	bls.n	800330e <HAL_RCC_OscConfig+0x41e>
            return HAL_TIMEOUT;
 8003322:	2003      	movs	r0, #3
 8003324:	e03f      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
  return HAL_OK;
 8003326:	2000      	movs	r0, #0
 8003328:	e03d      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800332a:	4a27      	ldr	r2, [pc, #156]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 800332c:	68d1      	ldr	r1, [r2, #12]
 800332e:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <HAL_RCC_OscConfig+0x4e0>)
 8003330:	400b      	ands	r3, r1
 8003332:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8003334:	2000      	movs	r0, #0
 8003336:	e036      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003338:	2b01      	cmp	r3, #1
 800333a:	d036      	beq.n	80033aa <HAL_RCC_OscConfig+0x4ba>
      temp_pllckcfg = RCC->PLLCFGR;
 800333c:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <HAL_RCC_OscConfig+0x4d8>)
 800333e:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003340:	f003 0103 	and.w	r1, r3, #3
 8003344:	6a22      	ldr	r2, [r4, #32]
 8003346:	4291      	cmp	r1, r2
 8003348:	d131      	bne.n	80033ae <HAL_RCC_OscConfig+0x4be>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800334a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800334e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003350:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003356:	d12c      	bne.n	80033b2 <HAL_RCC_OscConfig+0x4c2>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003358:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800335c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800335e:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003362:	d128      	bne.n	80033b6 <HAL_RCC_OscConfig+0x4c6>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003364:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003368:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800336a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800336e:	d124      	bne.n	80033ba <HAL_RCC_OscConfig+0x4ca>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003370:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003374:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003376:	0852      	lsrs	r2, r2, #1
 8003378:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800337a:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800337e:	d11e      	bne.n	80033be <HAL_RCC_OscConfig+0x4ce>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003380:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003384:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003386:	0852      	lsrs	r2, r2, #1
 8003388:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800338a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800338e:	d118      	bne.n	80033c2 <HAL_RCC_OscConfig+0x4d2>
  return HAL_OK;
 8003390:	2000      	movs	r0, #0
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
    return HAL_ERROR;
 8003394:	2001      	movs	r0, #1
}
 8003396:	4770      	bx	lr
        return HAL_ERROR;
 8003398:	2001      	movs	r0, #1
 800339a:	e004      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
        return HAL_ERROR;
 800339c:	2001      	movs	r0, #1
 800339e:	e002      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
          return HAL_ERROR;
 80033a0:	2001      	movs	r0, #1
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
  return HAL_OK;
 80033a4:	2000      	movs	r0, #0
}
 80033a6:	b002      	add	sp, #8
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80033aa:	2001      	movs	r0, #1
 80033ac:	e7fb      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
        return HAL_ERROR;
 80033ae:	2001      	movs	r0, #1
 80033b0:	e7f9      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
 80033b2:	2001      	movs	r0, #1
 80033b4:	e7f7      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
 80033b6:	2001      	movs	r0, #1
 80033b8:	e7f5      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
 80033ba:	2001      	movs	r0, #1
 80033bc:	e7f3      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
 80033be:	2001      	movs	r0, #1
 80033c0:	e7f1      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
 80033c2:	2001      	movs	r0, #1
 80033c4:	e7ef      	b.n	80033a6 <HAL_RCC_OscConfig+0x4b6>
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000
 80033cc:	019f800c 	.word	0x019f800c
 80033d0:	feeefffc 	.word	0xfeeefffc

080033d4 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033d4:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <HAL_RCC_GetSysClockFreq+0x7c>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 030c 	and.w	r3, r3, #12
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d033      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033e0:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <HAL_RCC_GetSysClockFreq+0x7c>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 030c 	and.w	r3, r3, #12
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d02f      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80033ec:	4b18      	ldr	r3, [pc, #96]	; (8003450 <HAL_RCC_GetSysClockFreq+0x7c>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b0c      	cmp	r3, #12
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 80033f8:	2000      	movs	r0, #0
}
 80033fa:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <HAL_RCC_GetSysClockFreq+0x7c>)
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003404:	68d8      	ldr	r0, [r3, #12]
 8003406:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800340a:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 800340c:	2a03      	cmp	r2, #3
 800340e:	d011      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003410:	4810      	ldr	r0, [pc, #64]	; (8003454 <HAL_RCC_GetSysClockFreq+0x80>)
 8003412:	fbb0 f0f3 	udiv	r0, r0, r3
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800341e:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800342a:	3301      	adds	r3, #1
 800342c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800342e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003432:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003434:	4808      	ldr	r0, [pc, #32]	; (8003458 <HAL_RCC_GetSysClockFreq+0x84>)
 8003436:	fbb0 f0f3 	udiv	r0, r0, r3
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <HAL_RCC_GetSysClockFreq+0x7c>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8003442:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8003446:	e7ec      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8003448:	4802      	ldr	r0, [pc, #8]	; (8003454 <HAL_RCC_GetSysClockFreq+0x80>)
 800344a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800344c:	4802      	ldr	r0, [pc, #8]	; (8003458 <HAL_RCC_GetSysClockFreq+0x84>)
 800344e:	4770      	bx	lr
 8003450:	40021000 	.word	0x40021000
 8003454:	00f42400 	.word	0x00f42400
 8003458:	007a1200 	.word	0x007a1200

0800345c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800345c:	2800      	cmp	r0, #0
 800345e:	f000 80e6 	beq.w	800362e <HAL_RCC_ClockConfig+0x1d2>
{
 8003462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003464:	460c      	mov	r4, r1
 8003466:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003468:	4b74      	ldr	r3, [pc, #464]	; (800363c <HAL_RCC_ClockConfig+0x1e0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	428b      	cmp	r3, r1
 8003472:	d20b      	bcs.n	800348c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003474:	4a71      	ldr	r2, [pc, #452]	; (800363c <HAL_RCC_ClockConfig+0x1e0>)
 8003476:	6813      	ldr	r3, [r2, #0]
 8003478:	f023 030f 	bic.w	r3, r3, #15
 800347c:	430b      	orrs	r3, r1
 800347e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003480:	6813      	ldr	r3, [r2, #0]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	428b      	cmp	r3, r1
 8003488:	f040 80d3 	bne.w	8003632 <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348c:	682e      	ldr	r6, [r5, #0]
 800348e:	f016 0601 	ands.w	r6, r6, #1
 8003492:	d05f      	beq.n	8003554 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003494:	686b      	ldr	r3, [r5, #4]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d02f      	beq.n	80034fa <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349a:	2b02      	cmp	r3, #2
 800349c:	d04d      	beq.n	800353a <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800349e:	4b68      	ldr	r3, [pc, #416]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80034a6:	f000 80c6 	beq.w	8003636 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034aa:	f7ff ff93 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80034ae:	4b65      	ldr	r3, [pc, #404]	; (8003644 <HAL_RCC_ClockConfig+0x1e8>)
 80034b0:	4298      	cmp	r0, r3
 80034b2:	d94d      	bls.n	8003550 <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034b4:	4a62      	ldr	r2, [pc, #392]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 80034b6:	6893      	ldr	r3, [r2, #8]
 80034b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034c2:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034c4:	4a5e      	ldr	r2, [pc, #376]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 80034c6:	6893      	ldr	r3, [r2, #8]
 80034c8:	f023 0303 	bic.w	r3, r3, #3
 80034cc:	6869      	ldr	r1, [r5, #4]
 80034ce:	430b      	orrs	r3, r1
 80034d0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80034d2:	f7fe f969 	bl	80017a8 <HAL_GetTick>
 80034d6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d8:	4b59      	ldr	r3, [pc, #356]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	686a      	ldr	r2, [r5, #4]
 80034e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80034e6:	d035      	beq.n	8003554 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e8:	f7fe f95e 	bl	80017a8 <HAL_GetTick>
 80034ec:	1bc0      	subs	r0, r0, r7
 80034ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80034f2:	4298      	cmp	r0, r3
 80034f4:	d9f0      	bls.n	80034d8 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 80034f6:	2003      	movs	r0, #3
 80034f8:	e078      	b.n	80035ec <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fa:	4b51      	ldr	r3, [pc, #324]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8003504:	2001      	movs	r0, #1
 8003506:	e071      	b.n	80035ec <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003508:	f7ff fcc6 	bl	8002e98 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 800350c:	4b4d      	ldr	r3, [pc, #308]	; (8003644 <HAL_RCC_ClockConfig+0x1e8>)
 800350e:	4298      	cmp	r0, r3
 8003510:	d91a      	bls.n	8003548 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003512:	4b4b      	ldr	r3, [pc, #300]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800351c:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800351e:	f016 0602 	ands.w	r6, r6, #2
 8003522:	d0cf      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003524:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003526:	b98b      	cbnz	r3, 800354c <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003528:	4a45      	ldr	r2, [pc, #276]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 800352a:	6893      	ldr	r3, [r2, #8]
 800352c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003534:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003536:	2680      	movs	r6, #128	; 0x80
 8003538:	e7c4      	b.n	80034c4 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353a:	4b41      	ldr	r3, [pc, #260]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003542:	d1b2      	bne.n	80034aa <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8003544:	2001      	movs	r0, #1
 8003546:	e051      	b.n	80035ec <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003548:	2600      	movs	r6, #0
 800354a:	e7bb      	b.n	80034c4 <HAL_RCC_ClockConfig+0x68>
 800354c:	2600      	movs	r6, #0
 800354e:	e7b9      	b.n	80034c4 <HAL_RCC_ClockConfig+0x68>
 8003550:	2600      	movs	r6, #0
 8003552:	e7b7      	b.n	80034c4 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	f013 0f02 	tst.w	r3, #2
 800355a:	d048      	beq.n	80035ee <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	f013 0f04 	tst.w	r3, #4
 8003560:	d004      	beq.n	800356c <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003562:	4a37      	ldr	r2, [pc, #220]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 8003564:	6893      	ldr	r3, [r2, #8]
 8003566:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800356a:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	f013 0f08 	tst.w	r3, #8
 8003572:	d006      	beq.n	8003582 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003574:	4a32      	ldr	r2, [pc, #200]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 8003576:	6893      	ldr	r3, [r2, #8]
 8003578:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800357c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003580:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003582:	4a2f      	ldr	r2, [pc, #188]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 8003584:	6893      	ldr	r3, [r2, #8]
 8003586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800358a:	68a9      	ldr	r1, [r5, #8]
 800358c:	430b      	orrs	r3, r1
 800358e:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003590:	4b2a      	ldr	r3, [pc, #168]	; (800363c <HAL_RCC_ClockConfig+0x1e0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	42a3      	cmp	r3, r4
 800359a:	d830      	bhi.n	80035fe <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	f013 0f04 	tst.w	r3, #4
 80035a2:	d006      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a4:	4a26      	ldr	r2, [pc, #152]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 80035a6:	6893      	ldr	r3, [r2, #8]
 80035a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035ac:	68e9      	ldr	r1, [r5, #12]
 80035ae:	430b      	orrs	r3, r1
 80035b0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b2:	682b      	ldr	r3, [r5, #0]
 80035b4:	f013 0f08 	tst.w	r3, #8
 80035b8:	d007      	beq.n	80035ca <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ba:	4a21      	ldr	r2, [pc, #132]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 80035bc:	6893      	ldr	r3, [r2, #8]
 80035be:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80035c2:	6929      	ldr	r1, [r5, #16]
 80035c4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80035c8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035ca:	f7ff ff03 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 80035ce:	4b1c      	ldr	r3, [pc, #112]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80035d6:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <HAL_RCC_ClockConfig+0x1ec>)
 80035d8:	5cd3      	ldrb	r3, [r2, r3]
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	40d8      	lsrs	r0, r3
 80035e0:	4b1a      	ldr	r3, [pc, #104]	; (800364c <HAL_RCC_ClockConfig+0x1f0>)
 80035e2:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80035e4:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <HAL_RCC_ClockConfig+0x1f4>)
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	f7fe f89a 	bl	8001720 <HAL_InitTick>
}
 80035ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 80035ee:	2e80      	cmp	r6, #128	; 0x80
 80035f0:	d1ce      	bne.n	8003590 <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035f2:	4a13      	ldr	r2, [pc, #76]	; (8003640 <HAL_RCC_ClockConfig+0x1e4>)
 80035f4:	6893      	ldr	r3, [r2, #8]
 80035f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035fa:	6093      	str	r3, [r2, #8]
 80035fc:	e7c8      	b.n	8003590 <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4a0f      	ldr	r2, [pc, #60]	; (800363c <HAL_RCC_ClockConfig+0x1e0>)
 8003600:	6813      	ldr	r3, [r2, #0]
 8003602:	f023 030f 	bic.w	r3, r3, #15
 8003606:	4323      	orrs	r3, r4
 8003608:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800360a:	f7fe f8cd 	bl	80017a8 <HAL_GetTick>
 800360e:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <HAL_RCC_ClockConfig+0x1e0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	42a3      	cmp	r3, r4
 800361a:	d0bf      	beq.n	800359c <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800361c:	f7fe f8c4 	bl	80017a8 <HAL_GetTick>
 8003620:	1b80      	subs	r0, r0, r6
 8003622:	f241 3388 	movw	r3, #5000	; 0x1388
 8003626:	4298      	cmp	r0, r3
 8003628:	d9f2      	bls.n	8003610 <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 800362a:	2003      	movs	r0, #3
 800362c:	e7de      	b.n	80035ec <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 800362e:	2001      	movs	r0, #1
}
 8003630:	4770      	bx	lr
      return HAL_ERROR;
 8003632:	2001      	movs	r0, #1
 8003634:	e7da      	b.n	80035ec <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8003636:	2001      	movs	r0, #1
 8003638:	e7d8      	b.n	80035ec <HAL_RCC_ClockConfig+0x190>
 800363a:	bf00      	nop
 800363c:	40022000 	.word	0x40022000
 8003640:	40021000 	.word	0x40021000
 8003644:	04c4b400 	.word	0x04c4b400
 8003648:	08005590 	.word	0x08005590
 800364c:	20000004 	.word	0x20000004
 8003650:	2000000c 	.word	0x2000000c

08003654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003656:	b083      	sub	sp, #12
 8003658:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800365a:	6803      	ldr	r3, [r0, #0]
 800365c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003660:	d069      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003662:	4bae      	ldr	r3, [pc, #696]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003666:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800366a:	d11e      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366c:	4bab      	ldr	r3, [pc, #684]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800366e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003670:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003674:	659a      	str	r2, [r3, #88]	; 0x58
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003680:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003682:	4aa7      	ldr	r2, [pc, #668]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003684:	6813      	ldr	r3, [r2, #0]
 8003686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800368c:	f7fe f88c 	bl	80017a8 <HAL_GetTick>
 8003690:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003692:	4ba3      	ldr	r3, [pc, #652]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f413 7f80 	tst.w	r3, #256	; 0x100
 800369a:	d108      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369c:	f7fe f884 	bl	80017a8 <HAL_GetTick>
 80036a0:	1b40      	subs	r0, r0, r5
 80036a2:	2802      	cmp	r0, #2
 80036a4:	d9f5      	bls.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 80036a6:	2503      	movs	r5, #3
 80036a8:	e002      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 80036aa:	2600      	movs	r6, #0
 80036ac:	e7e9      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036ae:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 80036b0:	bb45      	cbnz	r5, 8003704 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036b2:	4b9a      	ldr	r3, [pc, #616]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036b8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80036bc:	d015      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x96>
 80036be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d012      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036c4:	4a95      	ldr	r2, [pc, #596]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80036c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80036ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036ce:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80036d2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80036d6:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036da:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80036de:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80036e2:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036ea:	f013 0f01 	tst.w	r3, #1
 80036ee:	d110      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 80036f0:	b945      	cbnz	r5, 8003704 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036f2:	4a8a      	ldr	r2, [pc, #552]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80036f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80036f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80036fe:	430b      	orrs	r3, r1
 8003700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003704:	b1c6      	cbz	r6, 8003738 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003706:	4a85      	ldr	r2, [pc, #532]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003708:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800370a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370e:	6593      	str	r3, [r2, #88]	; 0x58
 8003710:	e012      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 8003712:	f7fe f849 	bl	80017a8 <HAL_GetTick>
 8003716:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003718:	4b80      	ldr	r3, [pc, #512]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f013 0f02 	tst.w	r3, #2
 8003722:	d1e5      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003724:	f7fe f840 	bl	80017a8 <HAL_GetTick>
 8003728:	1bc0      	subs	r0, r0, r7
 800372a:	f241 3388 	movw	r3, #5000	; 0x1388
 800372e:	4298      	cmp	r0, r3
 8003730:	d9f2      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 8003732:	2503      	movs	r5, #3
 8003734:	e7dc      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003736:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	f013 0f01 	tst.w	r3, #1
 800373e:	d008      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003740:	4a76      	ldr	r2, [pc, #472]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003742:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003746:	f023 0303 	bic.w	r3, r3, #3
 800374a:	6861      	ldr	r1, [r4, #4]
 800374c:	430b      	orrs	r3, r1
 800374e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	f013 0f02 	tst.w	r3, #2
 8003758:	d008      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800375a:	4a70      	ldr	r2, [pc, #448]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800375c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003760:	f023 030c 	bic.w	r3, r3, #12
 8003764:	68a1      	ldr	r1, [r4, #8]
 8003766:	430b      	orrs	r3, r1
 8003768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	f013 0f04 	tst.w	r3, #4
 8003772:	d008      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003774:	4a69      	ldr	r2, [pc, #420]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003776:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800377a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800377e:	68e1      	ldr	r1, [r4, #12]
 8003780:	430b      	orrs	r3, r1
 8003782:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	f013 0f08 	tst.w	r3, #8
 800378c:	d008      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800378e:	4a63      	ldr	r2, [pc, #396]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003790:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003794:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003798:	6921      	ldr	r1, [r4, #16]
 800379a:	430b      	orrs	r3, r1
 800379c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	f013 0f20 	tst.w	r3, #32
 80037a6:	d008      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037a8:	4a5c      	ldr	r2, [pc, #368]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80037aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80037ae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037b2:	6961      	ldr	r1, [r4, #20]
 80037b4:	430b      	orrs	r3, r1
 80037b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037c0:	d008      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037c2:	4a56      	ldr	r2, [pc, #344]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80037c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80037c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037cc:	69a1      	ldr	r1, [r4, #24]
 80037ce:	430b      	orrs	r3, r1
 80037d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80037da:	d008      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037dc:	4a4f      	ldr	r2, [pc, #316]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80037de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80037e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80037e6:	69e1      	ldr	r1, [r4, #28]
 80037e8:	430b      	orrs	r3, r1
 80037ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80037f4:	d008      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037f6:	4a49      	ldr	r2, [pc, #292]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80037f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80037fc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003800:	6a21      	ldr	r1, [r4, #32]
 8003802:	430b      	orrs	r3, r1
 8003804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800380e:	d008      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003810:	4a42      	ldr	r2, [pc, #264]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003812:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003816:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800381a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800381c:	430b      	orrs	r3, r1
 800381e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003828:	d00c      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800382a:	4a3c      	ldr	r2, [pc, #240]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800382c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003830:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003834:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003836:	430b      	orrs	r3, r1
 8003838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800383c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800383e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003842:	d057      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800384a:	d00c      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800384c:	4a33      	ldr	r2, [pc, #204]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800384e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003852:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003856:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003858:	430b      	orrs	r3, r1
 800385a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800385e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003864:	d04b      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800386c:	d00c      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800386e:	4a2b      	ldr	r2, [pc, #172]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003870:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003874:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003878:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800387a:	430b      	orrs	r3, r1
 800387c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003880:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003882:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003886:	d03f      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800388e:	d00c      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003890:	4a22      	ldr	r2, [pc, #136]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003892:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003896:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800389a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800389c:	430b      	orrs	r3, r1
 800389e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a8:	d033      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80038b0:	d00c      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038b2:	4a1a      	ldr	r2, [pc, #104]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80038b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038b8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80038bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80038be:	430b      	orrs	r3, r1
 80038c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ca:	d02b      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80038d2:	d00c      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038d4:	4a11      	ldr	r2, [pc, #68]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80038d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038da:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80038de:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80038e0:	430b      	orrs	r3, r1
 80038e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80038e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ec:	d01f      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  }

#endif /* QUADSPI */

  return status;
}
 80038ee:	4628      	mov	r0, r5
 80038f0:	b003      	add	sp, #12
 80038f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f4:	68d3      	ldr	r3, [r2, #12]
 80038f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038fa:	60d3      	str	r3, [r2, #12]
 80038fc:	e7a2      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038fe:	68d3      	ldr	r3, [r2, #12]
 8003900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003904:	60d3      	str	r3, [r2, #12]
 8003906:	e7ae      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003908:	68d3      	ldr	r3, [r2, #12]
 800390a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800390e:	60d3      	str	r3, [r2, #12]
 8003910:	e7ba      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003912:	68d3      	ldr	r3, [r2, #12]
 8003914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003918:	60d3      	str	r3, [r2, #12]
 800391a:	e7c6      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x256>
 800391c:	40021000 	.word	0x40021000
 8003920:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003924:	68d3      	ldr	r3, [r2, #12]
 8003926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800392a:	60d3      	str	r3, [r2, #12]
 800392c:	e7ce      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800392e:	68d3      	ldr	r3, [r2, #12]
 8003930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003934:	60d3      	str	r3, [r2, #12]
 8003936:	e7da      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x29a>

08003938 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003938:	2800      	cmp	r0, #0
 800393a:	d06f      	beq.n	8003a1c <HAL_SPI_Init+0xe4>
{
 800393c:	b510      	push	{r4, lr}
 800393e:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003940:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003942:	b933      	cbnz	r3, 8003952 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003944:	6843      	ldr	r3, [r0, #4]
 8003946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800394a:	d005      	beq.n	8003958 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800394c:	2300      	movs	r3, #0
 800394e:	61c3      	str	r3, [r0, #28]
 8003950:	e002      	b.n	8003958 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003952:	2300      	movs	r3, #0
 8003954:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003956:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003958:	2300      	movs	r3, #0
 800395a:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800395c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003960:	2b00      	cmp	r3, #0
 8003962:	d052      	beq.n	8003a0a <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003964:	2302      	movs	r3, #2
 8003966:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800396a:	6822      	ldr	r2, [r4, #0]
 800396c:	6813      	ldr	r3, [r2, #0]
 800396e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003972:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003974:	68e3      	ldr	r3, [r4, #12]
 8003976:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800397a:	d94c      	bls.n	8003a16 <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800397c:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800397e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003982:	d004      	beq.n	800398e <HAL_SPI_Init+0x56>
 8003984:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003988:	d001      	beq.n	800398e <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800398a:	2300      	movs	r3, #0
 800398c:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800398e:	6863      	ldr	r3, [r4, #4]
 8003990:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003994:	68a1      	ldr	r1, [r4, #8]
 8003996:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800399a:	430b      	orrs	r3, r1
 800399c:	6921      	ldr	r1, [r4, #16]
 800399e:	f001 0102 	and.w	r1, r1, #2
 80039a2:	430b      	orrs	r3, r1
 80039a4:	6961      	ldr	r1, [r4, #20]
 80039a6:	f001 0101 	and.w	r1, r1, #1
 80039aa:	430b      	orrs	r3, r1
 80039ac:	69a1      	ldr	r1, [r4, #24]
 80039ae:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80039b2:	430b      	orrs	r3, r1
 80039b4:	69e1      	ldr	r1, [r4, #28]
 80039b6:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80039ba:	430b      	orrs	r3, r1
 80039bc:	6a21      	ldr	r1, [r4, #32]
 80039be:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80039c2:	430b      	orrs	r3, r1
 80039c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80039c6:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80039ca:	6820      	ldr	r0, [r4, #0]
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039d0:	8b63      	ldrh	r3, [r4, #26]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80039d8:	f001 0110 	and.w	r1, r1, #16
 80039dc:	430b      	orrs	r3, r1
 80039de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039e0:	f001 0108 	and.w	r1, r1, #8
 80039e4:	430b      	orrs	r3, r1
 80039e6:	68e1      	ldr	r1, [r4, #12]
 80039e8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6821      	ldr	r1, [r4, #0]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039f4:	6822      	ldr	r2, [r4, #0]
 80039f6:	69d3      	ldr	r3, [r2, #28]
 80039f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039fc:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039fe:	2000      	movs	r0, #0
 8003a00:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8003a08:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003a0a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7fd fd70 	bl	80014f4 <HAL_SPI_MspInit>
 8003a14:	e7a6      	b.n	8003964 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a1a:	e7b0      	b.n	800397e <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003a1c:	2001      	movs	r0, #1
}
 8003a1e:	4770      	bx	lr

08003a20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a20:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a22:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a24:	6a02      	ldr	r2, [r0, #32]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a2c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a2e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a34:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a38:	680c      	ldr	r4, [r1, #0]
 8003a3a:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a3c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a40:	688c      	ldr	r4, [r1, #8]
 8003a42:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a44:	4c1d      	ldr	r4, [pc, #116]	; (8003abc <TIM_OC1_SetConfig+0x9c>)
 8003a46:	42a0      	cmp	r0, r4
 8003a48:	d00f      	beq.n	8003a6a <TIM_OC1_SetConfig+0x4a>
 8003a4a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003a4e:	42a0      	cmp	r0, r4
 8003a50:	d00b      	beq.n	8003a6a <TIM_OC1_SetConfig+0x4a>
 8003a52:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8003a56:	42a0      	cmp	r0, r4
 8003a58:	d007      	beq.n	8003a6a <TIM_OC1_SetConfig+0x4a>
 8003a5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003a5e:	42a0      	cmp	r0, r4
 8003a60:	d003      	beq.n	8003a6a <TIM_OC1_SetConfig+0x4a>
 8003a62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003a66:	42a0      	cmp	r0, r4
 8003a68:	d105      	bne.n	8003a76 <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a6a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a6e:	68cc      	ldr	r4, [r1, #12]
 8003a70:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a72:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a76:	4c11      	ldr	r4, [pc, #68]	; (8003abc <TIM_OC1_SetConfig+0x9c>)
 8003a78:	42a0      	cmp	r0, r4
 8003a7a:	d00f      	beq.n	8003a9c <TIM_OC1_SetConfig+0x7c>
 8003a7c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003a80:	42a0      	cmp	r0, r4
 8003a82:	d00b      	beq.n	8003a9c <TIM_OC1_SetConfig+0x7c>
 8003a84:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8003a88:	42a0      	cmp	r0, r4
 8003a8a:	d007      	beq.n	8003a9c <TIM_OC1_SetConfig+0x7c>
 8003a8c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003a90:	42a0      	cmp	r0, r4
 8003a92:	d003      	beq.n	8003a9c <TIM_OC1_SetConfig+0x7c>
 8003a94:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003a98:	42a0      	cmp	r0, r4
 8003a9a:	d107      	bne.n	8003aac <TIM_OC1_SetConfig+0x8c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a9c:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003aa0:	694c      	ldr	r4, [r1, #20]
 8003aa2:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aa6:	698d      	ldr	r5, [r1, #24]
 8003aa8:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aac:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aae:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ab0:	684a      	ldr	r2, [r1, #4]
 8003ab2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab4:	6203      	str	r3, [r0, #32]
}
 8003ab6:	bc30      	pop	{r4, r5}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40012c00 	.word	0x40012c00

08003ac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ac4:	6a02      	ldr	r2, [r0, #32]
 8003ac6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aca:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003acc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ace:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ad0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ad4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad8:	680d      	ldr	r5, [r1, #0]
 8003ada:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ae0:	688d      	ldr	r5, [r1, #8]
 8003ae2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ae6:	4d18      	ldr	r5, [pc, #96]	; (8003b48 <TIM_OC3_SetConfig+0x88>)
 8003ae8:	42a8      	cmp	r0, r5
 8003aea:	d003      	beq.n	8003af4 <TIM_OC3_SetConfig+0x34>
 8003aec:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003af0:	42a8      	cmp	r0, r5
 8003af2:	d106      	bne.n	8003b02 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003af8:	68cd      	ldr	r5, [r1, #12]
 8003afa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b02:	4d11      	ldr	r5, [pc, #68]	; (8003b48 <TIM_OC3_SetConfig+0x88>)
 8003b04:	42a8      	cmp	r0, r5
 8003b06:	d00f      	beq.n	8003b28 <TIM_OC3_SetConfig+0x68>
 8003b08:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003b0c:	42a8      	cmp	r0, r5
 8003b0e:	d00b      	beq.n	8003b28 <TIM_OC3_SetConfig+0x68>
 8003b10:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003b14:	42a8      	cmp	r0, r5
 8003b16:	d007      	beq.n	8003b28 <TIM_OC3_SetConfig+0x68>
 8003b18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b1c:	42a8      	cmp	r0, r5
 8003b1e:	d003      	beq.n	8003b28 <TIM_OC3_SetConfig+0x68>
 8003b20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b24:	42a8      	cmp	r0, r5
 8003b26:	d107      	bne.n	8003b38 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b28:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b2c:	694c      	ldr	r4, [r1, #20]
 8003b2e:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b32:	698c      	ldr	r4, [r1, #24]
 8003b34:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b38:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b3a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b3c:	684a      	ldr	r2, [r1, #4]
 8003b3e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b40:	6203      	str	r3, [r0, #32]
}
 8003b42:	bc30      	pop	{r4, r5}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40012c00 	.word	0x40012c00

08003b4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b4c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b4e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b50:	6a02      	ldr	r2, [r0, #32]
 8003b52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b56:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b58:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b5a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b5c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003b60:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b64:	680d      	ldr	r5, [r1, #0]
 8003b66:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b6e:	688d      	ldr	r5, [r1, #8]
 8003b70:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003b74:	4d17      	ldr	r5, [pc, #92]	; (8003bd4 <TIM_OC4_SetConfig+0x88>)
 8003b76:	42a8      	cmp	r0, r5
 8003b78:	d003      	beq.n	8003b82 <TIM_OC4_SetConfig+0x36>
 8003b7a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003b7e:	42a8      	cmp	r0, r5
 8003b80:	d106      	bne.n	8003b90 <TIM_OC4_SetConfig+0x44>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003b82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003b86:	68cd      	ldr	r5, [r1, #12]
 8003b88:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003b8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b90:	4d10      	ldr	r5, [pc, #64]	; (8003bd4 <TIM_OC4_SetConfig+0x88>)
 8003b92:	42a8      	cmp	r0, r5
 8003b94:	d00f      	beq.n	8003bb6 <TIM_OC4_SetConfig+0x6a>
 8003b96:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003b9a:	42a8      	cmp	r0, r5
 8003b9c:	d00b      	beq.n	8003bb6 <TIM_OC4_SetConfig+0x6a>
 8003b9e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003ba2:	42a8      	cmp	r0, r5
 8003ba4:	d007      	beq.n	8003bb6 <TIM_OC4_SetConfig+0x6a>
 8003ba6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003baa:	42a8      	cmp	r0, r5
 8003bac:	d003      	beq.n	8003bb6 <TIM_OC4_SetConfig+0x6a>
 8003bae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003bb2:	42a8      	cmp	r0, r5
 8003bb4:	d107      	bne.n	8003bc6 <TIM_OC4_SetConfig+0x7a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003bb6:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bba:	694c      	ldr	r4, [r1, #20]
 8003bbc:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003bc0:	698c      	ldr	r4, [r1, #24]
 8003bc2:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bca:	684a      	ldr	r2, [r1, #4]
 8003bcc:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bce:	6203      	str	r3, [r0, #32]
}
 8003bd0:	bc30      	pop	{r4, r5}
 8003bd2:	4770      	bx	lr
 8003bd4:	40012c00 	.word	0x40012c00

08003bd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bda:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003bdc:	6a02      	ldr	r2, [r0, #32]
 8003bde:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003be2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003be6:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003be8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003bec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bf0:	680d      	ldr	r5, [r1, #0]
 8003bf2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003bf4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003bf8:	688d      	ldr	r5, [r1, #8]
 8003bfa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfe:	4d0f      	ldr	r5, [pc, #60]	; (8003c3c <TIM_OC5_SetConfig+0x64>)
 8003c00:	42a8      	cmp	r0, r5
 8003c02:	d00f      	beq.n	8003c24 <TIM_OC5_SetConfig+0x4c>
 8003c04:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003c08:	42a8      	cmp	r0, r5
 8003c0a:	d00b      	beq.n	8003c24 <TIM_OC5_SetConfig+0x4c>
 8003c0c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003c10:	42a8      	cmp	r0, r5
 8003c12:	d007      	beq.n	8003c24 <TIM_OC5_SetConfig+0x4c>
 8003c14:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c18:	42a8      	cmp	r0, r5
 8003c1a:	d003      	beq.n	8003c24 <TIM_OC5_SetConfig+0x4c>
 8003c1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c20:	42a8      	cmp	r0, r5
 8003c22:	d104      	bne.n	8003c2e <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c24:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c28:	694d      	ldr	r5, [r1, #20]
 8003c2a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c30:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c32:	684a      	ldr	r2, [r1, #4]
 8003c34:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c36:	6203      	str	r3, [r0, #32]
}
 8003c38:	bc30      	pop	{r4, r5}
 8003c3a:	4770      	bx	lr
 8003c3c:	40012c00 	.word	0x40012c00

08003c40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c42:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c44:	6a02      	ldr	r2, [r0, #32]
 8003c46:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003c4a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c4e:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c50:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003c54:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c58:	680d      	ldr	r5, [r1, #0]
 8003c5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c62:	688d      	ldr	r5, [r1, #8]
 8003c64:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c68:	4d0f      	ldr	r5, [pc, #60]	; (8003ca8 <TIM_OC6_SetConfig+0x68>)
 8003c6a:	42a8      	cmp	r0, r5
 8003c6c:	d00f      	beq.n	8003c8e <TIM_OC6_SetConfig+0x4e>
 8003c6e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003c72:	42a8      	cmp	r0, r5
 8003c74:	d00b      	beq.n	8003c8e <TIM_OC6_SetConfig+0x4e>
 8003c76:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003c7a:	42a8      	cmp	r0, r5
 8003c7c:	d007      	beq.n	8003c8e <TIM_OC6_SetConfig+0x4e>
 8003c7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c82:	42a8      	cmp	r0, r5
 8003c84:	d003      	beq.n	8003c8e <TIM_OC6_SetConfig+0x4e>
 8003c86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c8a:	42a8      	cmp	r0, r5
 8003c8c:	d104      	bne.n	8003c98 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c8e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c92:	694d      	ldr	r5, [r1, #20]
 8003c94:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c98:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c9a:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c9c:	684a      	ldr	r2, [r1, #4]
 8003c9e:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca0:	6203      	str	r3, [r0, #32]
}
 8003ca2:	bc30      	pop	{r4, r5}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40012c00 	.word	0x40012c00

08003cac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cac:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cae:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cb0:	6a04      	ldr	r4, [r0, #32]
 8003cb2:	f024 0410 	bic.w	r4, r4, #16
 8003cb6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb8:	6984      	ldr	r4, [r0, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003cba:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003cbe:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cc2:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003cc6:	031b      	lsls	r3, r3, #12
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cce:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003cd2:	0109      	lsls	r1, r1, #4
 8003cd4:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
 8003cd8:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cda:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003cdc:	6201      	str	r1, [r0, #32]
}
 8003cde:	bc30      	pop	{r4, r5}
 8003ce0:	4770      	bx	lr

08003ce2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ce2:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003ce4:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ce6:	6a04      	ldr	r4, [r0, #32]
 8003ce8:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8003cec:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cee:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003cf0:	f024 0c03 	bic.w	ip, r4, #3
  tmpccmr2 |= TIM_ICSelection;
 8003cf4:	ea4c 0c02 	orr.w	ip, ip, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003cf8:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d04:	f425 6520 	bic.w	r5, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d08:	0209      	lsls	r1, r1, #8
 8003d0a:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
 8003d0e:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d10:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer;
 8003d12:	6201      	str	r1, [r0, #32]
}
 8003d14:	bc30      	pop	{r4, r5}
 8003d16:	4770      	bx	lr

08003d18 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d18:	b430      	push	{r4, r5}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003d1a:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d1c:	6a04      	ldr	r4, [r0, #32]
 8003d1e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8003d22:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d24:	69c4      	ldr	r4, [r0, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d26:	f424 7c40 	bic.w	ip, r4, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d2a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d2e:	f42c 4c70 	bic.w	ip, ip, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d32:	031b      	lsls	r3, r3, #12
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	ea43 030c 	orr.w	r3, r3, ip

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d3a:	f425 4520 	bic.w	r5, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d3e:	0309      	lsls	r1, r1, #12
 8003d40:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
 8003d44:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d46:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003d48:	6201      	str	r1, [r0, #32]
}
 8003d4a:	bc30      	pop	{r4, r5}
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003d50:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d132      	bne.n	8003dc0 <HAL_TIM_Base_Start_IT+0x70>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d60:	6802      	ldr	r2, [r0, #0]
 8003d62:	68d3      	ldr	r3, [r2, #12]
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d6a:	6803      	ldr	r3, [r0, #0]
 8003d6c:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <HAL_TIM_Base_Start_IT+0x7c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d018      	beq.n	8003da4 <HAL_TIM_Base_Start_IT+0x54>
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d015      	beq.n	8003da4 <HAL_TIM_Base_Start_IT+0x54>
 8003d78:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d011      	beq.n	8003da4 <HAL_TIM_Base_Start_IT+0x54>
 8003d80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00d      	beq.n	8003da4 <HAL_TIM_Base_Start_IT+0x54>
 8003d88:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_TIM_Base_Start_IT+0x54>
 8003d90:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d005      	beq.n	8003da4 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003da0:	2000      	movs	r0, #0
 8003da2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da4:	6899      	ldr	r1, [r3, #8]
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <HAL_TIM_Base_Start_IT+0x80>)
 8003da8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003daa:	2a06      	cmp	r2, #6
 8003dac:	d00a      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0x74>
 8003dae:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003db2:	d009      	beq.n	8003dc8 <HAL_TIM_Base_Start_IT+0x78>
      __HAL_TIM_ENABLE(htim);
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	4770      	bx	lr
    return HAL_ERROR;
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	4770      	bx	lr
  return HAL_OK;
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	4770      	bx	lr
 8003dc8:	2000      	movs	r0, #0
}
 8003dca:	4770      	bx	lr
 8003dcc:	40012c00 	.word	0x40012c00
 8003dd0:	00010007 	.word	0x00010007

08003dd4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003dd4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd6:	4a30      	ldr	r2, [pc, #192]	; (8003e98 <TIM_Base_SetConfig+0xc4>)
 8003dd8:	4290      	cmp	r0, r2
 8003dda:	d00e      	beq.n	8003dfa <TIM_Base_SetConfig+0x26>
 8003ddc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003de0:	d00b      	beq.n	8003dfa <TIM_Base_SetConfig+0x26>
 8003de2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003de6:	4290      	cmp	r0, r2
 8003de8:	d007      	beq.n	8003dfa <TIM_Base_SetConfig+0x26>
 8003dea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dee:	4290      	cmp	r0, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_Base_SetConfig+0x26>
 8003df2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003df6:	4290      	cmp	r0, r2
 8003df8:	d103      	bne.n	8003e02 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003dfe:	684a      	ldr	r2, [r1, #4]
 8003e00:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e02:	4a25      	ldr	r2, [pc, #148]	; (8003e98 <TIM_Base_SetConfig+0xc4>)
 8003e04:	4290      	cmp	r0, r2
 8003e06:	d01a      	beq.n	8003e3e <TIM_Base_SetConfig+0x6a>
 8003e08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003e0c:	d017      	beq.n	8003e3e <TIM_Base_SetConfig+0x6a>
 8003e0e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003e12:	4290      	cmp	r0, r2
 8003e14:	d013      	beq.n	8003e3e <TIM_Base_SetConfig+0x6a>
 8003e16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e1a:	4290      	cmp	r0, r2
 8003e1c:	d00f      	beq.n	8003e3e <TIM_Base_SetConfig+0x6a>
 8003e1e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003e22:	4290      	cmp	r0, r2
 8003e24:	d00b      	beq.n	8003e3e <TIM_Base_SetConfig+0x6a>
 8003e26:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003e2a:	4290      	cmp	r0, r2
 8003e2c:	d007      	beq.n	8003e3e <TIM_Base_SetConfig+0x6a>
 8003e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e32:	4290      	cmp	r0, r2
 8003e34:	d003      	beq.n	8003e3e <TIM_Base_SetConfig+0x6a>
 8003e36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e3a:	4290      	cmp	r0, r2
 8003e3c:	d103      	bne.n	8003e46 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e42:	68ca      	ldr	r2, [r1, #12]
 8003e44:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e4a:	694a      	ldr	r2, [r1, #20]
 8003e4c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003e4e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e50:	688b      	ldr	r3, [r1, #8]
 8003e52:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e54:	680b      	ldr	r3, [r1, #0]
 8003e56:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e58:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <TIM_Base_SetConfig+0xc4>)
 8003e5a:	4298      	cmp	r0, r3
 8003e5c:	d00f      	beq.n	8003e7e <TIM_Base_SetConfig+0xaa>
 8003e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e62:	4298      	cmp	r0, r3
 8003e64:	d00b      	beq.n	8003e7e <TIM_Base_SetConfig+0xaa>
 8003e66:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003e6a:	4298      	cmp	r0, r3
 8003e6c:	d007      	beq.n	8003e7e <TIM_Base_SetConfig+0xaa>
 8003e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e72:	4298      	cmp	r0, r3
 8003e74:	d003      	beq.n	8003e7e <TIM_Base_SetConfig+0xaa>
 8003e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e7a:	4298      	cmp	r0, r3
 8003e7c:	d101      	bne.n	8003e82 <TIM_Base_SetConfig+0xae>
    TIMx->RCR = Structure->RepetitionCounter;
 8003e7e:	690b      	ldr	r3, [r1, #16]
 8003e80:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003e82:	2301      	movs	r3, #1
 8003e84:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e86:	6903      	ldr	r3, [r0, #16]
 8003e88:	f013 0f01 	tst.w	r3, #1
 8003e8c:	d003      	beq.n	8003e96 <TIM_Base_SetConfig+0xc2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e8e:	6903      	ldr	r3, [r0, #16]
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	6103      	str	r3, [r0, #16]
}
 8003e96:	4770      	bx	lr
 8003e98:	40012c00 	.word	0x40012c00

08003e9c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003e9c:	b360      	cbz	r0, 8003ef8 <HAL_TIM_PWM_Init+0x5c>
{
 8003e9e:	b510      	push	{r4, lr}
 8003ea0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ea6:	b313      	cbz	r3, 8003eee <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eae:	4621      	mov	r1, r4
 8003eb0:	f851 0b04 	ldr.w	r0, [r1], #4
 8003eb4:	f7ff ff8e 	bl	8003dd4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003ec2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003ec6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003eca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003ece:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ed2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003eda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ede:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003ee2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003ee6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003eea:	2000      	movs	r0, #0
}
 8003eec:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003eee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003ef2:	f7fd fb31 	bl	8001558 <HAL_TIM_PWM_MspInit>
 8003ef6:	e7d7      	b.n	8003ea8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003ef8:	2001      	movs	r0, #1
}
 8003efa:	4770      	bx	lr

08003efc <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8003efc:	b360      	cbz	r0, 8003f58 <HAL_TIM_IC_Init+0x5c>
{
 8003efe:	b510      	push	{r4, lr}
 8003f00:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f06:	b313      	cbz	r3, 8003f4e <HAL_TIM_IC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0e:	4621      	mov	r1, r4
 8003f10:	f851 0b04 	ldr.w	r0, [r1], #4
 8003f14:	f7ff ff5e 	bl	8003dd4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003f22:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003f26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003f2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003f2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003f3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f3e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003f42:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003f46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003f4a:	2000      	movs	r0, #0
}
 8003f4c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003f4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8003f52:	f7fd fb17 	bl	8001584 <HAL_TIM_IC_MspInit>
 8003f56:	e7d7      	b.n	8003f08 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
 8003f58:	2001      	movs	r0, #1
}
 8003f5a:	4770      	bx	lr

08003f5c <TIM_OC2_SetConfig>:
{
 8003f5c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8003f5e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f60:	6a02      	ldr	r2, [r0, #32]
 8003f62:	f022 0210 	bic.w	r2, r2, #16
 8003f66:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003f68:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003f6a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f6c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003f70:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f74:	680d      	ldr	r5, [r1, #0]
 8003f76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003f7a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f7e:	688d      	ldr	r5, [r1, #8]
 8003f80:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f84:	4d17      	ldr	r5, [pc, #92]	; (8003fe4 <TIM_OC2_SetConfig+0x88>)
 8003f86:	42a8      	cmp	r0, r5
 8003f88:	d003      	beq.n	8003f92 <TIM_OC2_SetConfig+0x36>
 8003f8a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003f8e:	42a8      	cmp	r0, r5
 8003f90:	d106      	bne.n	8003fa0 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f96:	68cd      	ldr	r5, [r1, #12]
 8003f98:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa0:	4d10      	ldr	r5, [pc, #64]	; (8003fe4 <TIM_OC2_SetConfig+0x88>)
 8003fa2:	42a8      	cmp	r0, r5
 8003fa4:	d00f      	beq.n	8003fc6 <TIM_OC2_SetConfig+0x6a>
 8003fa6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003faa:	42a8      	cmp	r0, r5
 8003fac:	d00b      	beq.n	8003fc6 <TIM_OC2_SetConfig+0x6a>
 8003fae:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003fb2:	42a8      	cmp	r0, r5
 8003fb4:	d007      	beq.n	8003fc6 <TIM_OC2_SetConfig+0x6a>
 8003fb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fba:	42a8      	cmp	r0, r5
 8003fbc:	d003      	beq.n	8003fc6 <TIM_OC2_SetConfig+0x6a>
 8003fbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003fc2:	42a8      	cmp	r0, r5
 8003fc4:	d107      	bne.n	8003fd6 <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fc6:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fca:	694c      	ldr	r4, [r1, #20]
 8003fcc:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fd0:	698c      	ldr	r4, [r1, #24]
 8003fd2:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8003fd6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003fd8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003fda:	684a      	ldr	r2, [r1, #4]
 8003fdc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003fde:	6203      	str	r3, [r0, #32]
}
 8003fe0:	bc30      	pop	{r4, r5}
 8003fe2:	4770      	bx	lr
 8003fe4:	40012c00 	.word	0x40012c00

08003fe8 <HAL_TIM_PWM_ConfigChannel>:
{
 8003fe8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003fea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	f000 8095 	beq.w	800411e <HAL_TIM_PWM_ConfigChannel+0x136>
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	460d      	mov	r5, r1
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003ffe:	2a14      	cmp	r2, #20
 8004000:	f200 8088 	bhi.w	8004114 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8004004:	e8df f002 	tbb	[pc, r2]
 8004008:	8686860b 	.word	0x8686860b
 800400c:	8686861f 	.word	0x8686861f
 8004010:	86868634 	.word	0x86868634
 8004014:	86868648 	.word	0x86868648
 8004018:	8686865d 	.word	0x8686865d
 800401c:	71          	.byte	0x71
 800401d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800401e:	6800      	ldr	r0, [r0, #0]
 8004020:	f7ff fcfe 	bl	8003a20 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004024:	6822      	ldr	r2, [r4, #0]
 8004026:	6993      	ldr	r3, [r2, #24]
 8004028:	f043 0308 	orr.w	r3, r3, #8
 800402c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	6993      	ldr	r3, [r2, #24]
 8004032:	f023 0304 	bic.w	r3, r3, #4
 8004036:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004038:	6822      	ldr	r2, [r4, #0]
 800403a:	6993      	ldr	r3, [r2, #24]
 800403c:	6929      	ldr	r1, [r5, #16]
 800403e:	430b      	orrs	r3, r1
 8004040:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004042:	2000      	movs	r0, #0
      break;
 8004044:	e067      	b.n	8004116 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004046:	6800      	ldr	r0, [r0, #0]
 8004048:	f7ff ff88 	bl	8003f5c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800404c:	6822      	ldr	r2, [r4, #0]
 800404e:	6993      	ldr	r3, [r2, #24]
 8004050:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004054:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	6993      	ldr	r3, [r2, #24]
 800405a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800405e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004060:	6822      	ldr	r2, [r4, #0]
 8004062:	6993      	ldr	r3, [r2, #24]
 8004064:	6929      	ldr	r1, [r5, #16]
 8004066:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800406a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800406c:	2000      	movs	r0, #0
      break;
 800406e:	e052      	b.n	8004116 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004070:	6800      	ldr	r0, [r0, #0]
 8004072:	f7ff fd25 	bl	8003ac0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	69d3      	ldr	r3, [r2, #28]
 800407a:	f043 0308 	orr.w	r3, r3, #8
 800407e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004080:	6822      	ldr	r2, [r4, #0]
 8004082:	69d3      	ldr	r3, [r2, #28]
 8004084:	f023 0304 	bic.w	r3, r3, #4
 8004088:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	69d3      	ldr	r3, [r2, #28]
 800408e:	6929      	ldr	r1, [r5, #16]
 8004090:	430b      	orrs	r3, r1
 8004092:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004094:	2000      	movs	r0, #0
      break;
 8004096:	e03e      	b.n	8004116 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004098:	6800      	ldr	r0, [r0, #0]
 800409a:	f7ff fd57 	bl	8003b4c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800409e:	6822      	ldr	r2, [r4, #0]
 80040a0:	69d3      	ldr	r3, [r2, #28]
 80040a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040a6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040a8:	6822      	ldr	r2, [r4, #0]
 80040aa:	69d3      	ldr	r3, [r2, #28]
 80040ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040b0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	69d3      	ldr	r3, [r2, #28]
 80040b6:	6929      	ldr	r1, [r5, #16]
 80040b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80040bc:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80040be:	2000      	movs	r0, #0
      break;
 80040c0:	e029      	b.n	8004116 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040c2:	6800      	ldr	r0, [r0, #0]
 80040c4:	f7ff fd88 	bl	8003bd8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040c8:	6822      	ldr	r2, [r4, #0]
 80040ca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80040cc:	f043 0308 	orr.w	r3, r3, #8
 80040d0:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040d2:	6822      	ldr	r2, [r4, #0]
 80040d4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80040d6:	f023 0304 	bic.w	r3, r3, #4
 80040da:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040dc:	6822      	ldr	r2, [r4, #0]
 80040de:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80040e0:	6929      	ldr	r1, [r5, #16]
 80040e2:	430b      	orrs	r3, r1
 80040e4:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80040e6:	2000      	movs	r0, #0
      break;
 80040e8:	e015      	b.n	8004116 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040ea:	6800      	ldr	r0, [r0, #0]
 80040ec:	f7ff fda8 	bl	8003c40 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040f0:	6822      	ldr	r2, [r4, #0]
 80040f2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80040f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040f8:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040fa:	6822      	ldr	r2, [r4, #0]
 80040fc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80040fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004102:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004104:	6822      	ldr	r2, [r4, #0]
 8004106:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004108:	6929      	ldr	r1, [r5, #16]
 800410a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800410e:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8004110:	2000      	movs	r0, #0
      break;
 8004112:	e000      	b.n	8004116 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8004114:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004116:	2300      	movs	r3, #0
 8004118:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800411c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800411e:	2002      	movs	r0, #2
 8004120:	e7fc      	b.n	800411c <HAL_TIM_PWM_ConfigChannel+0x134>
	...

08004124 <TIM_TI1_SetConfig>:
{
 8004124:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8004126:	6a06      	ldr	r6, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004128:	6a04      	ldr	r4, [r0, #32]
 800412a:	f024 0401 	bic.w	r4, r4, #1
 800412e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004130:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004132:	4d15      	ldr	r5, [pc, #84]	; (8004188 <TIM_TI1_SetConfig+0x64>)
 8004134:	42a8      	cmp	r0, r5
 8004136:	d015      	beq.n	8004164 <TIM_TI1_SetConfig+0x40>
 8004138:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800413c:	d012      	beq.n	8004164 <TIM_TI1_SetConfig+0x40>
 800413e:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 8004142:	42a8      	cmp	r0, r5
 8004144:	d00e      	beq.n	8004164 <TIM_TI1_SetConfig+0x40>
 8004146:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800414a:	42a8      	cmp	r0, r5
 800414c:	d00a      	beq.n	8004164 <TIM_TI1_SetConfig+0x40>
 800414e:	f505 3596 	add.w	r5, r5, #76800	; 0x12c00
 8004152:	42a8      	cmp	r0, r5
 8004154:	d006      	beq.n	8004164 <TIM_TI1_SetConfig+0x40>
 8004156:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800415a:	42a8      	cmp	r0, r5
 800415c:	d002      	beq.n	8004164 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800415e:	f044 0201 	orr.w	r2, r4, #1
 8004162:	e002      	b.n	800416a <TIM_TI1_SetConfig+0x46>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004164:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8004168:	4322      	orrs	r2, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800416a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	b2db      	uxtb	r3, r3
 8004172:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004174:	f026 020a 	bic.w	r2, r6, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004178:	f001 010a 	and.w	r1, r1, #10
 800417c:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 800417e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004180:	6201      	str	r1, [r0, #32]
}
 8004182:	bc70      	pop	{r4, r5, r6}
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40012c00 	.word	0x40012c00

0800418c <HAL_TIM_IC_ConfigChannel>:
{
 800418c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800418e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004192:	2b01      	cmp	r3, #1
 8004194:	d05a      	beq.n	800424c <HAL_TIM_IC_ConfigChannel+0xc0>
 8004196:	4604      	mov	r4, r0
 8004198:	460d      	mov	r5, r1
 800419a:	2301      	movs	r3, #1
 800419c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80041a0:	b152      	cbz	r2, 80041b8 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 80041a2:	2a04      	cmp	r2, #4
 80041a4:	d01a      	beq.n	80041dc <HAL_TIM_IC_ConfigChannel+0x50>
  else if (Channel == TIM_CHANNEL_3)
 80041a6:	2a08      	cmp	r2, #8
 80041a8:	d02b      	beq.n	8004202 <HAL_TIM_IC_ConfigChannel+0x76>
  else if (Channel == TIM_CHANNEL_4)
 80041aa:	2a0c      	cmp	r2, #12
 80041ac:	d03b      	beq.n	8004226 <HAL_TIM_IC_ConfigChannel+0x9a>
    status = HAL_ERROR;
 80041ae:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80041b0:	2300      	movs	r3, #0
 80041b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80041b8:	68cb      	ldr	r3, [r1, #12]
 80041ba:	684a      	ldr	r2, [r1, #4]
 80041bc:	6809      	ldr	r1, [r1, #0]
 80041be:	6800      	ldr	r0, [r0, #0]
 80041c0:	f7ff ffb0 	bl	8004124 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	6993      	ldr	r3, [r2, #24]
 80041c8:	f023 030c 	bic.w	r3, r3, #12
 80041cc:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80041ce:	6822      	ldr	r2, [r4, #0]
 80041d0:	6993      	ldr	r3, [r2, #24]
 80041d2:	68a9      	ldr	r1, [r5, #8]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80041d8:	2000      	movs	r0, #0
 80041da:	e7e9      	b.n	80041b0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 80041dc:	68cb      	ldr	r3, [r1, #12]
 80041de:	684a      	ldr	r2, [r1, #4]
 80041e0:	6809      	ldr	r1, [r1, #0]
 80041e2:	6800      	ldr	r0, [r0, #0]
 80041e4:	f7ff fd62 	bl	8003cac <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80041e8:	6822      	ldr	r2, [r4, #0]
 80041ea:	6993      	ldr	r3, [r2, #24]
 80041ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80041f0:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80041f2:	6822      	ldr	r2, [r4, #0]
 80041f4:	6993      	ldr	r3, [r2, #24]
 80041f6:	68a9      	ldr	r1, [r5, #8]
 80041f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80041fc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80041fe:	2000      	movs	r0, #0
 8004200:	e7d6      	b.n	80041b0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI3_SetConfig(htim->Instance,
 8004202:	68cb      	ldr	r3, [r1, #12]
 8004204:	684a      	ldr	r2, [r1, #4]
 8004206:	6809      	ldr	r1, [r1, #0]
 8004208:	6800      	ldr	r0, [r0, #0]
 800420a:	f7ff fd6a 	bl	8003ce2 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	69d3      	ldr	r3, [r2, #28]
 8004212:	f023 030c 	bic.w	r3, r3, #12
 8004216:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004218:	6822      	ldr	r2, [r4, #0]
 800421a:	69d3      	ldr	r3, [r2, #28]
 800421c:	68a9      	ldr	r1, [r5, #8]
 800421e:	430b      	orrs	r3, r1
 8004220:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004222:	2000      	movs	r0, #0
 8004224:	e7c4      	b.n	80041b0 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 8004226:	68cb      	ldr	r3, [r1, #12]
 8004228:	684a      	ldr	r2, [r1, #4]
 800422a:	6809      	ldr	r1, [r1, #0]
 800422c:	6800      	ldr	r0, [r0, #0]
 800422e:	f7ff fd73 	bl	8003d18 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	69d3      	ldr	r3, [r2, #28]
 8004236:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800423a:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800423c:	6822      	ldr	r2, [r4, #0]
 800423e:	69d3      	ldr	r3, [r2, #28]
 8004240:	68a9      	ldr	r1, [r5, #8]
 8004242:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004246:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004248:	2000      	movs	r0, #0
 800424a:	e7b1      	b.n	80041b0 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 800424c:	2002      	movs	r0, #2
 800424e:	e7b2      	b.n	80041b6 <HAL_TIM_IC_ConfigChannel+0x2a>

08004250 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004250:	f001 011f 	and.w	r1, r1, #31
 8004254:	2301      	movs	r3, #1
 8004256:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800425a:	6a03      	ldr	r3, [r0, #32]
 800425c:	ea23 030c 	bic.w	r3, r3, ip
 8004260:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004262:	6a03      	ldr	r3, [r0, #32]
 8004264:	fa02 f101 	lsl.w	r1, r2, r1
 8004268:	430b      	orrs	r3, r1
 800426a:	6203      	str	r3, [r0, #32]
}
 800426c:	4770      	bx	lr
	...

08004270 <HAL_TIM_PWM_Start>:
{
 8004270:	b510      	push	{r4, lr}
 8004272:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004274:	4608      	mov	r0, r1
 8004276:	2900      	cmp	r1, #0
 8004278:	d147      	bne.n	800430a <HAL_TIM_PWM_Start+0x9a>
 800427a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800427e:	b2db      	uxtb	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	bf18      	it	ne
 8004284:	2301      	movne	r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	f040 8094 	bne.w	80043b4 <HAL_TIM_PWM_Start+0x144>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800428c:	2800      	cmp	r0, #0
 800428e:	d167      	bne.n	8004360 <HAL_TIM_PWM_Start+0xf0>
 8004290:	2302      	movs	r3, #2
 8004292:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004296:	2201      	movs	r2, #1
 8004298:	4601      	mov	r1, r0
 800429a:	6820      	ldr	r0, [r4, #0]
 800429c:	f7ff ffd8 	bl	8004250 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	4a47      	ldr	r2, [pc, #284]	; (80043c0 <HAL_TIM_PWM_Start+0x150>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00f      	beq.n	80042c8 <HAL_TIM_PWM_Start+0x58>
 80042a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00b      	beq.n	80042c8 <HAL_TIM_PWM_Start+0x58>
 80042b0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d007      	beq.n	80042c8 <HAL_TIM_PWM_Start+0x58>
 80042b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <HAL_TIM_PWM_Start+0x58>
 80042c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d103      	bne.n	80042d0 <HAL_TIM_PWM_Start+0x60>
    __HAL_TIM_MOE_ENABLE(htim);
 80042c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ce:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	4a3b      	ldr	r2, [pc, #236]	; (80043c0 <HAL_TIM_PWM_Start+0x150>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d05f      	beq.n	8004398 <HAL_TIM_PWM_Start+0x128>
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042dc:	d05c      	beq.n	8004398 <HAL_TIM_PWM_Start+0x128>
 80042de:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d058      	beq.n	8004398 <HAL_TIM_PWM_Start+0x128>
 80042e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d054      	beq.n	8004398 <HAL_TIM_PWM_Start+0x128>
 80042ee:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d050      	beq.n	8004398 <HAL_TIM_PWM_Start+0x128>
 80042f6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d04c      	beq.n	8004398 <HAL_TIM_PWM_Start+0x128>
    __HAL_TIM_ENABLE(htim);
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004306:	2000      	movs	r0, #0
 8004308:	e055      	b.n	80043b6 <HAL_TIM_PWM_Start+0x146>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800430a:	2904      	cmp	r1, #4
 800430c:	d00c      	beq.n	8004328 <HAL_TIM_PWM_Start+0xb8>
 800430e:	2908      	cmp	r1, #8
 8004310:	d011      	beq.n	8004336 <HAL_TIM_PWM_Start+0xc6>
 8004312:	290c      	cmp	r1, #12
 8004314:	d016      	beq.n	8004344 <HAL_TIM_PWM_Start+0xd4>
 8004316:	2910      	cmp	r1, #16
 8004318:	d01b      	beq.n	8004352 <HAL_TIM_PWM_Start+0xe2>
 800431a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800431e:	b2db      	uxtb	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	bf18      	it	ne
 8004324:	2301      	movne	r3, #1
 8004326:	e7ae      	b.n	8004286 <HAL_TIM_PWM_Start+0x16>
 8004328:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800432c:	b2db      	uxtb	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	bf18      	it	ne
 8004332:	2301      	movne	r3, #1
 8004334:	e7a7      	b.n	8004286 <HAL_TIM_PWM_Start+0x16>
 8004336:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800433a:	b2db      	uxtb	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	bf18      	it	ne
 8004340:	2301      	movne	r3, #1
 8004342:	e7a0      	b.n	8004286 <HAL_TIM_PWM_Start+0x16>
 8004344:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004348:	b2db      	uxtb	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	bf18      	it	ne
 800434e:	2301      	movne	r3, #1
 8004350:	e799      	b.n	8004286 <HAL_TIM_PWM_Start+0x16>
 8004352:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8004356:	b2db      	uxtb	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	bf18      	it	ne
 800435c:	2301      	movne	r3, #1
 800435e:	e792      	b.n	8004286 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004360:	2804      	cmp	r0, #4
 8004362:	d009      	beq.n	8004378 <HAL_TIM_PWM_Start+0x108>
 8004364:	2808      	cmp	r0, #8
 8004366:	d00b      	beq.n	8004380 <HAL_TIM_PWM_Start+0x110>
 8004368:	280c      	cmp	r0, #12
 800436a:	d00d      	beq.n	8004388 <HAL_TIM_PWM_Start+0x118>
 800436c:	2810      	cmp	r0, #16
 800436e:	d00f      	beq.n	8004390 <HAL_TIM_PWM_Start+0x120>
 8004370:	2302      	movs	r3, #2
 8004372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004376:	e78e      	b.n	8004296 <HAL_TIM_PWM_Start+0x26>
 8004378:	2302      	movs	r3, #2
 800437a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800437e:	e78a      	b.n	8004296 <HAL_TIM_PWM_Start+0x26>
 8004380:	2302      	movs	r3, #2
 8004382:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004386:	e786      	b.n	8004296 <HAL_TIM_PWM_Start+0x26>
 8004388:	2302      	movs	r3, #2
 800438a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800438e:	e782      	b.n	8004296 <HAL_TIM_PWM_Start+0x26>
 8004390:	2302      	movs	r3, #2
 8004392:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004396:	e77e      	b.n	8004296 <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004398:	6899      	ldr	r1, [r3, #8]
 800439a:	4a0a      	ldr	r2, [pc, #40]	; (80043c4 <HAL_TIM_PWM_Start+0x154>)
 800439c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439e:	2a06      	cmp	r2, #6
 80043a0:	d00a      	beq.n	80043b8 <HAL_TIM_PWM_Start+0x148>
 80043a2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80043a6:	d009      	beq.n	80043bc <HAL_TIM_PWM_Start+0x14c>
      __HAL_TIM_ENABLE(htim);
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80043b0:	2000      	movs	r0, #0
 80043b2:	e000      	b.n	80043b6 <HAL_TIM_PWM_Start+0x146>
    return HAL_ERROR;
 80043b4:	2001      	movs	r0, #1
}
 80043b6:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80043b8:	2000      	movs	r0, #0
 80043ba:	e7fc      	b.n	80043b6 <HAL_TIM_PWM_Start+0x146>
 80043bc:	2000      	movs	r0, #0
 80043be:	e7fa      	b.n	80043b6 <HAL_TIM_PWM_Start+0x146>
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	00010007 	.word	0x00010007

080043c8 <HAL_TIM_IC_Start_IT>:
{
 80043c8:	b510      	push	{r4, lr}
 80043ca:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80043cc:	460b      	mov	r3, r1
 80043ce:	bb19      	cbnz	r1, 8004418 <HAL_TIM_IC_Start_IT+0x50>
 80043d0:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 80043d4:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d13a      	bne.n	8004450 <HAL_TIM_IC_Start_IT+0x88>
 80043da:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80043de:	b2d2      	uxtb	r2, r2
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80043e0:	2801      	cmp	r0, #1
 80043e2:	f040 80b8 	bne.w	8004556 <HAL_TIM_IC_Start_IT+0x18e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80043e6:	2a01      	cmp	r2, #1
 80043e8:	f040 80b6 	bne.w	8004558 <HAL_TIM_IC_Start_IT+0x190>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d13f      	bne.n	8004470 <HAL_TIM_IC_Start_IT+0xa8>
 80043f0:	2102      	movs	r1, #2
 80043f2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d156      	bne.n	80044a8 <HAL_TIM_IC_Start_IT+0xe0>
 80043fa:	2102      	movs	r1, #2
 80043fc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  switch (Channel)
 8004400:	2b0c      	cmp	r3, #12
 8004402:	f200 80aa 	bhi.w	800455a <HAL_TIM_IC_Start_IT+0x192>
 8004406:	e8df f003 	tbb	[pc, r3]
 800440a:	a85f      	.short	0xa85f
 800440c:	a886a8a8 	.word	0xa886a8a8
 8004410:	a88ca8a8 	.word	0xa88ca8a8
 8004414:	a8a8      	.short	0xa8a8
 8004416:	92          	.byte	0x92
 8004417:	00          	.byte	0x00
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004418:	2904      	cmp	r1, #4
 800441a:	d009      	beq.n	8004430 <HAL_TIM_IC_Start_IT+0x68>
 800441c:	2908      	cmp	r1, #8
 800441e:	d00b      	beq.n	8004438 <HAL_TIM_IC_Start_IT+0x70>
 8004420:	290c      	cmp	r1, #12
 8004422:	d00d      	beq.n	8004440 <HAL_TIM_IC_Start_IT+0x78>
 8004424:	2910      	cmp	r1, #16
 8004426:	d00f      	beq.n	8004448 <HAL_TIM_IC_Start_IT+0x80>
 8004428:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 800442c:	b2c0      	uxtb	r0, r0
 800442e:	e7d2      	b.n	80043d6 <HAL_TIM_IC_Start_IT+0xe>
 8004430:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8004434:	b2c0      	uxtb	r0, r0
 8004436:	e7ce      	b.n	80043d6 <HAL_TIM_IC_Start_IT+0xe>
 8004438:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800443c:	b2c0      	uxtb	r0, r0
 800443e:	e7ca      	b.n	80043d6 <HAL_TIM_IC_Start_IT+0xe>
 8004440:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8004444:	b2c0      	uxtb	r0, r0
 8004446:	e7c6      	b.n	80043d6 <HAL_TIM_IC_Start_IT+0xe>
 8004448:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
 800444c:	b2c0      	uxtb	r0, r0
 800444e:	e7c2      	b.n	80043d6 <HAL_TIM_IC_Start_IT+0xe>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004450:	2b04      	cmp	r3, #4
 8004452:	d005      	beq.n	8004460 <HAL_TIM_IC_Start_IT+0x98>
 8004454:	2b08      	cmp	r3, #8
 8004456:	d007      	beq.n	8004468 <HAL_TIM_IC_Start_IT+0xa0>
 8004458:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	e7bf      	b.n	80043e0 <HAL_TIM_IC_Start_IT+0x18>
 8004460:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	e7bb      	b.n	80043e0 <HAL_TIM_IC_Start_IT+0x18>
 8004468:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	e7b7      	b.n	80043e0 <HAL_TIM_IC_Start_IT+0x18>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004470:	2b04      	cmp	r3, #4
 8004472:	d009      	beq.n	8004488 <HAL_TIM_IC_Start_IT+0xc0>
 8004474:	2b08      	cmp	r3, #8
 8004476:	d00b      	beq.n	8004490 <HAL_TIM_IC_Start_IT+0xc8>
 8004478:	2b0c      	cmp	r3, #12
 800447a:	d00d      	beq.n	8004498 <HAL_TIM_IC_Start_IT+0xd0>
 800447c:	2b10      	cmp	r3, #16
 800447e:	d00f      	beq.n	80044a0 <HAL_TIM_IC_Start_IT+0xd8>
 8004480:	2102      	movs	r1, #2
 8004482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004486:	e7b6      	b.n	80043f6 <HAL_TIM_IC_Start_IT+0x2e>
 8004488:	2102      	movs	r1, #2
 800448a:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
 800448e:	e7b2      	b.n	80043f6 <HAL_TIM_IC_Start_IT+0x2e>
 8004490:	2102      	movs	r1, #2
 8004492:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 8004496:	e7ae      	b.n	80043f6 <HAL_TIM_IC_Start_IT+0x2e>
 8004498:	2102      	movs	r1, #2
 800449a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
 800449e:	e7aa      	b.n	80043f6 <HAL_TIM_IC_Start_IT+0x2e>
 80044a0:	2102      	movs	r1, #2
 80044a2:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80044a6:	e7a6      	b.n	80043f6 <HAL_TIM_IC_Start_IT+0x2e>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d005      	beq.n	80044b8 <HAL_TIM_IC_Start_IT+0xf0>
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d007      	beq.n	80044c0 <HAL_TIM_IC_Start_IT+0xf8>
 80044b0:	2102      	movs	r1, #2
 80044b2:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
 80044b6:	e7a3      	b.n	8004400 <HAL_TIM_IC_Start_IT+0x38>
 80044b8:	2102      	movs	r1, #2
 80044ba:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80044be:	e79f      	b.n	8004400 <HAL_TIM_IC_Start_IT+0x38>
 80044c0:	2102      	movs	r1, #2
 80044c2:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
 80044c6:	e79b      	b.n	8004400 <HAL_TIM_IC_Start_IT+0x38>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044c8:	6821      	ldr	r1, [r4, #0]
 80044ca:	68ca      	ldr	r2, [r1, #12]
 80044cc:	f042 0202 	orr.w	r2, r2, #2
 80044d0:	60ca      	str	r2, [r1, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044d2:	2201      	movs	r2, #1
 80044d4:	4619      	mov	r1, r3
 80044d6:	6820      	ldr	r0, [r4, #0]
 80044d8:	f7ff feba 	bl	8004250 <TIM_CCxChannelCmd>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	4a22      	ldr	r2, [pc, #136]	; (8004568 <HAL_TIM_IC_Start_IT+0x1a0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d02a      	beq.n	800453a <HAL_TIM_IC_Start_IT+0x172>
 80044e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e8:	d027      	beq.n	800453a <HAL_TIM_IC_Start_IT+0x172>
 80044ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d023      	beq.n	800453a <HAL_TIM_IC_Start_IT+0x172>
 80044f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01f      	beq.n	800453a <HAL_TIM_IC_Start_IT+0x172>
 80044fa:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01b      	beq.n	800453a <HAL_TIM_IC_Start_IT+0x172>
 8004502:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004506:	4293      	cmp	r3, r2
 8004508:	d017      	beq.n	800453a <HAL_TIM_IC_Start_IT+0x172>
      __HAL_TIM_ENABLE(htim);
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	2000      	movs	r0, #0
 8004514:	e020      	b.n	8004558 <HAL_TIM_IC_Start_IT+0x190>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004516:	6821      	ldr	r1, [r4, #0]
 8004518:	68ca      	ldr	r2, [r1, #12]
 800451a:	f042 0204 	orr.w	r2, r2, #4
 800451e:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8004520:	e7d7      	b.n	80044d2 <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004522:	6821      	ldr	r1, [r4, #0]
 8004524:	68ca      	ldr	r2, [r1, #12]
 8004526:	f042 0208 	orr.w	r2, r2, #8
 800452a:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 800452c:	e7d1      	b.n	80044d2 <HAL_TIM_IC_Start_IT+0x10a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800452e:	6821      	ldr	r1, [r4, #0]
 8004530:	68ca      	ldr	r2, [r1, #12]
 8004532:	f042 0210 	orr.w	r2, r2, #16
 8004536:	60ca      	str	r2, [r1, #12]
  if (status == HAL_OK)
 8004538:	e7cb      	b.n	80044d2 <HAL_TIM_IC_Start_IT+0x10a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800453a:	6899      	ldr	r1, [r3, #8]
 800453c:	4a0b      	ldr	r2, [pc, #44]	; (800456c <HAL_TIM_IC_Start_IT+0x1a4>)
 800453e:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004540:	2a06      	cmp	r2, #6
 8004542:	d00c      	beq.n	800455e <HAL_TIM_IC_Start_IT+0x196>
 8004544:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004548:	d00b      	beq.n	8004562 <HAL_TIM_IC_Start_IT+0x19a>
        __HAL_TIM_ENABLE(htim);
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	f042 0201 	orr.w	r2, r2, #1
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	2000      	movs	r0, #0
 8004554:	e000      	b.n	8004558 <HAL_TIM_IC_Start_IT+0x190>
    return HAL_ERROR;
 8004556:	2001      	movs	r0, #1
}
 8004558:	bd10      	pop	{r4, pc}
  switch (Channel)
 800455a:	4610      	mov	r0, r2
 800455c:	e7fc      	b.n	8004558 <HAL_TIM_IC_Start_IT+0x190>
 800455e:	2000      	movs	r0, #0
 8004560:	e7fa      	b.n	8004558 <HAL_TIM_IC_Start_IT+0x190>
 8004562:	2000      	movs	r0, #0
 8004564:	e7f8      	b.n	8004558 <HAL_TIM_IC_Start_IT+0x190>
 8004566:	bf00      	nop
 8004568:	40012c00 	.word	0x40012c00
 800456c:	00010007 	.word	0x00010007

08004570 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004570:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d040      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
{
 8004578:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800457a:	2301      	movs	r3, #1
 800457c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	2302      	movs	r3, #2
 8004582:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004586:	6802      	ldr	r2, [r0, #0]
 8004588:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800458a:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800458c:	4d1c      	ldr	r5, [pc, #112]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800458e:	42aa      	cmp	r2, r5
 8004590:	d003      	beq.n	800459a <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8004592:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004596:	42aa      	cmp	r2, r5
 8004598:	d103      	bne.n	80045a2 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800459a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800459e:	684d      	ldr	r5, [r1, #4]
 80045a0:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045a2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045aa:	680d      	ldr	r5, [r1, #0]
 80045ac:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ae:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b0:	6803      	ldr	r3, [r0, #0]
 80045b2:	4a13      	ldr	r2, [pc, #76]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d012      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045bc:	d00f      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80045be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00b      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80045c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d007      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80045ce:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d003      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80045d6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80045da:	4293      	cmp	r3, r2
 80045dc:	d104      	bne.n	80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045de:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045e2:	688a      	ldr	r2, [r1, #8]
 80045e4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045e6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ee:	2300      	movs	r3, #0
 80045f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80045f4:	4618      	mov	r0, r3
}
 80045f6:	bc30      	pop	{r4, r5}
 80045f8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80045fa:	2002      	movs	r0, #2
}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40012c00 	.word	0x40012c00

08004604 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004604:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004608:	2b01      	cmp	r3, #1
 800460a:	d046      	beq.n	800469a <HAL_TIMEx_ConfigBreakDeadTime+0x96>
{
 800460c:	b410      	push	{r4}
  __HAL_LOCK(htim);
 800460e:	2301      	movs	r3, #1
 8004610:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004614:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461a:	688a      	ldr	r2, [r1, #8]
 800461c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800461e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004622:	684a      	ldr	r2, [r1, #4]
 8004624:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004626:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800462a:	680a      	ldr	r2, [r1, #0]
 800462c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800462e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004632:	690a      	ldr	r2, [r1, #16]
 8004634:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800463a:	694a      	ldr	r2, [r1, #20]
 800463c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800463e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004642:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004644:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004646:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800464a:	698a      	ldr	r2, [r1, #24]
 800464c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004654:	69ca      	ldr	r2, [r1, #28]
 8004656:	4313      	orrs	r3, r2

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004658:	6802      	ldr	r2, [r0, #0]
 800465a:	4c11      	ldr	r4, [pc, #68]	; (80046a0 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 800465c:	42a2      	cmp	r2, r4
 800465e:	d003      	beq.n	8004668 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8004660:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004664:	42a2      	cmp	r2, r4
 8004666:	d110      	bne.n	800468a <HAL_TIMEx_ConfigBreakDeadTime+0x86>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004668:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800466c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800466e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004676:	6a0c      	ldr	r4, [r1, #32]
 8004678:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800467a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800467e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004680:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004682:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004686:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004688:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800468a:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800468c:	2300      	movs	r3, #0
 800468e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004692:	4618      	mov	r0, r3
}
 8004694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004698:	4770      	bx	lr
  __HAL_LOCK(htim);
 800469a:	2002      	movs	r0, #2
}
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40012c00 	.word	0x40012c00

080046a4 <__errno>:
 80046a4:	4b01      	ldr	r3, [pc, #4]	; (80046ac <__errno+0x8>)
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20000010 	.word	0x20000010

080046b0 <__libc_init_array>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	4d0d      	ldr	r5, [pc, #52]	; (80046e8 <__libc_init_array+0x38>)
 80046b4:	4c0d      	ldr	r4, [pc, #52]	; (80046ec <__libc_init_array+0x3c>)
 80046b6:	1b64      	subs	r4, r4, r5
 80046b8:	10a4      	asrs	r4, r4, #2
 80046ba:	2600      	movs	r6, #0
 80046bc:	42a6      	cmp	r6, r4
 80046be:	d109      	bne.n	80046d4 <__libc_init_array+0x24>
 80046c0:	4d0b      	ldr	r5, [pc, #44]	; (80046f0 <__libc_init_array+0x40>)
 80046c2:	4c0c      	ldr	r4, [pc, #48]	; (80046f4 <__libc_init_array+0x44>)
 80046c4:	f000 ff58 	bl	8005578 <_init>
 80046c8:	1b64      	subs	r4, r4, r5
 80046ca:	10a4      	asrs	r4, r4, #2
 80046cc:	2600      	movs	r6, #0
 80046ce:	42a6      	cmp	r6, r4
 80046d0:	d105      	bne.n	80046de <__libc_init_array+0x2e>
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d8:	4798      	blx	r3
 80046da:	3601      	adds	r6, #1
 80046dc:	e7ee      	b.n	80046bc <__libc_init_array+0xc>
 80046de:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e2:	4798      	blx	r3
 80046e4:	3601      	adds	r6, #1
 80046e6:	e7f2      	b.n	80046ce <__libc_init_array+0x1e>
 80046e8:	080059a8 	.word	0x080059a8
 80046ec:	080059a8 	.word	0x080059a8
 80046f0:	080059a8 	.word	0x080059a8
 80046f4:	080059ac 	.word	0x080059ac

080046f8 <memset>:
 80046f8:	4402      	add	r2, r0
 80046fa:	4603      	mov	r3, r0
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d100      	bne.n	8004702 <memset+0xa>
 8004700:	4770      	bx	lr
 8004702:	f803 1b01 	strb.w	r1, [r3], #1
 8004706:	e7f9      	b.n	80046fc <memset+0x4>

08004708 <cosf>:
 8004708:	ee10 3a10 	vmov	r3, s0
 800470c:	b507      	push	{r0, r1, r2, lr}
 800470e:	4a1e      	ldr	r2, [pc, #120]	; (8004788 <cosf+0x80>)
 8004710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004714:	4293      	cmp	r3, r2
 8004716:	dc06      	bgt.n	8004726 <cosf+0x1e>
 8004718:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800478c <cosf+0x84>
 800471c:	b003      	add	sp, #12
 800471e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004722:	f000 ba7b 	b.w	8004c1c <__kernel_cosf>
 8004726:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800472a:	db04      	blt.n	8004736 <cosf+0x2e>
 800472c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004730:	b003      	add	sp, #12
 8004732:	f85d fb04 	ldr.w	pc, [sp], #4
 8004736:	4668      	mov	r0, sp
 8004738:	f000 f930 	bl	800499c <__ieee754_rem_pio2f>
 800473c:	f000 0003 	and.w	r0, r0, #3
 8004740:	2801      	cmp	r0, #1
 8004742:	d009      	beq.n	8004758 <cosf+0x50>
 8004744:	2802      	cmp	r0, #2
 8004746:	d010      	beq.n	800476a <cosf+0x62>
 8004748:	b9b0      	cbnz	r0, 8004778 <cosf+0x70>
 800474a:	eddd 0a01 	vldr	s1, [sp, #4]
 800474e:	ed9d 0a00 	vldr	s0, [sp]
 8004752:	f000 fa63 	bl	8004c1c <__kernel_cosf>
 8004756:	e7eb      	b.n	8004730 <cosf+0x28>
 8004758:	eddd 0a01 	vldr	s1, [sp, #4]
 800475c:	ed9d 0a00 	vldr	s0, [sp]
 8004760:	f000 fd32 	bl	80051c8 <__kernel_sinf>
 8004764:	eeb1 0a40 	vneg.f32	s0, s0
 8004768:	e7e2      	b.n	8004730 <cosf+0x28>
 800476a:	eddd 0a01 	vldr	s1, [sp, #4]
 800476e:	ed9d 0a00 	vldr	s0, [sp]
 8004772:	f000 fa53 	bl	8004c1c <__kernel_cosf>
 8004776:	e7f5      	b.n	8004764 <cosf+0x5c>
 8004778:	eddd 0a01 	vldr	s1, [sp, #4]
 800477c:	ed9d 0a00 	vldr	s0, [sp]
 8004780:	2001      	movs	r0, #1
 8004782:	f000 fd21 	bl	80051c8 <__kernel_sinf>
 8004786:	e7d3      	b.n	8004730 <cosf+0x28>
 8004788:	3f490fd8 	.word	0x3f490fd8
 800478c:	00000000 	.word	0x00000000

08004790 <sinf>:
 8004790:	ee10 3a10 	vmov	r3, s0
 8004794:	b507      	push	{r0, r1, r2, lr}
 8004796:	4a1f      	ldr	r2, [pc, #124]	; (8004814 <sinf+0x84>)
 8004798:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800479c:	4293      	cmp	r3, r2
 800479e:	dc07      	bgt.n	80047b0 <sinf+0x20>
 80047a0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8004818 <sinf+0x88>
 80047a4:	2000      	movs	r0, #0
 80047a6:	b003      	add	sp, #12
 80047a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047ac:	f000 bd0c 	b.w	80051c8 <__kernel_sinf>
 80047b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80047b4:	db04      	blt.n	80047c0 <sinf+0x30>
 80047b6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80047ba:	b003      	add	sp, #12
 80047bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80047c0:	4668      	mov	r0, sp
 80047c2:	f000 f8eb 	bl	800499c <__ieee754_rem_pio2f>
 80047c6:	f000 0003 	and.w	r0, r0, #3
 80047ca:	2801      	cmp	r0, #1
 80047cc:	d00a      	beq.n	80047e4 <sinf+0x54>
 80047ce:	2802      	cmp	r0, #2
 80047d0:	d00f      	beq.n	80047f2 <sinf+0x62>
 80047d2:	b9c0      	cbnz	r0, 8004806 <sinf+0x76>
 80047d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80047d8:	ed9d 0a00 	vldr	s0, [sp]
 80047dc:	2001      	movs	r0, #1
 80047de:	f000 fcf3 	bl	80051c8 <__kernel_sinf>
 80047e2:	e7ea      	b.n	80047ba <sinf+0x2a>
 80047e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80047e8:	ed9d 0a00 	vldr	s0, [sp]
 80047ec:	f000 fa16 	bl	8004c1c <__kernel_cosf>
 80047f0:	e7e3      	b.n	80047ba <sinf+0x2a>
 80047f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80047f6:	ed9d 0a00 	vldr	s0, [sp]
 80047fa:	2001      	movs	r0, #1
 80047fc:	f000 fce4 	bl	80051c8 <__kernel_sinf>
 8004800:	eeb1 0a40 	vneg.f32	s0, s0
 8004804:	e7d9      	b.n	80047ba <sinf+0x2a>
 8004806:	eddd 0a01 	vldr	s1, [sp, #4]
 800480a:	ed9d 0a00 	vldr	s0, [sp]
 800480e:	f000 fa05 	bl	8004c1c <__kernel_cosf>
 8004812:	e7f5      	b.n	8004800 <sinf+0x70>
 8004814:	3f490fd8 	.word	0x3f490fd8
 8004818:	00000000 	.word	0x00000000

0800481c <atan2f>:
 800481c:	f000 b81e 	b.w	800485c <__ieee754_atan2f>

08004820 <sqrtf>:
 8004820:	b508      	push	{r3, lr}
 8004822:	ed2d 8b02 	vpush	{d8}
 8004826:	eeb0 8a40 	vmov.f32	s16, s0
 800482a:	f000 f9f3 	bl	8004c14 <__ieee754_sqrtf>
 800482e:	eeb4 8a48 	vcmp.f32	s16, s16
 8004832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004836:	d60c      	bvs.n	8004852 <sqrtf+0x32>
 8004838:	eddf 8a07 	vldr	s17, [pc, #28]	; 8004858 <sqrtf+0x38>
 800483c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004844:	d505      	bpl.n	8004852 <sqrtf+0x32>
 8004846:	f7ff ff2d 	bl	80046a4 <__errno>
 800484a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800484e:	2321      	movs	r3, #33	; 0x21
 8004850:	6003      	str	r3, [r0, #0]
 8004852:	ecbd 8b02 	vpop	{d8}
 8004856:	bd08      	pop	{r3, pc}
 8004858:	00000000 	.word	0x00000000

0800485c <__ieee754_atan2f>:
 800485c:	ee10 2a90 	vmov	r2, s1
 8004860:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004864:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004868:	b510      	push	{r4, lr}
 800486a:	eef0 7a40 	vmov.f32	s15, s0
 800486e:	dc06      	bgt.n	800487e <__ieee754_atan2f+0x22>
 8004870:	ee10 0a10 	vmov	r0, s0
 8004874:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004878:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800487c:	dd04      	ble.n	8004888 <__ieee754_atan2f+0x2c>
 800487e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8004882:	eeb0 0a67 	vmov.f32	s0, s15
 8004886:	bd10      	pop	{r4, pc}
 8004888:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800488c:	d103      	bne.n	8004896 <__ieee754_atan2f+0x3a>
 800488e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004892:	f000 bce1 	b.w	8005258 <atanf>
 8004896:	1794      	asrs	r4, r2, #30
 8004898:	f004 0402 	and.w	r4, r4, #2
 800489c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80048a0:	b943      	cbnz	r3, 80048b4 <__ieee754_atan2f+0x58>
 80048a2:	2c02      	cmp	r4, #2
 80048a4:	d05e      	beq.n	8004964 <__ieee754_atan2f+0x108>
 80048a6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004978 <__ieee754_atan2f+0x11c>
 80048aa:	2c03      	cmp	r4, #3
 80048ac:	bf08      	it	eq
 80048ae:	eef0 7a47 	vmoveq.f32	s15, s14
 80048b2:	e7e6      	b.n	8004882 <__ieee754_atan2f+0x26>
 80048b4:	b941      	cbnz	r1, 80048c8 <__ieee754_atan2f+0x6c>
 80048b6:	eddf 7a31 	vldr	s15, [pc, #196]	; 800497c <__ieee754_atan2f+0x120>
 80048ba:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8004980 <__ieee754_atan2f+0x124>
 80048be:	2800      	cmp	r0, #0
 80048c0:	bfb8      	it	lt
 80048c2:	eef0 7a40 	vmovlt.f32	s15, s0
 80048c6:	e7dc      	b.n	8004882 <__ieee754_atan2f+0x26>
 80048c8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80048cc:	d110      	bne.n	80048f0 <__ieee754_atan2f+0x94>
 80048ce:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80048d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80048d6:	d107      	bne.n	80048e8 <__ieee754_atan2f+0x8c>
 80048d8:	2c02      	cmp	r4, #2
 80048da:	d846      	bhi.n	800496a <__ieee754_atan2f+0x10e>
 80048dc:	4b29      	ldr	r3, [pc, #164]	; (8004984 <__ieee754_atan2f+0x128>)
 80048de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80048e2:	edd4 7a00 	vldr	s15, [r4]
 80048e6:	e7cc      	b.n	8004882 <__ieee754_atan2f+0x26>
 80048e8:	2c02      	cmp	r4, #2
 80048ea:	d841      	bhi.n	8004970 <__ieee754_atan2f+0x114>
 80048ec:	4b26      	ldr	r3, [pc, #152]	; (8004988 <__ieee754_atan2f+0x12c>)
 80048ee:	e7f6      	b.n	80048de <__ieee754_atan2f+0x82>
 80048f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80048f4:	d0df      	beq.n	80048b6 <__ieee754_atan2f+0x5a>
 80048f6:	1a5b      	subs	r3, r3, r1
 80048f8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80048fc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8004900:	da1a      	bge.n	8004938 <__ieee754_atan2f+0xdc>
 8004902:	2a00      	cmp	r2, #0
 8004904:	da01      	bge.n	800490a <__ieee754_atan2f+0xae>
 8004906:	313c      	adds	r1, #60	; 0x3c
 8004908:	db19      	blt.n	800493e <__ieee754_atan2f+0xe2>
 800490a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800490e:	f000 fd77 	bl	8005400 <fabsf>
 8004912:	f000 fca1 	bl	8005258 <atanf>
 8004916:	eef0 7a40 	vmov.f32	s15, s0
 800491a:	2c01      	cmp	r4, #1
 800491c:	d012      	beq.n	8004944 <__ieee754_atan2f+0xe8>
 800491e:	2c02      	cmp	r4, #2
 8004920:	d017      	beq.n	8004952 <__ieee754_atan2f+0xf6>
 8004922:	2c00      	cmp	r4, #0
 8004924:	d0ad      	beq.n	8004882 <__ieee754_atan2f+0x26>
 8004926:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800498c <__ieee754_atan2f+0x130>
 800492a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800492e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8004990 <__ieee754_atan2f+0x134>
 8004932:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004936:	e7a4      	b.n	8004882 <__ieee754_atan2f+0x26>
 8004938:	eddf 7a10 	vldr	s15, [pc, #64]	; 800497c <__ieee754_atan2f+0x120>
 800493c:	e7ed      	b.n	800491a <__ieee754_atan2f+0xbe>
 800493e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004994 <__ieee754_atan2f+0x138>
 8004942:	e7ea      	b.n	800491a <__ieee754_atan2f+0xbe>
 8004944:	ee17 3a90 	vmov	r3, s15
 8004948:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800494c:	ee07 3a90 	vmov	s15, r3
 8004950:	e797      	b.n	8004882 <__ieee754_atan2f+0x26>
 8004952:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800498c <__ieee754_atan2f+0x130>
 8004956:	ee77 7a80 	vadd.f32	s15, s15, s0
 800495a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8004990 <__ieee754_atan2f+0x134>
 800495e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004962:	e78e      	b.n	8004882 <__ieee754_atan2f+0x26>
 8004964:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8004990 <__ieee754_atan2f+0x134>
 8004968:	e78b      	b.n	8004882 <__ieee754_atan2f+0x26>
 800496a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004998 <__ieee754_atan2f+0x13c>
 800496e:	e788      	b.n	8004882 <__ieee754_atan2f+0x26>
 8004970:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004994 <__ieee754_atan2f+0x138>
 8004974:	e785      	b.n	8004882 <__ieee754_atan2f+0x26>
 8004976:	bf00      	nop
 8004978:	c0490fdb 	.word	0xc0490fdb
 800497c:	3fc90fdb 	.word	0x3fc90fdb
 8004980:	bfc90fdb 	.word	0xbfc90fdb
 8004984:	080055a0 	.word	0x080055a0
 8004988:	080055ac 	.word	0x080055ac
 800498c:	33bbbd2e 	.word	0x33bbbd2e
 8004990:	40490fdb 	.word	0x40490fdb
 8004994:	00000000 	.word	0x00000000
 8004998:	3f490fdb 	.word	0x3f490fdb

0800499c <__ieee754_rem_pio2f>:
 800499c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800499e:	ee10 6a10 	vmov	r6, s0
 80049a2:	4b8e      	ldr	r3, [pc, #568]	; (8004bdc <__ieee754_rem_pio2f+0x240>)
 80049a4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80049a8:	429d      	cmp	r5, r3
 80049aa:	b087      	sub	sp, #28
 80049ac:	eef0 7a40 	vmov.f32	s15, s0
 80049b0:	4604      	mov	r4, r0
 80049b2:	dc05      	bgt.n	80049c0 <__ieee754_rem_pio2f+0x24>
 80049b4:	2300      	movs	r3, #0
 80049b6:	ed80 0a00 	vstr	s0, [r0]
 80049ba:	6043      	str	r3, [r0, #4]
 80049bc:	2000      	movs	r0, #0
 80049be:	e01a      	b.n	80049f6 <__ieee754_rem_pio2f+0x5a>
 80049c0:	4b87      	ldr	r3, [pc, #540]	; (8004be0 <__ieee754_rem_pio2f+0x244>)
 80049c2:	429d      	cmp	r5, r3
 80049c4:	dc46      	bgt.n	8004a54 <__ieee754_rem_pio2f+0xb8>
 80049c6:	2e00      	cmp	r6, #0
 80049c8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8004be4 <__ieee754_rem_pio2f+0x248>
 80049cc:	4b86      	ldr	r3, [pc, #536]	; (8004be8 <__ieee754_rem_pio2f+0x24c>)
 80049ce:	f025 050f 	bic.w	r5, r5, #15
 80049d2:	dd1f      	ble.n	8004a14 <__ieee754_rem_pio2f+0x78>
 80049d4:	429d      	cmp	r5, r3
 80049d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80049da:	d00e      	beq.n	80049fa <__ieee754_rem_pio2f+0x5e>
 80049dc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8004bec <__ieee754_rem_pio2f+0x250>
 80049e0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80049e4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80049e8:	ed80 0a00 	vstr	s0, [r0]
 80049ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049f0:	2001      	movs	r0, #1
 80049f2:	edc4 7a01 	vstr	s15, [r4, #4]
 80049f6:	b007      	add	sp, #28
 80049f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049fa:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8004bf0 <__ieee754_rem_pio2f+0x254>
 80049fe:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004bf4 <__ieee754_rem_pio2f+0x258>
 8004a02:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004a06:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004a0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004a0e:	edc0 6a00 	vstr	s13, [r0]
 8004a12:	e7eb      	b.n	80049ec <__ieee754_rem_pio2f+0x50>
 8004a14:	429d      	cmp	r5, r3
 8004a16:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004a1a:	d00e      	beq.n	8004a3a <__ieee754_rem_pio2f+0x9e>
 8004a1c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004bec <__ieee754_rem_pio2f+0x250>
 8004a20:	ee37 0a87 	vadd.f32	s0, s15, s14
 8004a24:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004a28:	ed80 0a00 	vstr	s0, [r0]
 8004a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295
 8004a34:	edc4 7a01 	vstr	s15, [r4, #4]
 8004a38:	e7dd      	b.n	80049f6 <__ieee754_rem_pio2f+0x5a>
 8004a3a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8004bf0 <__ieee754_rem_pio2f+0x254>
 8004a3e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004bf4 <__ieee754_rem_pio2f+0x258>
 8004a42:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004a46:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004a4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004a4e:	edc0 6a00 	vstr	s13, [r0]
 8004a52:	e7eb      	b.n	8004a2c <__ieee754_rem_pio2f+0x90>
 8004a54:	4b68      	ldr	r3, [pc, #416]	; (8004bf8 <__ieee754_rem_pio2f+0x25c>)
 8004a56:	429d      	cmp	r5, r3
 8004a58:	dc72      	bgt.n	8004b40 <__ieee754_rem_pio2f+0x1a4>
 8004a5a:	f000 fcd1 	bl	8005400 <fabsf>
 8004a5e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004bfc <__ieee754_rem_pio2f+0x260>
 8004a62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004a66:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a72:	ee17 0a90 	vmov	r0, s15
 8004a76:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004be4 <__ieee754_rem_pio2f+0x248>
 8004a7a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004a7e:	281f      	cmp	r0, #31
 8004a80:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004bec <__ieee754_rem_pio2f+0x250>
 8004a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a88:	eeb1 6a47 	vneg.f32	s12, s14
 8004a8c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004a90:	ee16 2a90 	vmov	r2, s13
 8004a94:	dc1c      	bgt.n	8004ad0 <__ieee754_rem_pio2f+0x134>
 8004a96:	495a      	ldr	r1, [pc, #360]	; (8004c00 <__ieee754_rem_pio2f+0x264>)
 8004a98:	1e47      	subs	r7, r0, #1
 8004a9a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8004a9e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8004aa2:	428b      	cmp	r3, r1
 8004aa4:	d014      	beq.n	8004ad0 <__ieee754_rem_pio2f+0x134>
 8004aa6:	6022      	str	r2, [r4, #0]
 8004aa8:	ed94 7a00 	vldr	s14, [r4]
 8004aac:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004ab0:	2e00      	cmp	r6, #0
 8004ab2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004ab6:	ed84 0a01 	vstr	s0, [r4, #4]
 8004aba:	da9c      	bge.n	80049f6 <__ieee754_rem_pio2f+0x5a>
 8004abc:	eeb1 7a47 	vneg.f32	s14, s14
 8004ac0:	eeb1 0a40 	vneg.f32	s0, s0
 8004ac4:	ed84 7a00 	vstr	s14, [r4]
 8004ac8:	ed84 0a01 	vstr	s0, [r4, #4]
 8004acc:	4240      	negs	r0, r0
 8004ace:	e792      	b.n	80049f6 <__ieee754_rem_pio2f+0x5a>
 8004ad0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004ad4:	15eb      	asrs	r3, r5, #23
 8004ad6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8004ada:	2d08      	cmp	r5, #8
 8004adc:	dde3      	ble.n	8004aa6 <__ieee754_rem_pio2f+0x10a>
 8004ade:	eddf 7a44 	vldr	s15, [pc, #272]	; 8004bf0 <__ieee754_rem_pio2f+0x254>
 8004ae2:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004bf4 <__ieee754_rem_pio2f+0x258>
 8004ae6:	eef0 6a40 	vmov.f32	s13, s0
 8004aea:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004aee:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004af2:	eea6 0a27 	vfma.f32	s0, s12, s15
 8004af6:	eef0 7a40 	vmov.f32	s15, s0
 8004afa:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8004afe:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004b02:	ee15 2a90 	vmov	r2, s11
 8004b06:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004b0a:	1a5b      	subs	r3, r3, r1
 8004b0c:	2b19      	cmp	r3, #25
 8004b0e:	dc04      	bgt.n	8004b1a <__ieee754_rem_pio2f+0x17e>
 8004b10:	edc4 5a00 	vstr	s11, [r4]
 8004b14:	eeb0 0a66 	vmov.f32	s0, s13
 8004b18:	e7c6      	b.n	8004aa8 <__ieee754_rem_pio2f+0x10c>
 8004b1a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004c04 <__ieee754_rem_pio2f+0x268>
 8004b1e:	eeb0 0a66 	vmov.f32	s0, s13
 8004b22:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004b26:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004b2a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004c08 <__ieee754_rem_pio2f+0x26c>
 8004b2e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004b32:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004b36:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004b3a:	ed84 7a00 	vstr	s14, [r4]
 8004b3e:	e7b3      	b.n	8004aa8 <__ieee754_rem_pio2f+0x10c>
 8004b40:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004b44:	db06      	blt.n	8004b54 <__ieee754_rem_pio2f+0x1b8>
 8004b46:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004b4a:	edc0 7a01 	vstr	s15, [r0, #4]
 8004b4e:	edc0 7a00 	vstr	s15, [r0]
 8004b52:	e733      	b.n	80049bc <__ieee754_rem_pio2f+0x20>
 8004b54:	15ea      	asrs	r2, r5, #23
 8004b56:	3a86      	subs	r2, #134	; 0x86
 8004b58:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004b64:	eddf 6a29 	vldr	s13, [pc, #164]	; 8004c0c <__ieee754_rem_pio2f+0x270>
 8004b68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b70:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004b74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b78:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004b7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b84:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004b88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b94:	edcd 7a05 	vstr	s15, [sp, #20]
 8004b98:	d11e      	bne.n	8004bd8 <__ieee754_rem_pio2f+0x23c>
 8004b9a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba2:	bf14      	ite	ne
 8004ba4:	2302      	movne	r3, #2
 8004ba6:	2301      	moveq	r3, #1
 8004ba8:	4919      	ldr	r1, [pc, #100]	; (8004c10 <__ieee754_rem_pio2f+0x274>)
 8004baa:	9101      	str	r1, [sp, #4]
 8004bac:	2102      	movs	r1, #2
 8004bae:	9100      	str	r1, [sp, #0]
 8004bb0:	a803      	add	r0, sp, #12
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	f000 f892 	bl	8004cdc <__kernel_rem_pio2f>
 8004bb8:	2e00      	cmp	r6, #0
 8004bba:	f6bf af1c 	bge.w	80049f6 <__ieee754_rem_pio2f+0x5a>
 8004bbe:	edd4 7a00 	vldr	s15, [r4]
 8004bc2:	eef1 7a67 	vneg.f32	s15, s15
 8004bc6:	edc4 7a00 	vstr	s15, [r4]
 8004bca:	edd4 7a01 	vldr	s15, [r4, #4]
 8004bce:	eef1 7a67 	vneg.f32	s15, s15
 8004bd2:	edc4 7a01 	vstr	s15, [r4, #4]
 8004bd6:	e779      	b.n	8004acc <__ieee754_rem_pio2f+0x130>
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e7e5      	b.n	8004ba8 <__ieee754_rem_pio2f+0x20c>
 8004bdc:	3f490fd8 	.word	0x3f490fd8
 8004be0:	4016cbe3 	.word	0x4016cbe3
 8004be4:	3fc90f80 	.word	0x3fc90f80
 8004be8:	3fc90fd0 	.word	0x3fc90fd0
 8004bec:	37354443 	.word	0x37354443
 8004bf0:	37354400 	.word	0x37354400
 8004bf4:	2e85a308 	.word	0x2e85a308
 8004bf8:	43490f80 	.word	0x43490f80
 8004bfc:	3f22f984 	.word	0x3f22f984
 8004c00:	080055b8 	.word	0x080055b8
 8004c04:	2e85a300 	.word	0x2e85a300
 8004c08:	248d3132 	.word	0x248d3132
 8004c0c:	43800000 	.word	0x43800000
 8004c10:	08005638 	.word	0x08005638

08004c14 <__ieee754_sqrtf>:
 8004c14:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004c18:	4770      	bx	lr
	...

08004c1c <__kernel_cosf>:
 8004c1c:	ee10 3a10 	vmov	r3, s0
 8004c20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c24:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004c28:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004c2c:	da05      	bge.n	8004c3a <__kernel_cosf+0x1e>
 8004c2e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004c32:	ee17 2a90 	vmov	r2, s15
 8004c36:	2a00      	cmp	r2, #0
 8004c38:	d03d      	beq.n	8004cb6 <__kernel_cosf+0x9a>
 8004c3a:	ee60 5a00 	vmul.f32	s11, s0, s0
 8004c3e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004cbc <__kernel_cosf+0xa0>
 8004c42:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004cc0 <__kernel_cosf+0xa4>
 8004c46:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004cc4 <__kernel_cosf+0xa8>
 8004c4a:	4a1f      	ldr	r2, [pc, #124]	; (8004cc8 <__kernel_cosf+0xac>)
 8004c4c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004c50:	4293      	cmp	r3, r2
 8004c52:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004ccc <__kernel_cosf+0xb0>
 8004c56:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004c5a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004cd0 <__kernel_cosf+0xb4>
 8004c5e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004c62:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004cd4 <__kernel_cosf+0xb8>
 8004c66:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004c6a:	eeb0 7a66 	vmov.f32	s14, s13
 8004c6e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004c72:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004c76:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8004c7a:	ee67 6a25 	vmul.f32	s13, s14, s11
 8004c7e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8004c82:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004c86:	dc04      	bgt.n	8004c92 <__kernel_cosf+0x76>
 8004c88:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004c8c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8004c90:	4770      	bx	lr
 8004c92:	4a11      	ldr	r2, [pc, #68]	; (8004cd8 <__kernel_cosf+0xbc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	bfda      	itte	le
 8004c98:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004c9c:	ee06 3a90 	vmovle	s13, r3
 8004ca0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8004ca4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004ca8:	ee36 0a66 	vsub.f32	s0, s12, s13
 8004cac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cb0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004cb4:	4770      	bx	lr
 8004cb6:	eeb0 0a46 	vmov.f32	s0, s12
 8004cba:	4770      	bx	lr
 8004cbc:	ad47d74e 	.word	0xad47d74e
 8004cc0:	310f74f6 	.word	0x310f74f6
 8004cc4:	3d2aaaab 	.word	0x3d2aaaab
 8004cc8:	3e999999 	.word	0x3e999999
 8004ccc:	b493f27c 	.word	0xb493f27c
 8004cd0:	37d00d01 	.word	0x37d00d01
 8004cd4:	bab60b61 	.word	0xbab60b61
 8004cd8:	3f480000 	.word	0x3f480000

08004cdc <__kernel_rem_pio2f>:
 8004cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce0:	ed2d 8b04 	vpush	{d8-d9}
 8004ce4:	b0d9      	sub	sp, #356	; 0x164
 8004ce6:	4688      	mov	r8, r1
 8004ce8:	9002      	str	r0, [sp, #8]
 8004cea:	49bb      	ldr	r1, [pc, #748]	; (8004fd8 <__kernel_rem_pio2f+0x2fc>)
 8004cec:	9866      	ldr	r0, [sp, #408]	; 0x198
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8004cf4:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8004cf8:	1e59      	subs	r1, r3, #1
 8004cfa:	1d13      	adds	r3, r2, #4
 8004cfc:	db27      	blt.n	8004d4e <__kernel_rem_pio2f+0x72>
 8004cfe:	f1b2 0b03 	subs.w	fp, r2, #3
 8004d02:	bf48      	it	mi
 8004d04:	f102 0b04 	addmi.w	fp, r2, #4
 8004d08:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8004d0c:	1c45      	adds	r5, r0, #1
 8004d0e:	00ec      	lsls	r4, r5, #3
 8004d10:	1a47      	subs	r7, r0, r1
 8004d12:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8004fe8 <__kernel_rem_pio2f+0x30c>
 8004d16:	9403      	str	r4, [sp, #12]
 8004d18:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8004d1c:	eb0a 0c01 	add.w	ip, sl, r1
 8004d20:	ae1c      	add	r6, sp, #112	; 0x70
 8004d22:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8004d26:	2400      	movs	r4, #0
 8004d28:	4564      	cmp	r4, ip
 8004d2a:	dd12      	ble.n	8004d52 <__kernel_rem_pio2f+0x76>
 8004d2c:	9b01      	ldr	r3, [sp, #4]
 8004d2e:	ac1c      	add	r4, sp, #112	; 0x70
 8004d30:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004d34:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8004d38:	f04f 0c00 	mov.w	ip, #0
 8004d3c:	45d4      	cmp	ip, sl
 8004d3e:	dc27      	bgt.n	8004d90 <__kernel_rem_pio2f+0xb4>
 8004d40:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004d44:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8004fe8 <__kernel_rem_pio2f+0x30c>
 8004d48:	4627      	mov	r7, r4
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	e016      	b.n	8004d7c <__kernel_rem_pio2f+0xa0>
 8004d4e:	2000      	movs	r0, #0
 8004d50:	e7dc      	b.n	8004d0c <__kernel_rem_pio2f+0x30>
 8004d52:	42e7      	cmn	r7, r4
 8004d54:	bf5d      	ittte	pl
 8004d56:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8004d5a:	ee07 3a90 	vmovpl	s15, r3
 8004d5e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004d62:	eef0 7a47 	vmovmi.f32	s15, s14
 8004d66:	ece6 7a01 	vstmia	r6!, {s15}
 8004d6a:	3401      	adds	r4, #1
 8004d6c:	e7dc      	b.n	8004d28 <__kernel_rem_pio2f+0x4c>
 8004d6e:	ecf9 6a01 	vldmia	r9!, {s13}
 8004d72:	ed97 7a00 	vldr	s14, [r7]
 8004d76:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004d7a:	3601      	adds	r6, #1
 8004d7c:	428e      	cmp	r6, r1
 8004d7e:	f1a7 0704 	sub.w	r7, r7, #4
 8004d82:	ddf4      	ble.n	8004d6e <__kernel_rem_pio2f+0x92>
 8004d84:	eceb 7a01 	vstmia	fp!, {s15}
 8004d88:	f10c 0c01 	add.w	ip, ip, #1
 8004d8c:	3404      	adds	r4, #4
 8004d8e:	e7d5      	b.n	8004d3c <__kernel_rem_pio2f+0x60>
 8004d90:	ab08      	add	r3, sp, #32
 8004d92:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004d96:	eddf 8a93 	vldr	s17, [pc, #588]	; 8004fe4 <__kernel_rem_pio2f+0x308>
 8004d9a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8004fe0 <__kernel_rem_pio2f+0x304>
 8004d9e:	9304      	str	r3, [sp, #16]
 8004da0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8004da4:	4656      	mov	r6, sl
 8004da6:	00b3      	lsls	r3, r6, #2
 8004da8:	9305      	str	r3, [sp, #20]
 8004daa:	ab58      	add	r3, sp, #352	; 0x160
 8004dac:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8004db0:	ac08      	add	r4, sp, #32
 8004db2:	ab44      	add	r3, sp, #272	; 0x110
 8004db4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8004db8:	46a4      	mov	ip, r4
 8004dba:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8004dbe:	4637      	mov	r7, r6
 8004dc0:	2f00      	cmp	r7, #0
 8004dc2:	f1a0 0004 	sub.w	r0, r0, #4
 8004dc6:	dc4f      	bgt.n	8004e68 <__kernel_rem_pio2f+0x18c>
 8004dc8:	4628      	mov	r0, r5
 8004dca:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8004dce:	f000 fb61 	bl	8005494 <scalbnf>
 8004dd2:	eeb0 8a40 	vmov.f32	s16, s0
 8004dd6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8004dda:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004dde:	f000 fb17 	bl	8005410 <floorf>
 8004de2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004de6:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004dea:	2d00      	cmp	r5, #0
 8004dec:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8004df0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004df4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004df8:	ee17 9a90 	vmov	r9, s15
 8004dfc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004e00:	dd44      	ble.n	8004e8c <__kernel_rem_pio2f+0x1b0>
 8004e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8004e06:	ab08      	add	r3, sp, #32
 8004e08:	f1c5 0e08 	rsb	lr, r5, #8
 8004e0c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8004e10:	fa47 f00e 	asr.w	r0, r7, lr
 8004e14:	4481      	add	r9, r0
 8004e16:	fa00 f00e 	lsl.w	r0, r0, lr
 8004e1a:	1a3f      	subs	r7, r7, r0
 8004e1c:	f1c5 0007 	rsb	r0, r5, #7
 8004e20:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8004e24:	4107      	asrs	r7, r0
 8004e26:	2f00      	cmp	r7, #0
 8004e28:	dd3f      	ble.n	8004eaa <__kernel_rem_pio2f+0x1ce>
 8004e2a:	f04f 0e00 	mov.w	lr, #0
 8004e2e:	f109 0901 	add.w	r9, r9, #1
 8004e32:	4673      	mov	r3, lr
 8004e34:	4576      	cmp	r6, lr
 8004e36:	dc6b      	bgt.n	8004f10 <__kernel_rem_pio2f+0x234>
 8004e38:	2d00      	cmp	r5, #0
 8004e3a:	dd04      	ble.n	8004e46 <__kernel_rem_pio2f+0x16a>
 8004e3c:	2d01      	cmp	r5, #1
 8004e3e:	d078      	beq.n	8004f32 <__kernel_rem_pio2f+0x256>
 8004e40:	2d02      	cmp	r5, #2
 8004e42:	f000 8081 	beq.w	8004f48 <__kernel_rem_pio2f+0x26c>
 8004e46:	2f02      	cmp	r7, #2
 8004e48:	d12f      	bne.n	8004eaa <__kernel_rem_pio2f+0x1ce>
 8004e4a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004e4e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004e52:	b353      	cbz	r3, 8004eaa <__kernel_rem_pio2f+0x1ce>
 8004e54:	4628      	mov	r0, r5
 8004e56:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8004e5a:	f000 fb1b 	bl	8005494 <scalbnf>
 8004e5e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8004e62:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004e66:	e020      	b.n	8004eaa <__kernel_rem_pio2f+0x1ce>
 8004e68:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004e6c:	3f01      	subs	r7, #1
 8004e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e76:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004e7a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004e7e:	ecac 0a01 	vstmia	ip!, {s0}
 8004e82:	ed90 0a00 	vldr	s0, [r0]
 8004e86:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004e8a:	e799      	b.n	8004dc0 <__kernel_rem_pio2f+0xe4>
 8004e8c:	d105      	bne.n	8004e9a <__kernel_rem_pio2f+0x1be>
 8004e8e:	1e70      	subs	r0, r6, #1
 8004e90:	ab08      	add	r3, sp, #32
 8004e92:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8004e96:	11ff      	asrs	r7, r7, #7
 8004e98:	e7c5      	b.n	8004e26 <__kernel_rem_pio2f+0x14a>
 8004e9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004e9e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea6:	da31      	bge.n	8004f0c <__kernel_rem_pio2f+0x230>
 8004ea8:	2700      	movs	r7, #0
 8004eaa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb2:	f040 809b 	bne.w	8004fec <__kernel_rem_pio2f+0x310>
 8004eb6:	1e74      	subs	r4, r6, #1
 8004eb8:	46a4      	mov	ip, r4
 8004eba:	2000      	movs	r0, #0
 8004ebc:	45d4      	cmp	ip, sl
 8004ebe:	da4a      	bge.n	8004f56 <__kernel_rem_pio2f+0x27a>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d07a      	beq.n	8004fba <__kernel_rem_pio2f+0x2de>
 8004ec4:	ab08      	add	r3, sp, #32
 8004ec6:	3d08      	subs	r5, #8
 8004ec8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8081 	beq.w	8004fd4 <__kernel_rem_pio2f+0x2f8>
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004ed8:	00a5      	lsls	r5, r4, #2
 8004eda:	f000 fadb 	bl	8005494 <scalbnf>
 8004ede:	aa44      	add	r2, sp, #272	; 0x110
 8004ee0:	1d2b      	adds	r3, r5, #4
 8004ee2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004fe4 <__kernel_rem_pio2f+0x308>
 8004ee6:	18d1      	adds	r1, r2, r3
 8004ee8:	4622      	mov	r2, r4
 8004eea:	2a00      	cmp	r2, #0
 8004eec:	f280 80ae 	bge.w	800504c <__kernel_rem_pio2f+0x370>
 8004ef0:	4622      	mov	r2, r4
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	f2c0 80cc 	blt.w	8005090 <__kernel_rem_pio2f+0x3b4>
 8004ef8:	a944      	add	r1, sp, #272	; 0x110
 8004efa:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8004efe:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8004fdc <__kernel_rem_pio2f+0x300>
 8004f02:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004fe8 <__kernel_rem_pio2f+0x30c>
 8004f06:	2000      	movs	r0, #0
 8004f08:	1aa1      	subs	r1, r4, r2
 8004f0a:	e0b6      	b.n	800507a <__kernel_rem_pio2f+0x39e>
 8004f0c:	2702      	movs	r7, #2
 8004f0e:	e78c      	b.n	8004e2a <__kernel_rem_pio2f+0x14e>
 8004f10:	6820      	ldr	r0, [r4, #0]
 8004f12:	b94b      	cbnz	r3, 8004f28 <__kernel_rem_pio2f+0x24c>
 8004f14:	b118      	cbz	r0, 8004f1e <__kernel_rem_pio2f+0x242>
 8004f16:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8004f1a:	6020      	str	r0, [r4, #0]
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	f10e 0e01 	add.w	lr, lr, #1
 8004f22:	3404      	adds	r4, #4
 8004f24:	4603      	mov	r3, r0
 8004f26:	e785      	b.n	8004e34 <__kernel_rem_pio2f+0x158>
 8004f28:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8004f2c:	6020      	str	r0, [r4, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	e7f5      	b.n	8004f1e <__kernel_rem_pio2f+0x242>
 8004f32:	1e74      	subs	r4, r6, #1
 8004f34:	a808      	add	r0, sp, #32
 8004f36:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004f3a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004f3e:	f10d 0c20 	add.w	ip, sp, #32
 8004f42:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8004f46:	e77e      	b.n	8004e46 <__kernel_rem_pio2f+0x16a>
 8004f48:	1e74      	subs	r4, r6, #1
 8004f4a:	a808      	add	r0, sp, #32
 8004f4c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004f50:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004f54:	e7f3      	b.n	8004f3e <__kernel_rem_pio2f+0x262>
 8004f56:	ab08      	add	r3, sp, #32
 8004f58:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004f5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004f60:	4318      	orrs	r0, r3
 8004f62:	e7ab      	b.n	8004ebc <__kernel_rem_pio2f+0x1e0>
 8004f64:	f10c 0c01 	add.w	ip, ip, #1
 8004f68:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8004f6c:	2c00      	cmp	r4, #0
 8004f6e:	d0f9      	beq.n	8004f64 <__kernel_rem_pio2f+0x288>
 8004f70:	9b05      	ldr	r3, [sp, #20]
 8004f72:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004f76:	eb0d 0003 	add.w	r0, sp, r3
 8004f7a:	9b01      	ldr	r3, [sp, #4]
 8004f7c:	18f4      	adds	r4, r6, r3
 8004f7e:	ab1c      	add	r3, sp, #112	; 0x70
 8004f80:	1c77      	adds	r7, r6, #1
 8004f82:	384c      	subs	r0, #76	; 0x4c
 8004f84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004f88:	4466      	add	r6, ip
 8004f8a:	42be      	cmp	r6, r7
 8004f8c:	f6ff af0b 	blt.w	8004da6 <__kernel_rem_pio2f+0xca>
 8004f90:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8004f94:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa0:	f04f 0c00 	mov.w	ip, #0
 8004fa4:	ece4 7a01 	vstmia	r4!, {s15}
 8004fa8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004fe8 <__kernel_rem_pio2f+0x30c>
 8004fac:	46a1      	mov	r9, r4
 8004fae:	458c      	cmp	ip, r1
 8004fb0:	dd07      	ble.n	8004fc2 <__kernel_rem_pio2f+0x2e6>
 8004fb2:	ece0 7a01 	vstmia	r0!, {s15}
 8004fb6:	3701      	adds	r7, #1
 8004fb8:	e7e7      	b.n	8004f8a <__kernel_rem_pio2f+0x2ae>
 8004fba:	9804      	ldr	r0, [sp, #16]
 8004fbc:	f04f 0c01 	mov.w	ip, #1
 8004fc0:	e7d2      	b.n	8004f68 <__kernel_rem_pio2f+0x28c>
 8004fc2:	ecfe 6a01 	vldmia	lr!, {s13}
 8004fc6:	ed39 7a01 	vldmdb	r9!, {s14}
 8004fca:	f10c 0c01 	add.w	ip, ip, #1
 8004fce:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004fd2:	e7ec      	b.n	8004fae <__kernel_rem_pio2f+0x2d2>
 8004fd4:	3c01      	subs	r4, #1
 8004fd6:	e775      	b.n	8004ec4 <__kernel_rem_pio2f+0x1e8>
 8004fd8:	0800597c 	.word	0x0800597c
 8004fdc:	08005950 	.word	0x08005950
 8004fe0:	43800000 	.word	0x43800000
 8004fe4:	3b800000 	.word	0x3b800000
 8004fe8:	00000000 	.word	0x00000000
 8004fec:	9b03      	ldr	r3, [sp, #12]
 8004fee:	eeb0 0a48 	vmov.f32	s0, s16
 8004ff2:	1a98      	subs	r0, r3, r2
 8004ff4:	f000 fa4e 	bl	8005494 <scalbnf>
 8004ff8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8004fe0 <__kernel_rem_pio2f+0x304>
 8004ffc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005004:	db19      	blt.n	800503a <__kernel_rem_pio2f+0x35e>
 8005006:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004fe4 <__kernel_rem_pio2f+0x308>
 800500a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800500e:	aa08      	add	r2, sp, #32
 8005010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005014:	1c74      	adds	r4, r6, #1
 8005016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800501a:	3508      	adds	r5, #8
 800501c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005024:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005028:	ee10 3a10 	vmov	r3, s0
 800502c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8005030:	ee17 3a90 	vmov	r3, s15
 8005034:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005038:	e74b      	b.n	8004ed2 <__kernel_rem_pio2f+0x1f6>
 800503a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800503e:	aa08      	add	r2, sp, #32
 8005040:	ee10 3a10 	vmov	r3, s0
 8005044:	4634      	mov	r4, r6
 8005046:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800504a:	e742      	b.n	8004ed2 <__kernel_rem_pio2f+0x1f6>
 800504c:	a808      	add	r0, sp, #32
 800504e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8005052:	9001      	str	r0, [sp, #4]
 8005054:	ee07 0a90 	vmov	s15, r0
 8005058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800505c:	3a01      	subs	r2, #1
 800505e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005062:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005066:	ed61 7a01 	vstmdb	r1!, {s15}
 800506a:	e73e      	b.n	8004eea <__kernel_rem_pio2f+0x20e>
 800506c:	ecfc 6a01 	vldmia	ip!, {s13}
 8005070:	ecb6 7a01 	vldmia	r6!, {s14}
 8005074:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005078:	3001      	adds	r0, #1
 800507a:	4550      	cmp	r0, sl
 800507c:	dc01      	bgt.n	8005082 <__kernel_rem_pio2f+0x3a6>
 800507e:	4288      	cmp	r0, r1
 8005080:	ddf4      	ble.n	800506c <__kernel_rem_pio2f+0x390>
 8005082:	a858      	add	r0, sp, #352	; 0x160
 8005084:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005088:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800508c:	3a01      	subs	r2, #1
 800508e:	e730      	b.n	8004ef2 <__kernel_rem_pio2f+0x216>
 8005090:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8005092:	2a02      	cmp	r2, #2
 8005094:	dc09      	bgt.n	80050aa <__kernel_rem_pio2f+0x3ce>
 8005096:	2a00      	cmp	r2, #0
 8005098:	dc2a      	bgt.n	80050f0 <__kernel_rem_pio2f+0x414>
 800509a:	d043      	beq.n	8005124 <__kernel_rem_pio2f+0x448>
 800509c:	f009 0007 	and.w	r0, r9, #7
 80050a0:	b059      	add	sp, #356	; 0x164
 80050a2:	ecbd 8b04 	vpop	{d8-d9}
 80050a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050aa:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d1f5      	bne.n	800509c <__kernel_rem_pio2f+0x3c0>
 80050b0:	ab30      	add	r3, sp, #192	; 0xc0
 80050b2:	442b      	add	r3, r5
 80050b4:	461a      	mov	r2, r3
 80050b6:	4619      	mov	r1, r3
 80050b8:	4620      	mov	r0, r4
 80050ba:	2800      	cmp	r0, #0
 80050bc:	f1a1 0104 	sub.w	r1, r1, #4
 80050c0:	dc51      	bgt.n	8005166 <__kernel_rem_pio2f+0x48a>
 80050c2:	4621      	mov	r1, r4
 80050c4:	2901      	cmp	r1, #1
 80050c6:	f1a2 0204 	sub.w	r2, r2, #4
 80050ca:	dc5c      	bgt.n	8005186 <__kernel_rem_pio2f+0x4aa>
 80050cc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8004fe8 <__kernel_rem_pio2f+0x30c>
 80050d0:	3304      	adds	r3, #4
 80050d2:	2c01      	cmp	r4, #1
 80050d4:	dc67      	bgt.n	80051a6 <__kernel_rem_pio2f+0x4ca>
 80050d6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80050da:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80050de:	2f00      	cmp	r7, #0
 80050e0:	d167      	bne.n	80051b2 <__kernel_rem_pio2f+0x4d6>
 80050e2:	edc8 6a00 	vstr	s13, [r8]
 80050e6:	ed88 7a01 	vstr	s14, [r8, #4]
 80050ea:	edc8 7a02 	vstr	s15, [r8, #8]
 80050ee:	e7d5      	b.n	800509c <__kernel_rem_pio2f+0x3c0>
 80050f0:	aa30      	add	r2, sp, #192	; 0xc0
 80050f2:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8004fe8 <__kernel_rem_pio2f+0x30c>
 80050f6:	4413      	add	r3, r2
 80050f8:	4622      	mov	r2, r4
 80050fa:	2a00      	cmp	r2, #0
 80050fc:	da24      	bge.n	8005148 <__kernel_rem_pio2f+0x46c>
 80050fe:	b34f      	cbz	r7, 8005154 <__kernel_rem_pio2f+0x478>
 8005100:	eef1 7a47 	vneg.f32	s15, s14
 8005104:	edc8 7a00 	vstr	s15, [r8]
 8005108:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800510c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005110:	aa31      	add	r2, sp, #196	; 0xc4
 8005112:	2301      	movs	r3, #1
 8005114:	429c      	cmp	r4, r3
 8005116:	da20      	bge.n	800515a <__kernel_rem_pio2f+0x47e>
 8005118:	b10f      	cbz	r7, 800511e <__kernel_rem_pio2f+0x442>
 800511a:	eef1 7a67 	vneg.f32	s15, s15
 800511e:	edc8 7a01 	vstr	s15, [r8, #4]
 8005122:	e7bb      	b.n	800509c <__kernel_rem_pio2f+0x3c0>
 8005124:	aa30      	add	r2, sp, #192	; 0xc0
 8005126:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8004fe8 <__kernel_rem_pio2f+0x30c>
 800512a:	4413      	add	r3, r2
 800512c:	2c00      	cmp	r4, #0
 800512e:	da05      	bge.n	800513c <__kernel_rem_pio2f+0x460>
 8005130:	b10f      	cbz	r7, 8005136 <__kernel_rem_pio2f+0x45a>
 8005132:	eef1 7a67 	vneg.f32	s15, s15
 8005136:	edc8 7a00 	vstr	s15, [r8]
 800513a:	e7af      	b.n	800509c <__kernel_rem_pio2f+0x3c0>
 800513c:	ed33 7a01 	vldmdb	r3!, {s14}
 8005140:	3c01      	subs	r4, #1
 8005142:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005146:	e7f1      	b.n	800512c <__kernel_rem_pio2f+0x450>
 8005148:	ed73 7a01 	vldmdb	r3!, {s15}
 800514c:	3a01      	subs	r2, #1
 800514e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005152:	e7d2      	b.n	80050fa <__kernel_rem_pio2f+0x41e>
 8005154:	eef0 7a47 	vmov.f32	s15, s14
 8005158:	e7d4      	b.n	8005104 <__kernel_rem_pio2f+0x428>
 800515a:	ecb2 7a01 	vldmia	r2!, {s14}
 800515e:	3301      	adds	r3, #1
 8005160:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005164:	e7d6      	b.n	8005114 <__kernel_rem_pio2f+0x438>
 8005166:	edd1 7a00 	vldr	s15, [r1]
 800516a:	edd1 6a01 	vldr	s13, [r1, #4]
 800516e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005172:	3801      	subs	r0, #1
 8005174:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005178:	ed81 7a00 	vstr	s14, [r1]
 800517c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005180:	edc1 7a01 	vstr	s15, [r1, #4]
 8005184:	e799      	b.n	80050ba <__kernel_rem_pio2f+0x3de>
 8005186:	edd2 7a00 	vldr	s15, [r2]
 800518a:	edd2 6a01 	vldr	s13, [r2, #4]
 800518e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005192:	3901      	subs	r1, #1
 8005194:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005198:	ed82 7a00 	vstr	s14, [r2]
 800519c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a0:	edc2 7a01 	vstr	s15, [r2, #4]
 80051a4:	e78e      	b.n	80050c4 <__kernel_rem_pio2f+0x3e8>
 80051a6:	ed33 7a01 	vldmdb	r3!, {s14}
 80051aa:	3c01      	subs	r4, #1
 80051ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051b0:	e78f      	b.n	80050d2 <__kernel_rem_pio2f+0x3f6>
 80051b2:	eef1 6a66 	vneg.f32	s13, s13
 80051b6:	eeb1 7a47 	vneg.f32	s14, s14
 80051ba:	edc8 6a00 	vstr	s13, [r8]
 80051be:	ed88 7a01 	vstr	s14, [r8, #4]
 80051c2:	eef1 7a67 	vneg.f32	s15, s15
 80051c6:	e790      	b.n	80050ea <__kernel_rem_pio2f+0x40e>

080051c8 <__kernel_sinf>:
 80051c8:	ee10 3a10 	vmov	r3, s0
 80051cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051d0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80051d4:	da04      	bge.n	80051e0 <__kernel_sinf+0x18>
 80051d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80051da:	ee17 3a90 	vmov	r3, s15
 80051de:	b35b      	cbz	r3, 8005238 <__kernel_sinf+0x70>
 80051e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80051e4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800523c <__kernel_sinf+0x74>
 80051e8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005240 <__kernel_sinf+0x78>
 80051ec:	eea7 6a27 	vfma.f32	s12, s14, s15
 80051f0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005244 <__kernel_sinf+0x7c>
 80051f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80051f8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005248 <__kernel_sinf+0x80>
 80051fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005200:	eddf 7a12 	vldr	s15, [pc, #72]	; 800524c <__kernel_sinf+0x84>
 8005204:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005208:	eee6 7a07 	vfma.f32	s15, s12, s14
 800520c:	b930      	cbnz	r0, 800521c <__kernel_sinf+0x54>
 800520e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005250 <__kernel_sinf+0x88>
 8005212:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005216:	eea6 0a26 	vfma.f32	s0, s12, s13
 800521a:	4770      	bx	lr
 800521c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005220:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005224:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005228:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800522c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005254 <__kernel_sinf+0x8c>
 8005230:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005234:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	2f2ec9d3 	.word	0x2f2ec9d3
 8005240:	b2d72f34 	.word	0xb2d72f34
 8005244:	3638ef1b 	.word	0x3638ef1b
 8005248:	b9500d01 	.word	0xb9500d01
 800524c:	3c088889 	.word	0x3c088889
 8005250:	be2aaaab 	.word	0xbe2aaaab
 8005254:	3e2aaaab 	.word	0x3e2aaaab

08005258 <atanf>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	ee10 5a10 	vmov	r5, s0
 800525e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8005262:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8005266:	eef0 7a40 	vmov.f32	s15, s0
 800526a:	db10      	blt.n	800528e <atanf+0x36>
 800526c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005270:	dd04      	ble.n	800527c <atanf+0x24>
 8005272:	ee70 7a00 	vadd.f32	s15, s0, s0
 8005276:	eeb0 0a67 	vmov.f32	s0, s15
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80053b4 <atanf+0x15c>
 8005280:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80053b8 <atanf+0x160>
 8005284:	2d00      	cmp	r5, #0
 8005286:	bfd8      	it	le
 8005288:	eef0 7a40 	vmovle.f32	s15, s0
 800528c:	e7f3      	b.n	8005276 <atanf+0x1e>
 800528e:	4b4b      	ldr	r3, [pc, #300]	; (80053bc <atanf+0x164>)
 8005290:	429c      	cmp	r4, r3
 8005292:	dc10      	bgt.n	80052b6 <atanf+0x5e>
 8005294:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8005298:	da0a      	bge.n	80052b0 <atanf+0x58>
 800529a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80053c0 <atanf+0x168>
 800529e:	ee30 7a07 	vadd.f32	s14, s0, s14
 80052a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052a6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80052aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ae:	dce2      	bgt.n	8005276 <atanf+0x1e>
 80052b0:	f04f 33ff 	mov.w	r3, #4294967295
 80052b4:	e013      	b.n	80052de <atanf+0x86>
 80052b6:	f000 f8a3 	bl	8005400 <fabsf>
 80052ba:	4b42      	ldr	r3, [pc, #264]	; (80053c4 <atanf+0x16c>)
 80052bc:	429c      	cmp	r4, r3
 80052be:	dc4f      	bgt.n	8005360 <atanf+0x108>
 80052c0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80052c4:	429c      	cmp	r4, r3
 80052c6:	dc41      	bgt.n	800534c <atanf+0xf4>
 80052c8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80052cc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80052d0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80052d4:	2300      	movs	r3, #0
 80052d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80052da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80052e4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80053c8 <atanf+0x170>
 80052e8:	eddf 5a38 	vldr	s11, [pc, #224]	; 80053cc <atanf+0x174>
 80052ec:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80053d0 <atanf+0x178>
 80052f0:	ee66 6a06 	vmul.f32	s13, s12, s12
 80052f4:	eee6 5a87 	vfma.f32	s11, s13, s14
 80052f8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80053d4 <atanf+0x17c>
 80052fc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005300:	eddf 5a35 	vldr	s11, [pc, #212]	; 80053d8 <atanf+0x180>
 8005304:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005308:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80053dc <atanf+0x184>
 800530c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005310:	eddf 5a33 	vldr	s11, [pc, #204]	; 80053e0 <atanf+0x188>
 8005314:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005318:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80053e4 <atanf+0x18c>
 800531c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005320:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80053e8 <atanf+0x190>
 8005324:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005328:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80053ec <atanf+0x194>
 800532c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005330:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80053f0 <atanf+0x198>
 8005334:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005338:	ee27 7a26 	vmul.f32	s14, s14, s13
 800533c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005340:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005344:	d121      	bne.n	800538a <atanf+0x132>
 8005346:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800534a:	e794      	b.n	8005276 <atanf+0x1e>
 800534c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005350:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005354:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005358:	2301      	movs	r3, #1
 800535a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800535e:	e7be      	b.n	80052de <atanf+0x86>
 8005360:	4b24      	ldr	r3, [pc, #144]	; (80053f4 <atanf+0x19c>)
 8005362:	429c      	cmp	r4, r3
 8005364:	dc0b      	bgt.n	800537e <atanf+0x126>
 8005366:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800536a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800536e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005372:	2302      	movs	r3, #2
 8005374:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800537c:	e7af      	b.n	80052de <atanf+0x86>
 800537e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005382:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005386:	2303      	movs	r3, #3
 8005388:	e7a9      	b.n	80052de <atanf+0x86>
 800538a:	4a1b      	ldr	r2, [pc, #108]	; (80053f8 <atanf+0x1a0>)
 800538c:	491b      	ldr	r1, [pc, #108]	; (80053fc <atanf+0x1a4>)
 800538e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005392:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005396:	ed93 0a00 	vldr	s0, [r3]
 800539a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800539e:	ed92 0a00 	vldr	s0, [r2]
 80053a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80053ac:	bfb8      	it	lt
 80053ae:	eef1 7a67 	vneglt.f32	s15, s15
 80053b2:	e760      	b.n	8005276 <atanf+0x1e>
 80053b4:	3fc90fdb 	.word	0x3fc90fdb
 80053b8:	bfc90fdb 	.word	0xbfc90fdb
 80053bc:	3edfffff 	.word	0x3edfffff
 80053c0:	7149f2ca 	.word	0x7149f2ca
 80053c4:	3f97ffff 	.word	0x3f97ffff
 80053c8:	3c8569d7 	.word	0x3c8569d7
 80053cc:	3d4bda59 	.word	0x3d4bda59
 80053d0:	bd6ef16b 	.word	0xbd6ef16b
 80053d4:	3d886b35 	.word	0x3d886b35
 80053d8:	3dba2e6e 	.word	0x3dba2e6e
 80053dc:	3e124925 	.word	0x3e124925
 80053e0:	3eaaaaab 	.word	0x3eaaaaab
 80053e4:	bd15a221 	.word	0xbd15a221
 80053e8:	bd9d8795 	.word	0xbd9d8795
 80053ec:	bde38e38 	.word	0xbde38e38
 80053f0:	be4ccccd 	.word	0xbe4ccccd
 80053f4:	401bffff 	.word	0x401bffff
 80053f8:	08005988 	.word	0x08005988
 80053fc:	08005998 	.word	0x08005998

08005400 <fabsf>:
 8005400:	ee10 3a10 	vmov	r3, s0
 8005404:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005408:	ee00 3a10 	vmov	s0, r3
 800540c:	4770      	bx	lr
	...

08005410 <floorf>:
 8005410:	ee10 3a10 	vmov	r3, s0
 8005414:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005418:	3a7f      	subs	r2, #127	; 0x7f
 800541a:	2a16      	cmp	r2, #22
 800541c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005420:	dc2a      	bgt.n	8005478 <floorf+0x68>
 8005422:	2a00      	cmp	r2, #0
 8005424:	da11      	bge.n	800544a <floorf+0x3a>
 8005426:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005488 <floorf+0x78>
 800542a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800542e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005436:	dd05      	ble.n	8005444 <floorf+0x34>
 8005438:	2b00      	cmp	r3, #0
 800543a:	da23      	bge.n	8005484 <floorf+0x74>
 800543c:	4a13      	ldr	r2, [pc, #76]	; (800548c <floorf+0x7c>)
 800543e:	2900      	cmp	r1, #0
 8005440:	bf18      	it	ne
 8005442:	4613      	movne	r3, r2
 8005444:	ee00 3a10 	vmov	s0, r3
 8005448:	4770      	bx	lr
 800544a:	4911      	ldr	r1, [pc, #68]	; (8005490 <floorf+0x80>)
 800544c:	4111      	asrs	r1, r2
 800544e:	420b      	tst	r3, r1
 8005450:	d0fa      	beq.n	8005448 <floorf+0x38>
 8005452:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005488 <floorf+0x78>
 8005456:	ee30 0a27 	vadd.f32	s0, s0, s15
 800545a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800545e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005462:	ddef      	ble.n	8005444 <floorf+0x34>
 8005464:	2b00      	cmp	r3, #0
 8005466:	bfbe      	ittt	lt
 8005468:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800546c:	fa40 f202 	asrlt.w	r2, r0, r2
 8005470:	189b      	addlt	r3, r3, r2
 8005472:	ea23 0301 	bic.w	r3, r3, r1
 8005476:	e7e5      	b.n	8005444 <floorf+0x34>
 8005478:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800547c:	d3e4      	bcc.n	8005448 <floorf+0x38>
 800547e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005482:	4770      	bx	lr
 8005484:	2300      	movs	r3, #0
 8005486:	e7dd      	b.n	8005444 <floorf+0x34>
 8005488:	7149f2ca 	.word	0x7149f2ca
 800548c:	bf800000 	.word	0xbf800000
 8005490:	007fffff 	.word	0x007fffff

08005494 <scalbnf>:
 8005494:	ee10 3a10 	vmov	r3, s0
 8005498:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800549c:	d025      	beq.n	80054ea <scalbnf+0x56>
 800549e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80054a2:	d302      	bcc.n	80054aa <scalbnf+0x16>
 80054a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80054a8:	4770      	bx	lr
 80054aa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80054ae:	d122      	bne.n	80054f6 <scalbnf+0x62>
 80054b0:	4b2a      	ldr	r3, [pc, #168]	; (800555c <scalbnf+0xc8>)
 80054b2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005560 <scalbnf+0xcc>
 80054b6:	4298      	cmp	r0, r3
 80054b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80054bc:	db16      	blt.n	80054ec <scalbnf+0x58>
 80054be:	ee10 3a10 	vmov	r3, s0
 80054c2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80054c6:	3a19      	subs	r2, #25
 80054c8:	4402      	add	r2, r0
 80054ca:	2afe      	cmp	r2, #254	; 0xfe
 80054cc:	dd15      	ble.n	80054fa <scalbnf+0x66>
 80054ce:	ee10 3a10 	vmov	r3, s0
 80054d2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005564 <scalbnf+0xd0>
 80054d6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005568 <scalbnf+0xd4>
 80054da:	2b00      	cmp	r3, #0
 80054dc:	eeb0 7a67 	vmov.f32	s14, s15
 80054e0:	bfb8      	it	lt
 80054e2:	eef0 7a66 	vmovlt.f32	s15, s13
 80054e6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80054ea:	4770      	bx	lr
 80054ec:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800556c <scalbnf+0xd8>
 80054f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80054f4:	4770      	bx	lr
 80054f6:	0dd2      	lsrs	r2, r2, #23
 80054f8:	e7e6      	b.n	80054c8 <scalbnf+0x34>
 80054fa:	2a00      	cmp	r2, #0
 80054fc:	dd06      	ble.n	800550c <scalbnf+0x78>
 80054fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005502:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005506:	ee00 3a10 	vmov	s0, r3
 800550a:	4770      	bx	lr
 800550c:	f112 0f16 	cmn.w	r2, #22
 8005510:	da1a      	bge.n	8005548 <scalbnf+0xb4>
 8005512:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005516:	4298      	cmp	r0, r3
 8005518:	ee10 3a10 	vmov	r3, s0
 800551c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005520:	dd0a      	ble.n	8005538 <scalbnf+0xa4>
 8005522:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005564 <scalbnf+0xd0>
 8005526:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005568 <scalbnf+0xd4>
 800552a:	eef0 7a40 	vmov.f32	s15, s0
 800552e:	2b00      	cmp	r3, #0
 8005530:	bf18      	it	ne
 8005532:	eeb0 0a47 	vmovne.f32	s0, s14
 8005536:	e7db      	b.n	80054f0 <scalbnf+0x5c>
 8005538:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800556c <scalbnf+0xd8>
 800553c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005570 <scalbnf+0xdc>
 8005540:	eef0 7a40 	vmov.f32	s15, s0
 8005544:	2b00      	cmp	r3, #0
 8005546:	e7f3      	b.n	8005530 <scalbnf+0x9c>
 8005548:	3219      	adds	r2, #25
 800554a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800554e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005552:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005574 <scalbnf+0xe0>
 8005556:	ee07 3a10 	vmov	s14, r3
 800555a:	e7c4      	b.n	80054e6 <scalbnf+0x52>
 800555c:	ffff3cb0 	.word	0xffff3cb0
 8005560:	4c000000 	.word	0x4c000000
 8005564:	7149f2ca 	.word	0x7149f2ca
 8005568:	f149f2ca 	.word	0xf149f2ca
 800556c:	0da24260 	.word	0x0da24260
 8005570:	8da24260 	.word	0x8da24260
 8005574:	33000000 	.word	0x33000000

08005578 <_init>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	bf00      	nop
 800557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557e:	bc08      	pop	{r3}
 8005580:	469e      	mov	lr, r3
 8005582:	4770      	bx	lr

08005584 <_fini>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	bf00      	nop
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr
